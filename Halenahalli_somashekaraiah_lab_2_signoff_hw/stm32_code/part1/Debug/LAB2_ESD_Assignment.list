
LAB2_ESD_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011c4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800135c  0800135c  0001135c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800136c  0800136c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800136c  0800136c  0001136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001374  08001374  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001374  08001374  00011374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001378  08001378  00011378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800137c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08001388  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001388  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002f84  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c23  00000000  00000000  00023003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  00023c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000297  00000000  00000000  00023fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001418a  00000000  00000000  00024257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003bd2  00000000  00000000  000383e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f595  00000000  00000000  0003bfb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d14  00000000  00000000  000bb548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000bc25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001344 	.word	0x08001344

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001344 	.word	0x08001344

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	db0b      	blt.n	80004fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	f003 021f 	and.w	r2, r3, #31
 80004ec:	4907      	ldr	r1, [pc, #28]	; (800050c <__NVIC_EnableIRQ+0x38>)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	095b      	lsrs	r3, r3, #5
 80004f4:	2001      	movs	r0, #1
 80004f6:	fa00 f202 	lsl.w	r2, r0, r2
 80004fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000e100 	.word	0xe000e100

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f806 	bl	8000524 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f86e 	bl	80005f8 <MX_GPIO_Init>

  /* Initialize Timer2 mode, prescalar and auto-reload */
  TIM2_Init();
 800051c:	f000 f88a 	bl	8000634 <TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x10>
	...

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f000 feda 	bl	80012ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000590:	2300      	movs	r3, #0
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000594:	2308      	movs	r3, #8
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000598:	23c0      	movs	r3, #192	; 0xc0
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059c:	2304      	movs	r3, #4
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fa3b 	bl	8000a24 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b4:	f000 f868 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2103      	movs	r1, #3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fc9c 	bl	8000f14 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005e2:	f000 f851 	bl	8000688 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_GPIOA_ENR | RCC_GPIOD_ENR;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_GPIO_Init+0x34>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <MX_GPIO_Init+0x34>)
 8000602:	f043 0309 	orr.w	r3, r3, #9
 8000606:	6313      	str	r3, [r2, #48]	; 0x30

    //GPIOA->MODER &= ~(GPIOA_PORT0_INPUT);
    GPIOD->MODER |= GPIOD_PORT14_OUTPUT | GPIOD_PORT15_OUTPUT;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_GPIO_Init+0x38>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a08      	ldr	r2, [pc, #32]	; (8000630 <MX_GPIO_Init+0x38>)
 800060e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000612:	6013      	str	r3, [r2, #0]

    //EXTI->IMR |= EXTI_IMR_PORTA0;
    //EXTI->RTSR |= EXTI_RTSR_PORTA0;

    // turn ON LEDs
    GPIOD->BSRR |= PORT14 | PORT15;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_GPIO_Init+0x38>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <MX_GPIO_Init+0x38>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6193      	str	r3, [r2, #24]

    //NVIC_EnableIRQ(EXTI0_IRQn);
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020c00 	.word	0x40020c00

08000634 <TIM2_Init>:

static void TIM2_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	//Enable clock access
	RCC->APB1ENR |= RCC_TIM2_ENR;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <TIM2_Init+0x50>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <TIM2_Init+0x50>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	6413      	str	r3, [r2, #64]	; 0x40

	//Configure the peripheral to have visible period
    TIM2->DIER |= TIM2_DIER_UIE;
 8000644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	60d3      	str	r3, [r2, #12]
    TIM2->PSC = 700;
 8000654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000658:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 18600;
 800065e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000662:	f644 02a8 	movw	r2, #18600	; 0x48a8
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable interrupts
	NVIC_EnableIRQ(TIM2_IRQn);
 8000668:	201c      	movs	r0, #28
 800066a:	f7ff ff33 	bl	80004d4 <__NVIC_EnableIRQ>

	//Enable clock
	TIM2->CR1 |= TIM2_CR1_CE;
 800066e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6013      	str	r3, [r2, #0]

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <EXTI0_IRQHandler>:

/**
  * @brief This function handles System tick timer.
  */
void EXTI0_IRQHandler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	/* Resetting pending register used for interrupt */
	EXTI->PR |= EXTI_PR_PR0;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <EXTI0_IRQHandler+0x58>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <EXTI0_IRQHandler+0x58>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6153      	str	r3, [r2, #20]
    static int i = 0;
    i++;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <EXTI0_IRQHandler+0x5c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <EXTI0_IRQHandler+0x5c>)
 80006ac:	6013      	str	r3, [r2, #0]
    /* Disable timer 2 in odd interval, Enable timer 2 in even interval */
    if((i % 2) == 1){
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <EXTI0_IRQHandler+0x5c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	bfb8      	it	lt
 80006ba:	425b      	neglt	r3, r3
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d108      	bne.n	80006d2 <EXTI0_IRQHandler+0x3e>
	    TIM2->CR1 &= ~(TIM2_CR1_CE);
 80006c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ca:	f023 0301 	bic.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]
    }else{
	    TIM2->CR1 |= TIM2_CR1_CE;
    }
}
 80006d0:	e007      	b.n	80006e2 <EXTI0_IRQHandler+0x4e>
	    TIM2->CR1 |= TIM2_CR1_CE;
 80006d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6013      	str	r3, [r2, #0]
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40013c00 	.word	0x40013c00
 80006f0:	20000028 	.word	0x20000028

080006f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles System tick timer.
  */
void TIM2_IRQHandler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
	/* clearing update Interrupt flag */
	TIM2->SR &= ~(TIM2_SR_UIF);
 80006f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000702:	f023 0301 	bic.w	r3, r3, #1
 8000706:	6113      	str	r3, [r2, #16]
    static int i = 0;
    i++;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <TIM2_IRQHandler+0x50>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <TIM2_IRQHandler+0x50>)
 8000710:	6013      	str	r3, [r2, #0]
    /* toggle LED state to make it appear as blinking in odd and even interval */
    if(i % 2){
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <TIM2_IRQHandler+0x50>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <TIM2_IRQHandler+0x38>
	     GPIOD->BSRR |= PORT14;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <TIM2_IRQHandler+0x54>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a09      	ldr	r2, [pc, #36]	; (8000748 <TIM2_IRQHandler+0x54>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6193      	str	r3, [r2, #24]
    }else{
	     GPIOD->BSRR |= PORT14 << 16;
    }
}
 800072a:	e005      	b.n	8000738 <TIM2_IRQHandler+0x44>
	     GPIOD->BSRR |= PORT14 << 16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <TIM2_IRQHandler+0x54>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a05      	ldr	r2, [pc, #20]	; (8000748 <TIM2_IRQHandler+0x54>)
 8000732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000736:	6193      	str	r3, [r2, #24]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	2000002c 	.word	0x2000002c
 8000748:	40020c00 	.word	0x40020c00

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <MemManage_Handler+0x4>

0800075e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <UsageFault_Handler+0x4>

0800076a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 f86e 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007ca:	490e      	ldr	r1, [pc, #56]	; (8000804 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007e0:	4c0b      	ldr	r4, [pc, #44]	; (8000810 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ee:	f7ff ffd7 	bl	80007a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f000 fd83 	bl	80012fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff fe8b 	bl	8000510 <main>
  bx  lr    
 80007fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000808:	0800137c 	.word	0x0800137c
  ldr r2, =_sbss
 800080c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000810:	20000034 	.word	0x20000034

08000814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC_IRQHandler>
	...

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f8e8 	bl	8000a0c <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 f8be 	bl	80009d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	20000030 	.word	0x20000030

080008a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <HAL_GetTick+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000030 	.word	0x20000030

080008b8 <__NVIC_GetPriorityGrouping>:
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff8e 	bl	80008d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e6:	f7ff ff67 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 80009ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	6978      	ldr	r0, [r7, #20]
 80009f2:	f7ff ff99 	bl	8000928 <NVIC_EncodePriority>
 80009f6:	4602      	mov	r2, r0
 80009f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff68 	bl	80008d4 <__NVIC_SetPriority>
}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffbb 	bl	8000990 <SysTick_Config>
 8000a1a:	4603      	mov	r3, r0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d101      	bne.n	8000a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e267      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d075      	beq.n	8000b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a42:	4b88      	ldr	r3, [pc, #544]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f003 030c 	and.w	r3, r3, #12
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d00c      	beq.n	8000a68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a4e:	4b85      	ldr	r3, [pc, #532]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a56:	2b08      	cmp	r3, #8
 8000a58:	d112      	bne.n	8000a80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a5a:	4b82      	ldr	r3, [pc, #520]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a66:	d10b      	bne.n	8000a80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a68:	4b7e      	ldr	r3, [pc, #504]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d05b      	beq.n	8000b2c <HAL_RCC_OscConfig+0x108>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d157      	bne.n	8000b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e242      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a88:	d106      	bne.n	8000a98 <HAL_RCC_OscConfig+0x74>
 8000a8a:	4b76      	ldr	r3, [pc, #472]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a75      	ldr	r2, [pc, #468]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	e01d      	b.n	8000ad4 <HAL_RCC_OscConfig+0xb0>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000aa0:	d10c      	bne.n	8000abc <HAL_RCC_OscConfig+0x98>
 8000aa2:	4b70      	ldr	r3, [pc, #448]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a6f      	ldr	r2, [pc, #444]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b6d      	ldr	r3, [pc, #436]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a6c      	ldr	r2, [pc, #432]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e00b      	b.n	8000ad4 <HAL_RCC_OscConfig+0xb0>
 8000abc:	4b69      	ldr	r3, [pc, #420]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a68      	ldr	r2, [pc, #416]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b66      	ldr	r3, [pc, #408]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a65      	ldr	r2, [pc, #404]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d013      	beq.n	8000b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000adc:	f7ff fee0 	bl	80008a0 <HAL_GetTick>
 8000ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae2:	e008      	b.n	8000af6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ae4:	f7ff fedc 	bl	80008a0 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b64      	cmp	r3, #100	; 0x64
 8000af0:	d901      	bls.n	8000af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000af2:	2303      	movs	r3, #3
 8000af4:	e207      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af6:	4b5b      	ldr	r3, [pc, #364]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f0      	beq.n	8000ae4 <HAL_RCC_OscConfig+0xc0>
 8000b02:	e014      	b.n	8000b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b04:	f7ff fecc 	bl	80008a0 <HAL_GetTick>
 8000b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b0a:	e008      	b.n	8000b1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0c:	f7ff fec8 	bl	80008a0 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b64      	cmp	r3, #100	; 0x64
 8000b18:	d901      	bls.n	8000b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e1f3      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b1e:	4b51      	ldr	r3, [pc, #324]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f0      	bne.n	8000b0c <HAL_RCC_OscConfig+0xe8>
 8000b2a:	e000      	b.n	8000b2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d063      	beq.n	8000c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00b      	beq.n	8000b5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d11c      	bne.n	8000b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b52:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d116      	bne.n	8000b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b5e:	4b41      	ldr	r3, [pc, #260]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <HAL_RCC_OscConfig+0x152>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d001      	beq.n	8000b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e1c7      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b76:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4937      	ldr	r1, [pc, #220]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000b86:	4313      	orrs	r3, r2
 8000b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b8a:	e03a      	b.n	8000c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d020      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <HAL_RCC_OscConfig+0x244>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fe81 	bl	80008a0 <HAL_GetTick>
 8000b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba0:	e008      	b.n	8000bb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fe7d 	bl	80008a0 <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d901      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e1a8      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f0      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4925      	ldr	r1, [pc, #148]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	600b      	str	r3, [r1, #0]
 8000bd4:	e015      	b.n	8000c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <HAL_RCC_OscConfig+0x244>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fe60 	bl	80008a0 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000be4:	f7ff fe5c 	bl	80008a0 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e187      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f0      	bne.n	8000be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d036      	beq.n	8000c7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d016      	beq.n	8000c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_RCC_OscConfig+0x248>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c1c:	f7ff fe40 	bl	80008a0 <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c24:	f7ff fe3c 	bl	80008a0 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e167      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_RCC_OscConfig+0x240>)
 8000c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0x200>
 8000c42:	e01b      	b.n	8000c7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_RCC_OscConfig+0x248>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c4a:	f7ff fe29 	bl	80008a0 <HAL_GetTick>
 8000c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c50:	e00e      	b.n	8000c70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c52:	f7ff fe25 	bl	80008a0 <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d907      	bls.n	8000c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e150      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
 8000c64:	40023800 	.word	0x40023800
 8000c68:	42470000 	.word	0x42470000
 8000c6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c70:	4b88      	ldr	r3, [pc, #544]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1ea      	bne.n	8000c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f000 8097 	beq.w	8000db8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c8e:	4b81      	ldr	r3, [pc, #516]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b7d      	ldr	r3, [pc, #500]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a7c      	ldr	r2, [pc, #496]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b7a      	ldr	r3, [pc, #488]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cba:	4b77      	ldr	r3, [pc, #476]	; (8000e98 <HAL_RCC_OscConfig+0x474>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d118      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cc6:	4b74      	ldr	r3, [pc, #464]	; (8000e98 <HAL_RCC_OscConfig+0x474>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a73      	ldr	r2, [pc, #460]	; (8000e98 <HAL_RCC_OscConfig+0x474>)
 8000ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cd2:	f7ff fde5 	bl	80008a0 <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cda:	f7ff fde1 	bl	80008a0 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e10c      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cec:	4b6a      	ldr	r3, [pc, #424]	; (8000e98 <HAL_RCC_OscConfig+0x474>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f0      	beq.n	8000cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d106      	bne.n	8000d0e <HAL_RCC_OscConfig+0x2ea>
 8000d00:	4b64      	ldr	r3, [pc, #400]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d04:	4a63      	ldr	r2, [pc, #396]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8000d0c:	e01c      	b.n	8000d48 <HAL_RCC_OscConfig+0x324>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b05      	cmp	r3, #5
 8000d14:	d10c      	bne.n	8000d30 <HAL_RCC_OscConfig+0x30c>
 8000d16:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d1a:	4a5e      	ldr	r2, [pc, #376]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6713      	str	r3, [r2, #112]	; 0x70
 8000d22:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d26:	4a5b      	ldr	r2, [pc, #364]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d2e:	e00b      	b.n	8000d48 <HAL_RCC_OscConfig+0x324>
 8000d30:	4b58      	ldr	r3, [pc, #352]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d34:	4a57      	ldr	r2, [pc, #348]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d36:	f023 0301 	bic.w	r3, r3, #1
 8000d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8000d3c:	4b55      	ldr	r3, [pc, #340]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d40:	4a54      	ldr	r2, [pc, #336]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d42:	f023 0304 	bic.w	r3, r3, #4
 8000d46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d015      	beq.n	8000d7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d50:	f7ff fda6 	bl	80008a0 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d56:	e00a      	b.n	8000d6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d58:	f7ff fda2 	bl	80008a0 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e0cb      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d6e:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0ee      	beq.n	8000d58 <HAL_RCC_OscConfig+0x334>
 8000d7a:	e014      	b.n	8000da6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fd90 	bl	80008a0 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d82:	e00a      	b.n	8000d9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d84:	f7ff fd8c 	bl	80008a0 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e0b5      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1ee      	bne.n	8000d84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000da6:	7dfb      	ldrb	r3, [r7, #23]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d105      	bne.n	8000db8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dac:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a38      	ldr	r2, [pc, #224]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80a1 	beq.w	8000f04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dc2:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 030c 	and.w	r3, r3, #12
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d05c      	beq.n	8000e88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d141      	bne.n	8000e5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dd6:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <HAL_RCC_OscConfig+0x478>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fd60 	bl	80008a0 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de4:	f7ff fd5c 	bl	80008a0 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e087      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69da      	ldr	r2, [r3, #28]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	019b      	lsls	r3, r3, #6
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	085b      	lsrs	r3, r3, #1
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	061b      	lsls	r3, r3, #24
 8000e26:	491b      	ldr	r1, [pc, #108]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_RCC_OscConfig+0x478>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e32:	f7ff fd35 	bl	80008a0 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e3a:	f7ff fd31 	bl	80008a0 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e05c      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x416>
 8000e58:	e054      	b.n	8000f04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_RCC_OscConfig+0x478>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fd1e 	bl	80008a0 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e68:	f7ff fd1a 	bl	80008a0 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e045      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_RCC_OscConfig+0x470>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f0      	bne.n	8000e68 <HAL_RCC_OscConfig+0x444>
 8000e86:	e03d      	b.n	8000f04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d107      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e038      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40007000 	.word	0x40007000
 8000e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_RCC_OscConfig+0x4ec>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d028      	beq.n	8000f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d121      	bne.n	8000f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d11a      	bne.n	8000f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d111      	bne.n	8000f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d107      	bne.n	8000f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d001      	beq.n	8000f04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0cc      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f28:	4b68      	ldr	r3, [pc, #416]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d90c      	bls.n	8000f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f36:	4b65      	ldr	r3, [pc, #404]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3e:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e0b8      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d020      	beq.n	8000f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f68:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f80:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4a52      	ldr	r2, [pc, #328]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f8c:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	494d      	ldr	r1, [pc, #308]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d044      	beq.n	8001034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d107      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d119      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e07f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d107      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e06f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e067      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f023 0203 	bic.w	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4934      	ldr	r1, [pc, #208]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001000:	4313      	orrs	r3, r2
 8001002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001004:	f7ff fc4c 	bl	80008a0 <HAL_GetTick>
 8001008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100a:	e00a      	b.n	8001022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100c:	f7ff fc48 	bl	80008a0 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	f241 3288 	movw	r2, #5000	; 0x1388
 800101a:	4293      	cmp	r3, r2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e04f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 020c 	and.w	r2, r3, #12
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	429a      	cmp	r2, r3
 8001032:	d1eb      	bne.n	800100c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d20c      	bcs.n	800105c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_RCC_ClockConfig+0x1b8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e032      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d008      	beq.n	800107a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4916      	ldr	r1, [pc, #88]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	4313      	orrs	r3, r2
 8001078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	490e      	ldr	r1, [pc, #56]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	4313      	orrs	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800109a:	f000 f821 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 800109e:	4602      	mov	r2, r0
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	490a      	ldr	r1, [pc, #40]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 80010ac:	5ccb      	ldrb	r3, [r1, r3]
 80010ae:	fa22 f303 	lsr.w	r3, r2, r3
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_RCC_ClockConfig+0x1c8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fbac 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023c00 	.word	0x40023c00
 80010d0:	40023800 	.word	0x40023800
 80010d4:	0800135c 	.word	0x0800135c
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e4:	b094      	sub	sp, #80	; 0x50
 80010e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
 80010ec:	2300      	movs	r3, #0
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010f0:	2300      	movs	r3, #0
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010f8:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d00d      	beq.n	8001120 <HAL_RCC_GetSysClockFreq+0x40>
 8001104:	2b08      	cmp	r3, #8
 8001106:	f200 80e1 	bhi.w	80012cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <HAL_RCC_GetSysClockFreq+0x34>
 800110e:	2b04      	cmp	r3, #4
 8001110:	d003      	beq.n	800111a <HAL_RCC_GetSysClockFreq+0x3a>
 8001112:	e0db      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001114:	4b73      	ldr	r3, [pc, #460]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001118:	e0db      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800111a:	4b73      	ldr	r3, [pc, #460]	; (80012e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800111c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800111e:	e0d8      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001120:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001128:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800112a:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d063      	beq.n	80011fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001136:	4b6a      	ldr	r3, [pc, #424]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	099b      	lsrs	r3, r3, #6
 800113c:	2200      	movs	r2, #0
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001140:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
 800114a:	2300      	movs	r3, #0
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
 800114e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001152:	4622      	mov	r2, r4
 8001154:	462b      	mov	r3, r5
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	f04f 0100 	mov.w	r1, #0
 800115e:	0159      	lsls	r1, r3, #5
 8001160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001164:	0150      	lsls	r0, r2, #5
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4621      	mov	r1, r4
 800116c:	1a51      	subs	r1, r2, r1
 800116e:	6139      	str	r1, [r7, #16]
 8001170:	4629      	mov	r1, r5
 8001172:	eb63 0301 	sbc.w	r3, r3, r1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001184:	4659      	mov	r1, fp
 8001186:	018b      	lsls	r3, r1, #6
 8001188:	4651      	mov	r1, sl
 800118a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800118e:	4651      	mov	r1, sl
 8001190:	018a      	lsls	r2, r1, #6
 8001192:	4651      	mov	r1, sl
 8001194:	ebb2 0801 	subs.w	r8, r2, r1
 8001198:	4659      	mov	r1, fp
 800119a:	eb63 0901 	sbc.w	r9, r3, r1
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011b2:	4690      	mov	r8, r2
 80011b4:	4699      	mov	r9, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	eb18 0303 	adds.w	r3, r8, r3
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	462b      	mov	r3, r5
 80011c0:	eb49 0303 	adc.w	r3, r9, r3
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80011d2:	4629      	mov	r1, r5
 80011d4:	024b      	lsls	r3, r1, #9
 80011d6:	4621      	mov	r1, r4
 80011d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80011dc:	4621      	mov	r1, r4
 80011de:	024a      	lsls	r2, r1, #9
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e6:	2200      	movs	r2, #0
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80011ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011f0:	f7fe fff2 	bl	80001d8 <__aeabi_uldivmod>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4613      	mov	r3, r2
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011fc:	e058      	b.n	80012b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011fe:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	099b      	lsrs	r3, r3, #6
 8001204:	2200      	movs	r2, #0
 8001206:	4618      	mov	r0, r3
 8001208:	4611      	mov	r1, r2
 800120a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
 8001214:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001218:	4642      	mov	r2, r8
 800121a:	464b      	mov	r3, r9
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f04f 0100 	mov.w	r1, #0
 8001224:	0159      	lsls	r1, r3, #5
 8001226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800122a:	0150      	lsls	r0, r2, #5
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4641      	mov	r1, r8
 8001232:	ebb2 0a01 	subs.w	sl, r2, r1
 8001236:	4649      	mov	r1, r9
 8001238:	eb63 0b01 	sbc.w	fp, r3, r1
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001248:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800124c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001250:	ebb2 040a 	subs.w	r4, r2, sl
 8001254:	eb63 050b 	sbc.w	r5, r3, fp
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	00eb      	lsls	r3, r5, #3
 8001262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001266:	00e2      	lsls	r2, r4, #3
 8001268:	4614      	mov	r4, r2
 800126a:	461d      	mov	r5, r3
 800126c:	4643      	mov	r3, r8
 800126e:	18e3      	adds	r3, r4, r3
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	464b      	mov	r3, r9
 8001274:	eb45 0303 	adc.w	r3, r5, r3
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001286:	4629      	mov	r1, r5
 8001288:	028b      	lsls	r3, r1, #10
 800128a:	4621      	mov	r1, r4
 800128c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001290:	4621      	mov	r1, r4
 8001292:	028a      	lsls	r2, r1, #10
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129a:	2200      	movs	r2, #0
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	61fa      	str	r2, [r7, #28]
 80012a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012a4:	f7fe ff98 	bl	80001d8 <__aeabi_uldivmod>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4613      	mov	r3, r2
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	3301      	adds	r3, #1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80012c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80012ca:	e002      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80012d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3750      	adds	r7, #80	; 0x50
 80012d8:	46bd      	mov	sp, r7
 80012da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	00f42400 	.word	0x00f42400
 80012e8:	007a1200 	.word	0x007a1200

080012ec <memset>:
 80012ec:	4402      	add	r2, r0
 80012ee:	4603      	mov	r3, r0
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d100      	bne.n	80012f6 <memset+0xa>
 80012f4:	4770      	bx	lr
 80012f6:	f803 1b01 	strb.w	r1, [r3], #1
 80012fa:	e7f9      	b.n	80012f0 <memset+0x4>

080012fc <__libc_init_array>:
 80012fc:	b570      	push	{r4, r5, r6, lr}
 80012fe:	4d0d      	ldr	r5, [pc, #52]	; (8001334 <__libc_init_array+0x38>)
 8001300:	4c0d      	ldr	r4, [pc, #52]	; (8001338 <__libc_init_array+0x3c>)
 8001302:	1b64      	subs	r4, r4, r5
 8001304:	10a4      	asrs	r4, r4, #2
 8001306:	2600      	movs	r6, #0
 8001308:	42a6      	cmp	r6, r4
 800130a:	d109      	bne.n	8001320 <__libc_init_array+0x24>
 800130c:	4d0b      	ldr	r5, [pc, #44]	; (800133c <__libc_init_array+0x40>)
 800130e:	4c0c      	ldr	r4, [pc, #48]	; (8001340 <__libc_init_array+0x44>)
 8001310:	f000 f818 	bl	8001344 <_init>
 8001314:	1b64      	subs	r4, r4, r5
 8001316:	10a4      	asrs	r4, r4, #2
 8001318:	2600      	movs	r6, #0
 800131a:	42a6      	cmp	r6, r4
 800131c:	d105      	bne.n	800132a <__libc_init_array+0x2e>
 800131e:	bd70      	pop	{r4, r5, r6, pc}
 8001320:	f855 3b04 	ldr.w	r3, [r5], #4
 8001324:	4798      	blx	r3
 8001326:	3601      	adds	r6, #1
 8001328:	e7ee      	b.n	8001308 <__libc_init_array+0xc>
 800132a:	f855 3b04 	ldr.w	r3, [r5], #4
 800132e:	4798      	blx	r3
 8001330:	3601      	adds	r6, #1
 8001332:	e7f2      	b.n	800131a <__libc_init_array+0x1e>
 8001334:	08001374 	.word	0x08001374
 8001338:	08001374 	.word	0x08001374
 800133c:	08001374 	.word	0x08001374
 8001340:	08001378 	.word	0x08001378

08001344 <_init>:
 8001344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001346:	bf00      	nop
 8001348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800134a:	bc08      	pop	{r3}
 800134c:	469e      	mov	lr, r3
 800134e:	4770      	bx	lr

08001350 <_fini>:
 8001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001352:	bf00      	nop
 8001354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001356:	bc08      	pop	{r3}
 8001358:	469e      	mov	lr, r3
 800135a:	4770      	bx	lr
