                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _lcd_command_PARM_3
                                     12 	.globl _lcd_command_PARM_2
                                     13 	.globl _main
                                     14 	.globl _reset_clock
                                     15 	.globl _isr_timer2
                                     16 	.globl _timer2_interrupt_Init
                                     17 	.globl _timer2_init
                                     18 	.globl _set_cgram_address
                                     19 	.globl _test_functionality
                                     20 	.globl _lcdclear
                                     21 	.globl _lcdinit
                                     22 	.globl _lcdputstr
                                     23 	.globl _lcdputch
                                     24 	.globl _lcdgotoxy
                                     25 	.globl _lcdgotoaddr
                                     26 	.globl _lcdbusywait
                                     27 	.globl _lcd_command
                                     28 	.globl _delay
                                     29 	.globl __sdcc_external_startup
                                     30 	.globl _echo
                                     31 	.globl _printf_tiny
                                     32 	.globl _TF1
                                     33 	.globl _TR1
                                     34 	.globl _TF0
                                     35 	.globl _TR0
                                     36 	.globl _IE1
                                     37 	.globl _IT1
                                     38 	.globl _IE0
                                     39 	.globl _IT0
                                     40 	.globl _SM0
                                     41 	.globl _SM1
                                     42 	.globl _SM2
                                     43 	.globl _REN
                                     44 	.globl _TB8
                                     45 	.globl _RB8
                                     46 	.globl _TI
                                     47 	.globl _RI
                                     48 	.globl _CY
                                     49 	.globl _AC
                                     50 	.globl _F0
                                     51 	.globl _RS1
                                     52 	.globl _RS0
                                     53 	.globl _OV
                                     54 	.globl _F1
                                     55 	.globl _P
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD0
                                     63 	.globl _TXD
                                     64 	.globl _RXD0
                                     65 	.globl _RXD
                                     66 	.globl _P3_7
                                     67 	.globl _P3_6
                                     68 	.globl _P3_5
                                     69 	.globl _P3_4
                                     70 	.globl _P3_3
                                     71 	.globl _P3_2
                                     72 	.globl _P3_1
                                     73 	.globl _P3_0
                                     74 	.globl _P2_7
                                     75 	.globl _P2_6
                                     76 	.globl _P2_5
                                     77 	.globl _P2_4
                                     78 	.globl _P2_3
                                     79 	.globl _P2_2
                                     80 	.globl _P2_1
                                     81 	.globl _P2_0
                                     82 	.globl _P1_7
                                     83 	.globl _P1_6
                                     84 	.globl _P1_5
                                     85 	.globl _P1_4
                                     86 	.globl _P1_3
                                     87 	.globl _P1_2
                                     88 	.globl _P1_1
                                     89 	.globl _P1_0
                                     90 	.globl _P0_7
                                     91 	.globl _P0_6
                                     92 	.globl _P0_5
                                     93 	.globl _P0_4
                                     94 	.globl _P0_3
                                     95 	.globl _P0_2
                                     96 	.globl _P0_1
                                     97 	.globl _P0_0
                                     98 	.globl _PS
                                     99 	.globl _PT1
                                    100 	.globl _PX1
                                    101 	.globl _PT0
                                    102 	.globl _PX0
                                    103 	.globl _EA
                                    104 	.globl _ES
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _BREG_F7
                                    110 	.globl _BREG_F6
                                    111 	.globl _BREG_F5
                                    112 	.globl _BREG_F4
                                    113 	.globl _BREG_F3
                                    114 	.globl _BREG_F2
                                    115 	.globl _BREG_F1
                                    116 	.globl _BREG_F0
                                    117 	.globl _P5_7
                                    118 	.globl _P5_6
                                    119 	.globl _P5_5
                                    120 	.globl _P5_4
                                    121 	.globl _P5_3
                                    122 	.globl _P5_2
                                    123 	.globl _P5_1
                                    124 	.globl _P5_0
                                    125 	.globl _P4_7
                                    126 	.globl _P4_6
                                    127 	.globl _P4_5
                                    128 	.globl _P4_4
                                    129 	.globl _P4_3
                                    130 	.globl _P4_2
                                    131 	.globl _P4_1
                                    132 	.globl _P4_0
                                    133 	.globl _PX0L
                                    134 	.globl _PT0L
                                    135 	.globl _PX1L
                                    136 	.globl _PT1L
                                    137 	.globl _PSL
                                    138 	.globl _PT2L
                                    139 	.globl _PPCL
                                    140 	.globl _EC
                                    141 	.globl _CCF0
                                    142 	.globl _CCF1
                                    143 	.globl _CCF2
                                    144 	.globl _CCF3
                                    145 	.globl _CCF4
                                    146 	.globl _CR
                                    147 	.globl _CF
                                    148 	.globl _TF2
                                    149 	.globl _EXF2
                                    150 	.globl _RCLK
                                    151 	.globl _TCLK
                                    152 	.globl _EXEN2
                                    153 	.globl _TR2
                                    154 	.globl _C_T2
                                    155 	.globl _CP_RL2
                                    156 	.globl _T2CON_7
                                    157 	.globl _T2CON_6
                                    158 	.globl _T2CON_5
                                    159 	.globl _T2CON_4
                                    160 	.globl _T2CON_3
                                    161 	.globl _T2CON_2
                                    162 	.globl _T2CON_1
                                    163 	.globl _T2CON_0
                                    164 	.globl _PT2
                                    165 	.globl _ET2
                                    166 	.globl _TMOD
                                    167 	.globl _TL1
                                    168 	.globl _TL0
                                    169 	.globl _TH1
                                    170 	.globl _TH0
                                    171 	.globl _TCON
                                    172 	.globl _SP
                                    173 	.globl _SCON
                                    174 	.globl _SBUF0
                                    175 	.globl _SBUF
                                    176 	.globl _PSW
                                    177 	.globl _PCON
                                    178 	.globl _P3
                                    179 	.globl _P2
                                    180 	.globl _P1
                                    181 	.globl _P0
                                    182 	.globl _IP
                                    183 	.globl _IE
                                    184 	.globl _DP0L
                                    185 	.globl _DPL
                                    186 	.globl _DP0H
                                    187 	.globl _DPH
                                    188 	.globl _B
                                    189 	.globl _ACC
                                    190 	.globl _EECON
                                    191 	.globl _KBF
                                    192 	.globl _KBE
                                    193 	.globl _KBLS
                                    194 	.globl _BRL
                                    195 	.globl _BDRCON
                                    196 	.globl _T2MOD
                                    197 	.globl _SPDAT
                                    198 	.globl _SPSTA
                                    199 	.globl _SPCON
                                    200 	.globl _SADEN
                                    201 	.globl _SADDR
                                    202 	.globl _WDTPRG
                                    203 	.globl _WDTRST
                                    204 	.globl _P5
                                    205 	.globl _P4
                                    206 	.globl _IPH1
                                    207 	.globl _IPL1
                                    208 	.globl _IPH0
                                    209 	.globl _IPL0
                                    210 	.globl _IEN1
                                    211 	.globl _IEN0
                                    212 	.globl _CMOD
                                    213 	.globl _CL
                                    214 	.globl _CH
                                    215 	.globl _CCON
                                    216 	.globl _CCAPM4
                                    217 	.globl _CCAPM3
                                    218 	.globl _CCAPM2
                                    219 	.globl _CCAPM1
                                    220 	.globl _CCAPM0
                                    221 	.globl _CCAP4L
                                    222 	.globl _CCAP3L
                                    223 	.globl _CCAP2L
                                    224 	.globl _CCAP1L
                                    225 	.globl _CCAP0L
                                    226 	.globl _CCAP4H
                                    227 	.globl _CCAP3H
                                    228 	.globl _CCAP2H
                                    229 	.globl _CCAP1H
                                    230 	.globl _CCAP0H
                                    231 	.globl _CKCON1
                                    232 	.globl _CKCON0
                                    233 	.globl _CKRL
                                    234 	.globl _AUXR1
                                    235 	.globl _AUXR
                                    236 	.globl _TH2
                                    237 	.globl _TL2
                                    238 	.globl _RCAP2H
                                    239 	.globl _RCAP2L
                                    240 	.globl _T2CON
                                    241 	.globl _db
                                    242 	.globl _lcdgotoxy_PARM_2
                                    243 	.globl _clockrun_flag
                                    244 	.globl _custom_char_code
                                    245 	.globl _mili_sec
                                    246 	.globl _sec_low
                                    247 	.globl _sec_high
                                    248 	.globl _min_low
                                    249 	.globl _min_high
                                    250 	.globl _elapsed_tick
                                    251 	.globl _tick
                                    252 	.globl _ptr
                                    253 	.globl _create_custom_character
                                    254 	.globl _clock_run
                                    255 ;--------------------------------------------------------
                                    256 ; special function registers
                                    257 ;--------------------------------------------------------
                                    258 	.area RSEG    (ABS,DATA)
      000000                        259 	.org 0x0000
                           0000C8   260 _T2CON	=	0x00c8
                           0000CA   261 _RCAP2L	=	0x00ca
                           0000CB   262 _RCAP2H	=	0x00cb
                           0000CC   263 _TL2	=	0x00cc
                           0000CD   264 _TH2	=	0x00cd
                           00008E   265 _AUXR	=	0x008e
                           0000A2   266 _AUXR1	=	0x00a2
                           000097   267 _CKRL	=	0x0097
                           00008F   268 _CKCON0	=	0x008f
                           0000AF   269 _CKCON1	=	0x00af
                           0000FA   270 _CCAP0H	=	0x00fa
                           0000FB   271 _CCAP1H	=	0x00fb
                           0000FC   272 _CCAP2H	=	0x00fc
                           0000FD   273 _CCAP3H	=	0x00fd
                           0000FE   274 _CCAP4H	=	0x00fe
                           0000EA   275 _CCAP0L	=	0x00ea
                           0000EB   276 _CCAP1L	=	0x00eb
                           0000EC   277 _CCAP2L	=	0x00ec
                           0000ED   278 _CCAP3L	=	0x00ed
                           0000EE   279 _CCAP4L	=	0x00ee
                           0000DA   280 _CCAPM0	=	0x00da
                           0000DB   281 _CCAPM1	=	0x00db
                           0000DC   282 _CCAPM2	=	0x00dc
                           0000DD   283 _CCAPM3	=	0x00dd
                           0000DE   284 _CCAPM4	=	0x00de
                           0000D8   285 _CCON	=	0x00d8
                           0000F9   286 _CH	=	0x00f9
                           0000E9   287 _CL	=	0x00e9
                           0000D9   288 _CMOD	=	0x00d9
                           0000A8   289 _IEN0	=	0x00a8
                           0000B1   290 _IEN1	=	0x00b1
                           0000B8   291 _IPL0	=	0x00b8
                           0000B7   292 _IPH0	=	0x00b7
                           0000B2   293 _IPL1	=	0x00b2
                           0000B3   294 _IPH1	=	0x00b3
                           0000C0   295 _P4	=	0x00c0
                           0000E8   296 _P5	=	0x00e8
                           0000A6   297 _WDTRST	=	0x00a6
                           0000A7   298 _WDTPRG	=	0x00a7
                           0000A9   299 _SADDR	=	0x00a9
                           0000B9   300 _SADEN	=	0x00b9
                           0000C3   301 _SPCON	=	0x00c3
                           0000C4   302 _SPSTA	=	0x00c4
                           0000C5   303 _SPDAT	=	0x00c5
                           0000C9   304 _T2MOD	=	0x00c9
                           00009B   305 _BDRCON	=	0x009b
                           00009A   306 _BRL	=	0x009a
                           00009C   307 _KBLS	=	0x009c
                           00009D   308 _KBE	=	0x009d
                           00009E   309 _KBF	=	0x009e
                           0000D2   310 _EECON	=	0x00d2
                           0000E0   311 _ACC	=	0x00e0
                           0000F0   312 _B	=	0x00f0
                           000083   313 _DPH	=	0x0083
                           000083   314 _DP0H	=	0x0083
                           000082   315 _DPL	=	0x0082
                           000082   316 _DP0L	=	0x0082
                           0000A8   317 _IE	=	0x00a8
                           0000B8   318 _IP	=	0x00b8
                           000080   319 _P0	=	0x0080
                           000090   320 _P1	=	0x0090
                           0000A0   321 _P2	=	0x00a0
                           0000B0   322 _P3	=	0x00b0
                           000087   323 _PCON	=	0x0087
                           0000D0   324 _PSW	=	0x00d0
                           000099   325 _SBUF	=	0x0099
                           000099   326 _SBUF0	=	0x0099
                           000098   327 _SCON	=	0x0098
                           000081   328 _SP	=	0x0081
                           000088   329 _TCON	=	0x0088
                           00008C   330 _TH0	=	0x008c
                           00008D   331 _TH1	=	0x008d
                           00008A   332 _TL0	=	0x008a
                           00008B   333 _TL1	=	0x008b
                           000089   334 _TMOD	=	0x0089
                                    335 ;--------------------------------------------------------
                                    336 ; special function bits
                                    337 ;--------------------------------------------------------
                                    338 	.area RSEG    (ABS,DATA)
      000000                        339 	.org 0x0000
                           0000AD   340 _ET2	=	0x00ad
                           0000BD   341 _PT2	=	0x00bd
                           0000C8   342 _T2CON_0	=	0x00c8
                           0000C9   343 _T2CON_1	=	0x00c9
                           0000CA   344 _T2CON_2	=	0x00ca
                           0000CB   345 _T2CON_3	=	0x00cb
                           0000CC   346 _T2CON_4	=	0x00cc
                           0000CD   347 _T2CON_5	=	0x00cd
                           0000CE   348 _T2CON_6	=	0x00ce
                           0000CF   349 _T2CON_7	=	0x00cf
                           0000C8   350 _CP_RL2	=	0x00c8
                           0000C9   351 _C_T2	=	0x00c9
                           0000CA   352 _TR2	=	0x00ca
                           0000CB   353 _EXEN2	=	0x00cb
                           0000CC   354 _TCLK	=	0x00cc
                           0000CD   355 _RCLK	=	0x00cd
                           0000CE   356 _EXF2	=	0x00ce
                           0000CF   357 _TF2	=	0x00cf
                           0000DF   358 _CF	=	0x00df
                           0000DE   359 _CR	=	0x00de
                           0000DC   360 _CCF4	=	0x00dc
                           0000DB   361 _CCF3	=	0x00db
                           0000DA   362 _CCF2	=	0x00da
                           0000D9   363 _CCF1	=	0x00d9
                           0000D8   364 _CCF0	=	0x00d8
                           0000AE   365 _EC	=	0x00ae
                           0000BE   366 _PPCL	=	0x00be
                           0000BD   367 _PT2L	=	0x00bd
                           0000BC   368 _PSL	=	0x00bc
                           0000BB   369 _PT1L	=	0x00bb
                           0000BA   370 _PX1L	=	0x00ba
                           0000B9   371 _PT0L	=	0x00b9
                           0000B8   372 _PX0L	=	0x00b8
                           0000C0   373 _P4_0	=	0x00c0
                           0000C1   374 _P4_1	=	0x00c1
                           0000C2   375 _P4_2	=	0x00c2
                           0000C3   376 _P4_3	=	0x00c3
                           0000C4   377 _P4_4	=	0x00c4
                           0000C5   378 _P4_5	=	0x00c5
                           0000C6   379 _P4_6	=	0x00c6
                           0000C7   380 _P4_7	=	0x00c7
                           0000E8   381 _P5_0	=	0x00e8
                           0000E9   382 _P5_1	=	0x00e9
                           0000EA   383 _P5_2	=	0x00ea
                           0000EB   384 _P5_3	=	0x00eb
                           0000EC   385 _P5_4	=	0x00ec
                           0000ED   386 _P5_5	=	0x00ed
                           0000EE   387 _P5_6	=	0x00ee
                           0000EF   388 _P5_7	=	0x00ef
                           0000F0   389 _BREG_F0	=	0x00f0
                           0000F1   390 _BREG_F1	=	0x00f1
                           0000F2   391 _BREG_F2	=	0x00f2
                           0000F3   392 _BREG_F3	=	0x00f3
                           0000F4   393 _BREG_F4	=	0x00f4
                           0000F5   394 _BREG_F5	=	0x00f5
                           0000F6   395 _BREG_F6	=	0x00f6
                           0000F7   396 _BREG_F7	=	0x00f7
                           0000A8   397 _EX0	=	0x00a8
                           0000A9   398 _ET0	=	0x00a9
                           0000AA   399 _EX1	=	0x00aa
                           0000AB   400 _ET1	=	0x00ab
                           0000AC   401 _ES	=	0x00ac
                           0000AF   402 _EA	=	0x00af
                           0000B8   403 _PX0	=	0x00b8
                           0000B9   404 _PT0	=	0x00b9
                           0000BA   405 _PX1	=	0x00ba
                           0000BB   406 _PT1	=	0x00bb
                           0000BC   407 _PS	=	0x00bc
                           000080   408 _P0_0	=	0x0080
                           000081   409 _P0_1	=	0x0081
                           000082   410 _P0_2	=	0x0082
                           000083   411 _P0_3	=	0x0083
                           000084   412 _P0_4	=	0x0084
                           000085   413 _P0_5	=	0x0085
                           000086   414 _P0_6	=	0x0086
                           000087   415 _P0_7	=	0x0087
                           000090   416 _P1_0	=	0x0090
                           000091   417 _P1_1	=	0x0091
                           000092   418 _P1_2	=	0x0092
                           000093   419 _P1_3	=	0x0093
                           000094   420 _P1_4	=	0x0094
                           000095   421 _P1_5	=	0x0095
                           000096   422 _P1_6	=	0x0096
                           000097   423 _P1_7	=	0x0097
                           0000A0   424 _P2_0	=	0x00a0
                           0000A1   425 _P2_1	=	0x00a1
                           0000A2   426 _P2_2	=	0x00a2
                           0000A3   427 _P2_3	=	0x00a3
                           0000A4   428 _P2_4	=	0x00a4
                           0000A5   429 _P2_5	=	0x00a5
                           0000A6   430 _P2_6	=	0x00a6
                           0000A7   431 _P2_7	=	0x00a7
                           0000B0   432 _P3_0	=	0x00b0
                           0000B1   433 _P3_1	=	0x00b1
                           0000B2   434 _P3_2	=	0x00b2
                           0000B3   435 _P3_3	=	0x00b3
                           0000B4   436 _P3_4	=	0x00b4
                           0000B5   437 _P3_5	=	0x00b5
                           0000B6   438 _P3_6	=	0x00b6
                           0000B7   439 _P3_7	=	0x00b7
                           0000B0   440 _RXD	=	0x00b0
                           0000B0   441 _RXD0	=	0x00b0
                           0000B1   442 _TXD	=	0x00b1
                           0000B1   443 _TXD0	=	0x00b1
                           0000B2   444 _INT0	=	0x00b2
                           0000B3   445 _INT1	=	0x00b3
                           0000B4   446 _T0	=	0x00b4
                           0000B5   447 _T1	=	0x00b5
                           0000B6   448 _WR	=	0x00b6
                           0000B7   449 _RD	=	0x00b7
                           0000D0   450 _P	=	0x00d0
                           0000D1   451 _F1	=	0x00d1
                           0000D2   452 _OV	=	0x00d2
                           0000D3   453 _RS0	=	0x00d3
                           0000D4   454 _RS1	=	0x00d4
                           0000D5   455 _F0	=	0x00d5
                           0000D6   456 _AC	=	0x00d6
                           0000D7   457 _CY	=	0x00d7
                           000098   458 _RI	=	0x0098
                           000099   459 _TI	=	0x0099
                           00009A   460 _RB8	=	0x009a
                           00009B   461 _TB8	=	0x009b
                           00009C   462 _REN	=	0x009c
                           00009D   463 _SM2	=	0x009d
                           00009E   464 _SM1	=	0x009e
                           00009F   465 _SM0	=	0x009f
                           000088   466 _IT0	=	0x0088
                           000089   467 _IE0	=	0x0089
                           00008A   468 _IT1	=	0x008a
                           00008B   469 _IE1	=	0x008b
                           00008C   470 _TR0	=	0x008c
                           00008D   471 _TF0	=	0x008d
                           00008E   472 _TR1	=	0x008e
                           00008F   473 _TF1	=	0x008f
                                    474 ;--------------------------------------------------------
                                    475 ; overlayable register banks
                                    476 ;--------------------------------------------------------
                                    477 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        478 	.ds 8
                                    479 ;--------------------------------------------------------
                                    480 ; overlayable bit register bank
                                    481 ;--------------------------------------------------------
                                    482 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        483 bits:
      000000                        484 	.ds 1
                           008000   485 	b0 = bits[0]
                           008100   486 	b1 = bits[1]
                           008200   487 	b2 = bits[2]
                           008300   488 	b3 = bits[3]
                           008400   489 	b4 = bits[4]
                           008500   490 	b5 = bits[5]
                           008600   491 	b6 = bits[6]
                           008700   492 	b7 = bits[7]
                                    493 ;--------------------------------------------------------
                                    494 ; internal ram data
                                    495 ;--------------------------------------------------------
                                    496 	.area DSEG    (DATA)
      000000                        497 _ptr::
      000000                        498 	.ds 2
      000002                        499 _tick::
      000002                        500 	.ds 2
      000004                        501 _elapsed_tick::
      000004                        502 	.ds 2
      000006                        503 _min_high::
      000006                        504 	.ds 1
      000007                        505 _min_low::
      000007                        506 	.ds 1
      000008                        507 _sec_high::
      000008                        508 	.ds 1
      000009                        509 _sec_low::
      000009                        510 	.ds 1
      00000A                        511 _mili_sec::
      00000A                        512 	.ds 1
      00000B                        513 _custom_char_code::
      00000B                        514 	.ds 1
      00000C                        515 _clockrun_flag::
      00000C                        516 	.ds 2
      00000E                        517 _lcdgotoxy_PARM_2:
      00000E                        518 	.ds 1
      00000F                        519 _create_custom_character_c_65536_69:
      00000F                        520 	.ds 8
                                    521 ;--------------------------------------------------------
                                    522 ; overlayable items in internal ram
                                    523 ;--------------------------------------------------------
                                    524 	.area	OSEG    (OVR,DATA)
                                    525 	.area	OSEG    (OVR,DATA)
      000000                        526 _lcd_command_PARM_2:
      000000                        527 	.ds 1
      000001                        528 _lcd_command_PARM_3:
      000001                        529 	.ds 1
                                    530 ;--------------------------------------------------------
                                    531 ; Stack segment in internal ram
                                    532 ;--------------------------------------------------------
                                    533 	.area	SSEG
      000000                        534 __start__stack:
      000000                        535 	.ds	1
                                    536 
                                    537 ;--------------------------------------------------------
                                    538 ; indirectly addressable internal ram data
                                    539 ;--------------------------------------------------------
                                    540 	.area ISEG    (DATA)
                                    541 ;--------------------------------------------------------
                                    542 ; absolute internal ram data
                                    543 ;--------------------------------------------------------
                                    544 	.area IABS    (ABS,DATA)
                                    545 	.area IABS    (ABS,DATA)
                                    546 ;--------------------------------------------------------
                                    547 ; bit data
                                    548 ;--------------------------------------------------------
                                    549 	.area BSEG    (BIT)
      000000                        550 _lcdgotoxy_sloc0_1_0:
      000000                        551 	.ds 1
      000001                        552 _isr_timer2_sloc0_1_0:
      000001                        553 	.ds 1
                                    554 ;--------------------------------------------------------
                                    555 ; paged external ram data
                                    556 ;--------------------------------------------------------
                                    557 	.area PSEG    (PAG,XDATA)
                                    558 ;--------------------------------------------------------
                                    559 ; external ram data
                                    560 ;--------------------------------------------------------
                                    561 	.area XSEG    (XDATA)
                                    562 ;--------------------------------------------------------
                                    563 ; absolute external ram data
                                    564 ;--------------------------------------------------------
                                    565 	.area XABS    (ABS,XDATA)
                                    566 ;--------------------------------------------------------
                                    567 ; external initialized ram data
                                    568 ;--------------------------------------------------------
                                    569 	.area XISEG   (XDATA)
      000000                        570 _db::
      000000                        571 	.ds 1
                                    572 	.area HOME    (CODE)
                                    573 	.area GSINIT0 (CODE)
                                    574 	.area GSINIT1 (CODE)
                                    575 	.area GSINIT2 (CODE)
                                    576 	.area GSINIT3 (CODE)
                                    577 	.area GSINIT4 (CODE)
                                    578 	.area GSINIT5 (CODE)
                                    579 	.area GSINIT  (CODE)
                                    580 	.area GSFINAL (CODE)
                                    581 	.area CSEG    (CODE)
                                    582 ;--------------------------------------------------------
                                    583 ; interrupt vector
                                    584 ;--------------------------------------------------------
                                    585 	.area HOME    (CODE)
      000000                        586 __interrupt_vect:
      000000 02r00r00         [24]  587 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  588 	reti
      000004                        589 	.ds	7
      00000B 32               [24]  590 	reti
      00000C                        591 	.ds	7
      000013 32               [24]  592 	reti
      000014                        593 	.ds	7
      00001B 32               [24]  594 	reti
      00001C                        595 	.ds	7
      000023 32               [24]  596 	reti
      000024                        597 	.ds	7
      00002B 02r02rFB         [24]  598 	ljmp	_isr_timer2
                                    599 ;--------------------------------------------------------
                                    600 ; global & static initialisations
                                    601 ;--------------------------------------------------------
                                    602 	.area HOME    (CODE)
                                    603 	.area GSINIT  (CODE)
                                    604 	.area GSFINAL (CODE)
                                    605 	.area GSINIT  (CODE)
                                    606 	.globl __sdcc_gsinit_startup
                                    607 	.globl __sdcc_program_startup
                                    608 	.globl __start__stack
                                    609 	.globl __mcs51_genXINIT
                                    610 	.globl __mcs51_genXRAMCLEAR
                                    611 	.globl __mcs51_genRAMCLEAR
                                    612 ;	main.c:18: __xdata uint8_t * ptr = &db;
      000000 75*00r00         [24]  613 	mov	_ptr,#_db
      000003 75*01s00         [24]  614 	mov	(_ptr + 1),#(_db >> 8)
                                    615 ;	main.c:19: volatile unsigned int tick = 0;
      000006 E4               [12]  616 	clr	a
      000007 F5*02            [12]  617 	mov	_tick,a
      000009 F5*03            [12]  618 	mov	(_tick + 1),a
                                    619 ;	main.c:20: volatile unsigned int  elapsed_tick = 0;
      00000B F5*04            [12]  620 	mov	_elapsed_tick,a
      00000D F5*05            [12]  621 	mov	(_elapsed_tick + 1),a
                                    622 ;	main.c:28: uint8_t custom_char_code = 1;
      00000F 75*0B 01         [24]  623 	mov	_custom_char_code,#0x01
                                    624 ;	main.c:30: volatile unsigned int clockrun_flag = 0;
      000012 F5*0C            [12]  625 	mov	_clockrun_flag,a
      000014 F5*0D            [12]  626 	mov	(_clockrun_flag + 1),a
                                    627 	.area GSFINAL (CODE)
      000000 02r00r2E         [24]  628 	ljmp	__sdcc_program_startup
                                    629 ;--------------------------------------------------------
                                    630 ; Home
                                    631 ;--------------------------------------------------------
                                    632 	.area HOME    (CODE)
                                    633 	.area HOME    (CODE)
      00002E                        634 __sdcc_program_startup:
      00002E 02r04r70         [24]  635 	ljmp	_main
                                    636 ;	return from main will return to caller
                                    637 ;--------------------------------------------------------
                                    638 ; code
                                    639 ;--------------------------------------------------------
                                    640 	.area CSEG    (CODE)
                                    641 ;------------------------------------------------------------
                                    642 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    643 ;------------------------------------------------------------
                                    644 ;	main.c:37: _sdcc_external_startup()
                                    645 ;	-----------------------------------------
                                    646 ;	 function _sdcc_external_startup
                                    647 ;	-----------------------------------------
      000000                        648 __sdcc_external_startup:
                           000007   649 	ar7 = 0x07
                           000006   650 	ar6 = 0x06
                           000005   651 	ar5 = 0x05
                           000004   652 	ar4 = 0x04
                           000003   653 	ar3 = 0x03
                           000002   654 	ar2 = 0x02
                           000001   655 	ar1 = 0x01
                           000000   656 	ar0 = 0x00
                                    657 ;	main.c:39: AUXR |= (XRS1 | XRS0); // Configure XRAM (External RAM) for memory extension
      000000 43 8E 0C         [24]  658 	orl	_AUXR,#0x0c
                                    659 ;	main.c:40: return 0;               // Return 0 to indicate successful startup
      000003 90 00 00         [24]  660 	mov	dptr,#0x0000
                                    661 ;	main.c:41: }
      000006 22               [24]  662 	ret
                                    663 ;------------------------------------------------------------
                                    664 ;Allocation info for local variables in function 'delay'
                                    665 ;------------------------------------------------------------
                                    666 ;t                         Allocated to registers 
                                    667 ;------------------------------------------------------------
                                    668 ;	main.c:52: void delay(uint32_t t)
                                    669 ;	-----------------------------------------
                                    670 ;	 function delay
                                    671 ;	-----------------------------------------
      000007                        672 _delay:
      000007 AC 82            [24]  673 	mov	r4,dpl
      000009 AD 83            [24]  674 	mov	r5,dph
      00000B AE F0            [24]  675 	mov	r6,b
      00000D FF               [12]  676 	mov	r7,a
                                    677 ;	main.c:54: while(t--){
      00000E                        678 00101$:
      00000E 8C 00            [24]  679 	mov	ar0,r4
      000010 8D 01            [24]  680 	mov	ar1,r5
      000012 8E 02            [24]  681 	mov	ar2,r6
      000014 8F 03            [24]  682 	mov	ar3,r7
      000016 1C               [12]  683 	dec	r4
      000017 BC FF 09         [24]  684 	cjne	r4,#0xff,00115$
      00001A 1D               [12]  685 	dec	r5
      00001B BD FF 05         [24]  686 	cjne	r5,#0xff,00115$
      00001E 1E               [12]  687 	dec	r6
      00001F BE FF 01         [24]  688 	cjne	r6,#0xff,00115$
      000022 1F               [12]  689 	dec	r7
      000023                        690 00115$:
      000023 E8               [12]  691 	mov	a,r0
      000024 49               [12]  692 	orl	a,r1
      000025 4A               [12]  693 	orl	a,r2
      000026 4B               [12]  694 	orl	a,r3
      000027 60 03            [24]  695 	jz	00104$
                                    696 ;	main.c:55: NOP;  // Assembly NOP instruction for delaying program execution.
      000029 00               [12]  697 	nop	
      00002A 80 E2            [24]  698 	sjmp	00101$
      00002C                        699 00104$:
                                    700 ;	main.c:57: }
      00002C 22               [24]  701 	ret
                                    702 ;------------------------------------------------------------
                                    703 ;Allocation info for local variables in function 'lcd_command'
                                    704 ;------------------------------------------------------------
                                    705 ;r_w                       Allocated with name '_lcd_command_PARM_2'
                                    706 ;data                      Allocated with name '_lcd_command_PARM_3'
                                    707 ;rs                        Allocated to registers r7 
                                    708 ;------------------------------------------------------------
                                    709 ;	main.c:59: void lcd_command(uint8_t rs, uint8_t r_w, uint8_t data){
                                    710 ;	-----------------------------------------
                                    711 ;	 function lcd_command
                                    712 ;	-----------------------------------------
      00002D                        713 _lcd_command:
                                    714 ;	main.c:60: RS = rs;
                                    715 ;	assignBit
      00002D E5 82            [12]  716 	mov	a,dpl
      00002F 24 FF            [12]  717 	add	a,#0xff
      000031 92 96            [24]  718 	mov	_P1_6,c
                                    719 ;	main.c:61: R_W = r_w;
                                    720 ;	assignBit
      000033 E5*00            [12]  721 	mov	a,_lcd_command_PARM_2
      000035 24 FF            [12]  722 	add	a,#0xff
      000037 92 97            [24]  723 	mov	_P1_7,c
                                    724 ;	main.c:62: *ptr = data;
      000039 85*00 82         [24]  725 	mov	dpl,_ptr
      00003C 85*01 83         [24]  726 	mov	dph,(_ptr + 1)
      00003F E5*01            [12]  727 	mov	a,_lcd_command_PARM_3
      000041 F0               [24]  728 	movx	@dptr,a
                                    729 ;	main.c:63: }
      000042 22               [24]  730 	ret
                                    731 ;------------------------------------------------------------
                                    732 ;Allocation info for local variables in function 'lcdbusywait'
                                    733 ;------------------------------------------------------------
                                    734 ;	main.c:65: void lcdbusywait(){
                                    735 ;	-----------------------------------------
                                    736 ;	 function lcdbusywait
                                    737 ;	-----------------------------------------
      000043                        738 _lcdbusywait:
                                    739 ;	main.c:66: RS = PULSE_LOW;
                                    740 ;	assignBit
      000043 C2 96            [12]  741 	clr	_P1_6
                                    742 ;	main.c:67: R_W = PULSE_HIGH;
                                    743 ;	assignBit
      000045 D2 97            [12]  744 	setb	_P1_7
                                    745 ;	main.c:68: while(*ptr & (0b10000000)){
      000047                        746 00101$:
      000047 85*00 82         [24]  747 	mov	dpl,_ptr
      00004A 85*01 83         [24]  748 	mov	dph,(_ptr + 1)
      00004D E0               [24]  749 	movx	a,@dptr
      00004E 20 E7 F6         [24]  750 	jb	acc.7,00101$
                                    751 ;	main.c:71: }
      000051 22               [24]  752 	ret
                                    753 ;------------------------------------------------------------
                                    754 ;Allocation info for local variables in function 'lcdgotoaddr'
                                    755 ;------------------------------------------------------------
                                    756 ;addr                      Allocated to registers r7 
                                    757 ;------------------------------------------------------------
                                    758 ;	main.c:72: void lcdgotoaddr(uint8_t addr){
                                    759 ;	-----------------------------------------
                                    760 ;	 function lcdgotoaddr
                                    761 ;	-----------------------------------------
      000052                        762 _lcdgotoaddr:
      000052 AF 82            [24]  763 	mov	r7,dpl
                                    764 ;	main.c:73: RS = PULSE_LOW;
                                    765 ;	assignBit
      000054 C2 96            [12]  766 	clr	_P1_6
                                    767 ;	main.c:74: R_W = PULSE_LOW;
                                    768 ;	assignBit
      000056 C2 97            [12]  769 	clr	_P1_7
                                    770 ;	main.c:75: *ptr = addr | (0x80);
      000058 85*00 82         [24]  771 	mov	dpl,_ptr
      00005B 85*01 83         [24]  772 	mov	dph,(_ptr + 1)
      00005E 43 07 80         [24]  773 	orl	ar7,#0x80
      000061 EF               [12]  774 	mov	a,r7
      000062 F0               [24]  775 	movx	@dptr,a
                                    776 ;	main.c:76: lcdbusywait();
                                    777 ;	main.c:77: }
      000063 02r00r43         [24]  778 	ljmp	_lcdbusywait
                                    779 ;------------------------------------------------------------
                                    780 ;Allocation info for local variables in function 'lcdgotoxy'
                                    781 ;------------------------------------------------------------
                                    782 ;column                    Allocated with name '_lcdgotoxy_PARM_2'
                                    783 ;row                       Allocated to registers r7 
                                    784 ;------------------------------------------------------------
                                    785 ;	main.c:79: void lcdgotoxy(uint8_t row, uint8_t column){
                                    786 ;	-----------------------------------------
                                    787 ;	 function lcdgotoxy
                                    788 ;	-----------------------------------------
      000066                        789 _lcdgotoxy:
                                    790 ;	main.c:80: lcdgotoaddr(((row % 2) ? column + (16 * !(row % 3)) : column + 64 + (16 * !(row % 4))) - 1);
      000066 AE 82            [24]  791 	mov	r6,dpl
      000068 7F 00            [12]  792 	mov	r7,#0x00
      00006A EE               [12]  793 	mov	a,r6
      00006B 30 E0 23         [24]  794 	jnb	acc.0,00103$
      00006E 75*00 03         [24]  795 	mov	__modsint_PARM_2,#0x03
      000071 75*01 00         [24]  796 	mov	(__modsint_PARM_2 + 1),#0x00
      000074 8E 82            [24]  797 	mov	dpl,r6
      000076 8F 83            [24]  798 	mov	dph,r7
      000078 12r00r00         [24]  799 	lcall	__modsint
      00007B AC 82            [24]  800 	mov	r4,dpl
      00007D AD 83            [24]  801 	mov	r5,dph
      00007F EC               [12]  802 	mov	a,r4
      000080 4D               [12]  803 	orl	a,r5
      000081 B4 01 00         [24]  804 	cjne	a,#0x01,00110$
      000084                        805 00110$:
      000084 92*00            [24]  806 	mov  _lcdgotoxy_sloc0_1_0,c
      000086 E4               [12]  807 	clr	a
      000087 33               [12]  808 	rlc	a
      000088 C4               [12]  809 	swap	a
      000089 54 F0            [12]  810 	anl	a,#0xf0
      00008B AC*0E            [24]  811 	mov	r4,_lcdgotoxy_PARM_2
      00008D 2C               [12]  812 	add	a,r4
      00008E FD               [12]  813 	mov	r5,a
      00008F 80 1A            [24]  814 	sjmp	00104$
      000091                        815 00103$:
      000091 AC*0E            [24]  816 	mov	r4,_lcdgotoxy_PARM_2
      000093 74 40            [12]  817 	mov	a,#0x40
      000095 2C               [12]  818 	add	a,r4
      000096 FC               [12]  819 	mov	r4,a
      000097 53 06 03         [24]  820 	anl	ar6,#0x03
      00009A 7F 00            [12]  821 	mov	r7,#0x00
      00009C EE               [12]  822 	mov	a,r6
      00009D 4F               [12]  823 	orl	a,r7
      00009E B4 01 00         [24]  824 	cjne	a,#0x01,00111$
      0000A1                        825 00111$:
      0000A1 92*00            [24]  826 	mov  _lcdgotoxy_sloc0_1_0,c
      0000A3 E4               [12]  827 	clr	a
      0000A4 33               [12]  828 	rlc	a
      0000A5 C4               [12]  829 	swap	a
      0000A6 54 F0            [12]  830 	anl	a,#0xf0
      0000A8 FF               [12]  831 	mov	r7,a
      0000A9 2C               [12]  832 	add	a,r4
      0000AA FD               [12]  833 	mov	r5,a
      0000AB                        834 00104$:
      0000AB ED               [12]  835 	mov	a,r5
      0000AC 14               [12]  836 	dec	a
      0000AD F5 82            [12]  837 	mov	dpl,a
                                    838 ;	main.c:81: }
      0000AF 02r00r52         [24]  839 	ljmp	_lcdgotoaddr
                                    840 ;------------------------------------------------------------
                                    841 ;Allocation info for local variables in function 'lcdputch'
                                    842 ;------------------------------------------------------------
                                    843 ;cc                        Allocated to registers r7 
                                    844 ;------------------------------------------------------------
                                    845 ;	main.c:82: void lcdputch(uint8_t cc){
                                    846 ;	-----------------------------------------
                                    847 ;	 function lcdputch
                                    848 ;	-----------------------------------------
      0000B2                        849 _lcdputch:
      0000B2 AF 82            [24]  850 	mov	r7,dpl
                                    851 ;	main.c:83: RS = PULSE_HIGH;
                                    852 ;	assignBit
      0000B4 D2 96            [12]  853 	setb	_P1_6
                                    854 ;	main.c:84: R_W = PULSE_LOW;
                                    855 ;	assignBit
      0000B6 C2 97            [12]  856 	clr	_P1_7
                                    857 ;	main.c:85: *ptr = cc;
      0000B8 85*00 82         [24]  858 	mov	dpl,_ptr
      0000BB 85*01 83         [24]  859 	mov	dph,(_ptr + 1)
      0000BE EF               [12]  860 	mov	a,r7
      0000BF F0               [24]  861 	movx	@dptr,a
                                    862 ;	main.c:86: lcdbusywait();
                                    863 ;	main.c:87: }
      0000C0 02r00r43         [24]  864 	ljmp	_lcdbusywait
                                    865 ;------------------------------------------------------------
                                    866 ;Allocation info for local variables in function 'lcdputstr'
                                    867 ;------------------------------------------------------------
                                    868 ;ss                        Allocated to registers 
                                    869 ;lcd_ptr_addr              Allocated to registers r4 
                                    870 ;------------------------------------------------------------
                                    871 ;	main.c:89: void lcdputstr(uint8_t *ss){
                                    872 ;	-----------------------------------------
                                    873 ;	 function lcdputstr
                                    874 ;	-----------------------------------------
      0000C3                        875 _lcdputstr:
      0000C3 AD 82            [24]  876 	mov	r5,dpl
      0000C5 AE 83            [24]  877 	mov	r6,dph
      0000C7 AF F0            [24]  878 	mov	r7,b
                                    879 ;	main.c:91: while(*ss != '\0'){
      0000C9                        880 00107$:
      0000C9 8D 82            [24]  881 	mov	dpl,r5
      0000CB 8E 83            [24]  882 	mov	dph,r6
      0000CD 8F F0            [24]  883 	mov	b,r7
      0000CF 12r00r00         [24]  884 	lcall	__gptrget
      0000D2 70 01            [24]  885 	jnz	00137$
      0000D4 22               [24]  886 	ret
      0000D5                        887 00137$:
                                    888 ;	main.c:92: RS = PULSE_LOW;
                                    889 ;	assignBit
      0000D5 C2 96            [12]  890 	clr	_P1_6
                                    891 ;	main.c:93: R_W = PULSE_HIGH;
                                    892 ;	assignBit
      0000D7 D2 97            [12]  893 	setb	_P1_7
                                    894 ;	main.c:94: lcdputch(*ss);
      0000D9 8D 82            [24]  895 	mov	dpl,r5
      0000DB 8E 83            [24]  896 	mov	dph,r6
      0000DD 8F F0            [24]  897 	mov	b,r7
      0000DF 12r00r00         [24]  898 	lcall	__gptrget
      0000E2 F5 82            [12]  899 	mov	dpl,a
      0000E4 C0 07            [24]  900 	push	ar7
      0000E6 C0 06            [24]  901 	push	ar6
      0000E8 C0 05            [24]  902 	push	ar5
      0000EA 12r00rB2         [24]  903 	lcall	_lcdputch
      0000ED D0 05            [24]  904 	pop	ar5
      0000EF D0 06            [24]  905 	pop	ar6
      0000F1 D0 07            [24]  906 	pop	ar7
                                    907 ;	main.c:95: lcd_ptr_addr = *ptr & (0b01111111);
      0000F3 85*00 82         [24]  908 	mov	dpl,_ptr
      0000F6 85*01 83         [24]  909 	mov	dph,(_ptr + 1)
      0000F9 E0               [24]  910 	movx	a,@dptr
      0000FA FC               [12]  911 	mov	r4,a
      0000FB 53 04 7F         [24]  912 	anl	ar4,#0x7f
                                    913 ;	main.c:96: switch(lcd_ptr_addr){
      0000FE BC 10 02         [24]  914 	cjne	r4,#0x10,00138$
      000101 80 0F            [24]  915 	sjmp	00101$
      000103                        916 00138$:
      000103 BC 20 02         [24]  917 	cjne	r4,#0x20,00139$
      000106 80 32            [24]  918 	sjmp	00103$
      000108                        919 00139$:
      000108 BC 50 02         [24]  920 	cjne	r4,#0x50,00140$
      00010B 80 19            [24]  921 	sjmp	00102$
      00010D                        922 00140$:
                                    923 ;	main.c:97: case 0x10:
      00010D BC 60 50         [24]  924 	cjne	r4,#0x60,00106$
      000110 80 3C            [24]  925 	sjmp	00104$
      000112                        926 00101$:
                                    927 ;	main.c:98: lcdgotoaddr(0x40);
      000112 75 82 40         [24]  928 	mov	dpl,#0x40
      000115 C0 07            [24]  929 	push	ar7
      000117 C0 06            [24]  930 	push	ar6
      000119 C0 05            [24]  931 	push	ar5
      00011B 12r00r52         [24]  932 	lcall	_lcdgotoaddr
      00011E D0 05            [24]  933 	pop	ar5
      000120 D0 06            [24]  934 	pop	ar6
      000122 D0 07            [24]  935 	pop	ar7
                                    936 ;	main.c:99: break;
                                    937 ;	main.c:100: case 0x50:
      000124 80 3A            [24]  938 	sjmp	00106$
      000126                        939 00102$:
                                    940 ;	main.c:101: lcdgotoaddr(0x10);
      000126 75 82 10         [24]  941 	mov	dpl,#0x10
      000129 C0 07            [24]  942 	push	ar7
      00012B C0 06            [24]  943 	push	ar6
      00012D C0 05            [24]  944 	push	ar5
      00012F 12r00r52         [24]  945 	lcall	_lcdgotoaddr
      000132 D0 05            [24]  946 	pop	ar5
      000134 D0 06            [24]  947 	pop	ar6
      000136 D0 07            [24]  948 	pop	ar7
                                    949 ;	main.c:102: break;
                                    950 ;	main.c:103: case 0x20:
      000138 80 26            [24]  951 	sjmp	00106$
      00013A                        952 00103$:
                                    953 ;	main.c:104: lcdgotoaddr(0x50);
      00013A 75 82 50         [24]  954 	mov	dpl,#0x50
      00013D C0 07            [24]  955 	push	ar7
      00013F C0 06            [24]  956 	push	ar6
      000141 C0 05            [24]  957 	push	ar5
      000143 12r00r52         [24]  958 	lcall	_lcdgotoaddr
      000146 D0 05            [24]  959 	pop	ar5
      000148 D0 06            [24]  960 	pop	ar6
      00014A D0 07            [24]  961 	pop	ar7
                                    962 ;	main.c:105: break;
                                    963 ;	main.c:106: case 0x60:
      00014C 80 12            [24]  964 	sjmp	00106$
      00014E                        965 00104$:
                                    966 ;	main.c:107: lcdgotoaddr(0x00);
      00014E 75 82 00         [24]  967 	mov	dpl,#0x00
      000151 C0 07            [24]  968 	push	ar7
      000153 C0 06            [24]  969 	push	ar6
      000155 C0 05            [24]  970 	push	ar5
      000157 12r00r52         [24]  971 	lcall	_lcdgotoaddr
      00015A D0 05            [24]  972 	pop	ar5
      00015C D0 06            [24]  973 	pop	ar6
      00015E D0 07            [24]  974 	pop	ar7
                                    975 ;	main.c:111: }
      000160                        976 00106$:
                                    977 ;	main.c:112: ss++;
      000160 0D               [12]  978 	inc	r5
      000161 BD 00 01         [24]  979 	cjne	r5,#0x00,00142$
      000164 0E               [12]  980 	inc	r6
      000165                        981 00142$:
                                    982 ;	main.c:114: }
      000165 02r00rC9         [24]  983 	ljmp	00107$
                                    984 ;------------------------------------------------------------
                                    985 ;Allocation info for local variables in function 'lcdinit'
                                    986 ;------------------------------------------------------------
                                    987 ;	main.c:115: void lcdinit()
                                    988 ;	-----------------------------------------
                                    989 ;	 function lcdinit
                                    990 ;	-----------------------------------------
      000168                        991 _lcdinit:
                                    992 ;	main.c:117: delay(14000); //waiting for 15ms (1.085us * 14000 ~= 15ms)
      000168 90 36 B0         [24]  993 	mov	dptr,#0x36b0
      00016B E4               [12]  994 	clr	a
      00016C F5 F0            [12]  995 	mov	b,a
      00016E 12r00r07         [24]  996 	lcall	_delay
                                    997 ;	main.c:118: lcd_command(0,0,0x30); // system set
      000171 75*00 00         [24]  998 	mov	_lcd_command_PARM_2,#0x00
      000174 75*01 30         [24]  999 	mov	_lcd_command_PARM_3,#0x30
      000177 75 82 00         [24] 1000 	mov	dpl,#0x00
      00017A 12r00r2D         [24] 1001 	lcall	_lcd_command
                                   1002 ;	main.c:119: delay(4000); //waiting for 4.1ms (1.085us * 4000 ~= 4.1ms)
      00017D 90 0F A0         [24] 1003 	mov	dptr,#0x0fa0
      000180 E4               [12] 1004 	clr	a
      000181 F5 F0            [12] 1005 	mov	b,a
      000183 12r00r07         [24] 1006 	lcall	_delay
                                   1007 ;	main.c:120: lcd_command(0,0,0x30); // system set
      000186 75*00 00         [24] 1008 	mov	_lcd_command_PARM_2,#0x00
      000189 75*01 30         [24] 1009 	mov	_lcd_command_PARM_3,#0x30
      00018C 75 82 00         [24] 1010 	mov	dpl,#0x00
      00018F 12r00r2D         [24] 1011 	lcall	_lcd_command
                                   1012 ;	main.c:121: delay(100); //waiting for 100us (1.085us * 100 ~= 100us)
      000192 90 00 64         [24] 1013 	mov	dptr,#(0x64&0x00ff)
      000195 E4               [12] 1014 	clr	a
      000196 F5 F0            [12] 1015 	mov	b,a
      000198 12r00r07         [24] 1016 	lcall	_delay
                                   1017 ;	main.c:122: lcd_command(0,0,0x30); // system set
      00019B 75*00 00         [24] 1018 	mov	_lcd_command_PARM_2,#0x00
      00019E 75*01 30         [24] 1019 	mov	_lcd_command_PARM_3,#0x30
      0001A1 75 82 00         [24] 1020 	mov	dpl,#0x00
      0001A4 12r00r2D         [24] 1021 	lcall	_lcd_command
                                   1022 ;	main.c:123: lcdbusywait();
      0001A7 12r00r43         [24] 1023 	lcall	_lcdbusywait
                                   1024 ;	main.c:124: lcd_command(0,0,0x38); // function set
      0001AA 75*00 00         [24] 1025 	mov	_lcd_command_PARM_2,#0x00
      0001AD 75*01 38         [24] 1026 	mov	_lcd_command_PARM_3,#0x38
      0001B0 75 82 00         [24] 1027 	mov	dpl,#0x00
      0001B3 12r00r2D         [24] 1028 	lcall	_lcd_command
                                   1029 ;	main.c:125: lcdbusywait();
      0001B6 12r00r43         [24] 1030 	lcall	_lcdbusywait
                                   1031 ;	main.c:126: lcd_command(0,0,0x08); // turn off display
      0001B9 75*00 00         [24] 1032 	mov	_lcd_command_PARM_2,#0x00
      0001BC 75*01 08         [24] 1033 	mov	_lcd_command_PARM_3,#0x08
      0001BF 75 82 00         [24] 1034 	mov	dpl,#0x00
      0001C2 12r00r2D         [24] 1035 	lcall	_lcd_command
                                   1036 ;	main.c:127: lcdbusywait();
      0001C5 12r00r43         [24] 1037 	lcall	_lcdbusywait
                                   1038 ;	main.c:128: lcd_command(0,0,0x0C); // turn on display
      0001C8 75*00 00         [24] 1039 	mov	_lcd_command_PARM_2,#0x00
      0001CB 75*01 0C         [24] 1040 	mov	_lcd_command_PARM_3,#0x0c
      0001CE 75 82 00         [24] 1041 	mov	dpl,#0x00
      0001D1 12r00r2D         [24] 1042 	lcall	_lcd_command
                                   1043 ;	main.c:129: lcdbusywait();
      0001D4 12r00r43         [24] 1044 	lcall	_lcdbusywait
                                   1045 ;	main.c:130: lcd_command(0,0,0x06); // Entry mode set
      0001D7 75*00 00         [24] 1046 	mov	_lcd_command_PARM_2,#0x00
      0001DA 75*01 06         [24] 1047 	mov	_lcd_command_PARM_3,#0x06
      0001DD 75 82 00         [24] 1048 	mov	dpl,#0x00
      0001E0 12r00r2D         [24] 1049 	lcall	_lcd_command
                                   1050 ;	main.c:131: lcdbusywait();
      0001E3 12r00r43         [24] 1051 	lcall	_lcdbusywait
                                   1052 ;	main.c:132: lcd_command(0,0,0x01); // clear screen and send the cursor home
      0001E6 75*00 00         [24] 1053 	mov	_lcd_command_PARM_2,#0x00
      0001E9 75*01 01         [24] 1054 	mov	_lcd_command_PARM_3,#0x01
      0001EC 75 82 00         [24] 1055 	mov	dpl,#0x00
                                   1056 ;	main.c:133: }
      0001EF 02r00r2D         [24] 1057 	ljmp	_lcd_command
                                   1058 ;------------------------------------------------------------
                                   1059 ;Allocation info for local variables in function 'lcdclear'
                                   1060 ;------------------------------------------------------------
                                   1061 ;	main.c:135: void lcdclear(){
                                   1062 ;	-----------------------------------------
                                   1063 ;	 function lcdclear
                                   1064 ;	-----------------------------------------
      0001F2                       1065 _lcdclear:
                                   1066 ;	main.c:136: RS = PULSE_LOW;
                                   1067 ;	assignBit
      0001F2 C2 96            [12] 1068 	clr	_P1_6
                                   1069 ;	main.c:137: R_W = PULSE_LOW;
                                   1070 ;	assignBit
      0001F4 C2 97            [12] 1071 	clr	_P1_7
                                   1072 ;	main.c:138: *ptr = 0b00000001;
      0001F6 85*00 82         [24] 1073 	mov	dpl,_ptr
      0001F9 85*01 83         [24] 1074 	mov	dph,(_ptr + 1)
      0001FC 74 01            [12] 1075 	mov	a,#0x01
      0001FE F0               [24] 1076 	movx	@dptr,a
                                   1077 ;	main.c:139: lcdbusywait();
                                   1078 ;	main.c:140: }
      0001FF 02r00r43         [24] 1079 	ljmp	_lcdbusywait
                                   1080 ;------------------------------------------------------------
                                   1081 ;Allocation info for local variables in function 'test_functionality'
                                   1082 ;------------------------------------------------------------
                                   1083 ;	main.c:142: void test_functionality(){
                                   1084 ;	-----------------------------------------
                                   1085 ;	 function test_functionality
                                   1086 ;	-----------------------------------------
      000202                       1087 _test_functionality:
                                   1088 ;	main.c:143: printf_tiny("test_functionality start\n\r");
      000202 74r00            [12] 1089 	mov	a,#___str_0
      000204 C0 E0            [24] 1090 	push	acc
      000206 74s00            [12] 1091 	mov	a,#(___str_0 >> 8)
      000208 C0 E0            [24] 1092 	push	acc
      00020A 12r00r00         [24] 1093 	lcall	_printf_tiny
      00020D 15 81            [12] 1094 	dec	sp
      00020F 15 81            [12] 1095 	dec	sp
                                   1096 ;	main.c:145: lcdgotoaddr(0x01);
      000211 75 82 01         [24] 1097 	mov	dpl,#0x01
      000214 12r00r52         [24] 1098 	lcall	_lcdgotoaddr
                                   1099 ;	main.c:146: lcdputch('E');
      000217 75 82 45         [24] 1100 	mov	dpl,#0x45
      00021A 12r00rB2         [24] 1101 	lcall	_lcdputch
                                   1102 ;	main.c:147: delay(100000);
      00021D 90 86 A0         [24] 1103 	mov	dptr,#0x86a0
      000220 75 F0 01         [24] 1104 	mov	b,#0x01
      000223 E4               [12] 1105 	clr	a
      000224 12r00r07         [24] 1106 	lcall	_delay
                                   1107 ;	main.c:149: lcdgotoxy(1, 1);
      000227 75*0E 01         [24] 1108 	mov	_lcdgotoxy_PARM_2,#0x01
      00022A 75 82 01         [24] 1109 	mov	dpl,#0x01
      00022D 12r00r66         [24] 1110 	lcall	_lcdgotoxy
                                   1111 ;	main.c:150: lcdputstr("ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789abcdefghijklmnopqrstuvwxyzJITHU");
      000230 90r00r1B         [24] 1112 	mov	dptr,#___str_1
      000233 75 F0 80         [24] 1113 	mov	b,#0x80
      000236 12r00rC3         [24] 1114 	lcall	_lcdputstr
                                   1115 ;	main.c:151: delay(100000);
      000239 90 86 A0         [24] 1116 	mov	dptr,#0x86a0
      00023C 75 F0 01         [24] 1117 	mov	b,#0x01
      00023F E4               [12] 1118 	clr	a
      000240 12r00r07         [24] 1119 	lcall	_delay
                                   1120 ;	main.c:153: create_custom_character(custom_char_code);
      000243 85*0B 82         [24] 1121 	mov	dpl,_custom_char_code
      000246 12r02r83         [24] 1122 	lcall	_create_custom_character
                                   1123 ;	main.c:154: lcdgotoaddr(0x0F);
      000249 75 82 0F         [24] 1124 	mov	dpl,#0x0f
      00024C 12r00r52         [24] 1125 	lcall	_lcdgotoaddr
                                   1126 ;	main.c:155: lcdputch(custom_char_code);
      00024F 85*0B 82         [24] 1127 	mov	dpl,_custom_char_code
      000252 12r00rB2         [24] 1128 	lcall	_lcdputch
                                   1129 ;	main.c:156: delay(100000);
      000255 90 86 A0         [24] 1130 	mov	dptr,#0x86a0
      000258 75 F0 01         [24] 1131 	mov	b,#0x01
      00025B E4               [12] 1132 	clr	a
      00025C 12r00r07         [24] 1133 	lcall	_delay
                                   1134 ;	main.c:158: lcdclear();
      00025F 12r01rF2         [24] 1135 	lcall	_lcdclear
                                   1136 ;	main.c:159: printf_tiny("test_functionality end\n\r");
      000262 74r5E            [12] 1137 	mov	a,#___str_2
      000264 C0 E0            [24] 1138 	push	acc
      000266 74s00            [12] 1139 	mov	a,#(___str_2 >> 8)
      000268 C0 E0            [24] 1140 	push	acc
      00026A 12r00r00         [24] 1141 	lcall	_printf_tiny
      00026D 15 81            [12] 1142 	dec	sp
      00026F 15 81            [12] 1143 	dec	sp
                                   1144 ;	main.c:160: }
      000271 22               [24] 1145 	ret
                                   1146 ;------------------------------------------------------------
                                   1147 ;Allocation info for local variables in function 'set_cgram_address'
                                   1148 ;------------------------------------------------------------
                                   1149 ;cgram_address             Allocated to registers r7 
                                   1150 ;------------------------------------------------------------
                                   1151 ;	main.c:162: void set_cgram_address(uint8_t cgram_address){
                                   1152 ;	-----------------------------------------
                                   1153 ;	 function set_cgram_address
                                   1154 ;	-----------------------------------------
      000272                       1155 _set_cgram_address:
      000272 AF 82            [24] 1156 	mov	r7,dpl
                                   1157 ;	main.c:163: RS = PULSE_LOW;
                                   1158 ;	assignBit
      000274 C2 96            [12] 1159 	clr	_P1_6
                                   1160 ;	main.c:164: R_W = PULSE_LOW;
                                   1161 ;	assignBit
      000276 C2 97            [12] 1162 	clr	_P1_7
                                   1163 ;	main.c:165: *ptr = cgram_address;
      000278 85*00 82         [24] 1164 	mov	dpl,_ptr
      00027B 85*01 83         [24] 1165 	mov	dph,(_ptr + 1)
      00027E EF               [12] 1166 	mov	a,r7
      00027F F0               [24] 1167 	movx	@dptr,a
                                   1168 ;	main.c:166: lcdbusywait();
                                   1169 ;	main.c:167: }
      000280 02r00r43         [24] 1170 	ljmp	_lcdbusywait
                                   1171 ;------------------------------------------------------------
                                   1172 ;Allocation info for local variables in function 'create_custom_character'
                                   1173 ;------------------------------------------------------------
                                   1174 ;char_num                  Allocated to registers r7 
                                   1175 ;c                         Allocated with name '_create_custom_character_c_65536_69'
                                   1176 ;i                         Allocated to registers r5 r6 
                                   1177 ;cgram_address             Allocated to registers 
                                   1178 ;------------------------------------------------------------
                                   1179 ;	main.c:168: void create_custom_character(uint8_t char_num){
                                   1180 ;	-----------------------------------------
                                   1181 ;	 function create_custom_character
                                   1182 ;	-----------------------------------------
      000283                       1183 _create_custom_character:
      000283 AF 82            [24] 1184 	mov	r7,dpl
                                   1185 ;	main.c:169: uint8_t c[8] =
      000285 75*0F 04         [24] 1186 	mov	_create_custom_character_c_65536_69,#0x04
      000288 75*10 0E         [24] 1187 	mov	(_create_custom_character_c_65536_69 + 0x0001),#0x0e
      00028B 75*11 04         [24] 1188 	mov	(_create_custom_character_c_65536_69 + 0x0002),#0x04
      00028E 75*12 04         [24] 1189 	mov	(_create_custom_character_c_65536_69 + 0x0003),#0x04
      000291 75*13 04         [24] 1190 	mov	(_create_custom_character_c_65536_69 + 0x0004),#0x04
      000294 75*14 04         [24] 1191 	mov	(_create_custom_character_c_65536_69 + 0x0005),#0x04
      000297 75*15 04         [24] 1192 	mov	(_create_custom_character_c_65536_69 + 0x0006),#0x04
      00029A 75*16 0A         [24] 1193 	mov	(_create_custom_character_c_65536_69 + 0x0007),#0x0a
                                   1194 ;	main.c:179: for(int i = 0; i < BYTE_LENGTH; i++){
      00029D 7D 00            [12] 1195 	mov	r5,#0x00
      00029F 7E 00            [12] 1196 	mov	r6,#0x00
      0002A1                       1197 00103$:
      0002A1 C3               [12] 1198 	clr	c
      0002A2 ED               [12] 1199 	mov	a,r5
      0002A3 94 08            [12] 1200 	subb	a,#0x08
      0002A5 EE               [12] 1201 	mov	a,r6
      0002A6 64 80            [12] 1202 	xrl	a,#0x80
      0002A8 94 80            [12] 1203 	subb	a,#0x80
      0002AA 50 34            [24] 1204 	jnc	00105$
                                   1205 ;	main.c:180: uint8_t cgram_address = 0b01000000 | (char_num << 3) | i;
      0002AC 8F 04            [24] 1206 	mov	ar4,r7
      0002AE EC               [12] 1207 	mov	a,r4
      0002AF C4               [12] 1208 	swap	a
      0002B0 03               [12] 1209 	rr	a
      0002B1 54 F8            [12] 1210 	anl	a,#0xf8
      0002B3 FC               [12] 1211 	mov	r4,a
      0002B4 43 04 40         [24] 1212 	orl	ar4,#0x40
      0002B7 8D 03            [24] 1213 	mov	ar3,r5
      0002B9 EB               [12] 1214 	mov	a,r3
      0002BA 4C               [12] 1215 	orl	a,r4
      0002BB F5 82            [12] 1216 	mov	dpl,a
                                   1217 ;	main.c:181: set_cgram_address(cgram_address);
      0002BD C0 07            [24] 1218 	push	ar7
      0002BF C0 06            [24] 1219 	push	ar6
      0002C1 C0 05            [24] 1220 	push	ar5
      0002C3 12r02r72         [24] 1221 	lcall	_set_cgram_address
      0002C6 D0 05            [24] 1222 	pop	ar5
                                   1223 ;	main.c:182: lcdputch(c[i]);
      0002C8 ED               [12] 1224 	mov	a,r5
      0002C9 24r0F            [12] 1225 	add	a,#_create_custom_character_c_65536_69
      0002CB F9               [12] 1226 	mov	r1,a
      0002CC 87 82            [24] 1227 	mov	dpl,@r1
      0002CE C0 05            [24] 1228 	push	ar5
      0002D0 12r00rB2         [24] 1229 	lcall	_lcdputch
      0002D3 D0 05            [24] 1230 	pop	ar5
      0002D5 D0 06            [24] 1231 	pop	ar6
      0002D7 D0 07            [24] 1232 	pop	ar7
                                   1233 ;	main.c:179: for(int i = 0; i < BYTE_LENGTH; i++){
      0002D9 0D               [12] 1234 	inc	r5
      0002DA BD 00 C4         [24] 1235 	cjne	r5,#0x00,00103$
      0002DD 0E               [12] 1236 	inc	r6
      0002DE 80 C1            [24] 1237 	sjmp	00103$
      0002E0                       1238 00105$:
                                   1239 ;	main.c:184: }
      0002E0 22               [24] 1240 	ret
                                   1241 ;------------------------------------------------------------
                                   1242 ;Allocation info for local variables in function 'timer2_init'
                                   1243 ;------------------------------------------------------------
                                   1244 ;	main.c:186: void timer2_init(){
                                   1245 ;	-----------------------------------------
                                   1246 ;	 function timer2_init
                                   1247 ;	-----------------------------------------
      0002E1                       1248 _timer2_init:
                                   1249 ;	main.c:187: T2MOD = 0b00000001;
      0002E1 75 C9 01         [24] 1250 	mov	_T2MOD,#0x01
                                   1251 ;	main.c:188: RCAP2L = 0xFC;
      0002E4 75 CA FC         [24] 1252 	mov	_RCAP2L,#0xfc
                                   1253 ;	main.c:189: RCAP2H = 0x4B; // interrupting for every 50msec
      0002E7 75 CB 4B         [24] 1254 	mov	_RCAP2H,#0x4b
                                   1255 ;	main.c:191: TL2 = RCAP2L;
      0002EA 85 CA CC         [24] 1256 	mov	_TL2,_RCAP2L
                                   1257 ;	main.c:192: TH2 = RCAP2H;
      0002ED 85 CB CD         [24] 1258 	mov	_TH2,_RCAP2H
                                   1259 ;	main.c:193: TR2 = 1;
                                   1260 ;	assignBit
      0002F0 D2 CA            [12] 1261 	setb	_TR2
                                   1262 ;	main.c:194: }
      0002F2 22               [24] 1263 	ret
                                   1264 ;------------------------------------------------------------
                                   1265 ;Allocation info for local variables in function 'timer2_interrupt_Init'
                                   1266 ;------------------------------------------------------------
                                   1267 ;	main.c:195: void timer2_interrupt_Init(){
                                   1268 ;	-----------------------------------------
                                   1269 ;	 function timer2_interrupt_Init
                                   1270 ;	-----------------------------------------
      0002F3                       1271 _timer2_interrupt_Init:
                                   1272 ;	main.c:196: timer2_init();
      0002F3 12r02rE1         [24] 1273 	lcall	_timer2_init
                                   1274 ;	main.c:197: ET2 = 1;
                                   1275 ;	assignBit
      0002F6 D2 AD            [12] 1276 	setb	_ET2
                                   1277 ;	main.c:198: EA = 1;
                                   1278 ;	assignBit
      0002F8 D2 AF            [12] 1279 	setb	_EA
                                   1280 ;	main.c:199: }
      0002FA 22               [24] 1281 	ret
                                   1282 ;------------------------------------------------------------
                                   1283 ;Allocation info for local variables in function 'isr_timer2'
                                   1284 ;------------------------------------------------------------
                                   1285 ;	main.c:201: void isr_timer2(void) __interrupt (5)
                                   1286 ;	-----------------------------------------
                                   1287 ;	 function isr_timer2
                                   1288 ;	-----------------------------------------
      0002FB                       1289 _isr_timer2:
      0002FB C0*00            [24] 1290 	push	bits
      0002FD C0 E0            [24] 1291 	push	acc
      0002FF C0 F0            [24] 1292 	push	b
      000301 C0 82            [24] 1293 	push	dpl
      000303 C0 83            [24] 1294 	push	dph
      000305 C0 07            [24] 1295 	push	(0+7)
      000307 C0 06            [24] 1296 	push	(0+6)
      000309 C0 05            [24] 1297 	push	(0+5)
      00030B C0 04            [24] 1298 	push	(0+4)
      00030D C0 03            [24] 1299 	push	(0+3)
      00030F C0 02            [24] 1300 	push	(0+2)
      000311 C0 01            [24] 1301 	push	(0+1)
      000313 C0 00            [24] 1302 	push	(0+0)
      000315 C0 D0            [24] 1303 	push	psw
      000317 75 D0 00         [24] 1304 	mov	psw,#0x00
                                   1305 ;	main.c:205: }
      00031A D2*01            [12] 1306 	setb	_isr_timer2_sloc0_1_0
      00031C 10 AF 02         [24] 1307 	jbc	ea,00103$
      00031F C2*01            [12] 1308 	clr	_isr_timer2_sloc0_1_0
      000321                       1309 00103$:
                                   1310 ;	main.c:204: tick++;
      000321 AE*02            [24] 1311 	mov	r6,_tick
      000323 AF*03            [24] 1312 	mov	r7,(_tick + 1)
      000325 74 01            [12] 1313 	mov	a,#0x01
      000327 2E               [12] 1314 	add	a,r6
      000328 F5*02            [12] 1315 	mov	_tick,a
      00032A E4               [12] 1316 	clr	a
      00032B 3F               [12] 1317 	addc	a,r7
      00032C F5*03            [12] 1318 	mov	(_tick + 1),a
      00032E A2*01            [12] 1319 	mov	c,_isr_timer2_sloc0_1_0
      000330 92 AF            [24] 1320 	mov	ea,c
                                   1321 ;	main.c:206: clock_run();
      000332 12r03r93         [24] 1322 	lcall	_clock_run
                                   1323 ;	main.c:207: TF2 = 0;
                                   1324 ;	assignBit
      000335 C2 CF            [12] 1325 	clr	_TF2
                                   1326 ;	main.c:208: }
      000337 D0 D0            [24] 1327 	pop	psw
      000339 D0 00            [24] 1328 	pop	(0+0)
      00033B D0 01            [24] 1329 	pop	(0+1)
      00033D D0 02            [24] 1330 	pop	(0+2)
      00033F D0 03            [24] 1331 	pop	(0+3)
      000341 D0 04            [24] 1332 	pop	(0+4)
      000343 D0 05            [24] 1333 	pop	(0+5)
      000345 D0 06            [24] 1334 	pop	(0+6)
      000347 D0 07            [24] 1335 	pop	(0+7)
      000349 D0 83            [24] 1336 	pop	dph
      00034B D0 82            [24] 1337 	pop	dpl
      00034D D0 F0            [24] 1338 	pop	b
      00034F D0 E0            [24] 1339 	pop	acc
      000351 D0*00            [24] 1340 	pop	bits
      000353 32               [24] 1341 	reti
                                   1342 ;------------------------------------------------------------
                                   1343 ;Allocation info for local variables in function 'reset_clock'
                                   1344 ;------------------------------------------------------------
                                   1345 ;	main.c:210: void reset_clock(){
                                   1346 ;	-----------------------------------------
                                   1347 ;	 function reset_clock
                                   1348 ;	-----------------------------------------
      000354                       1349 _reset_clock:
                                   1350 ;	main.c:211: min_high = '0';
      000354 75*06 30         [24] 1351 	mov	_min_high,#0x30
                                   1352 ;	main.c:212: min_low = '0';
      000357 75*07 30         [24] 1353 	mov	_min_low,#0x30
                                   1354 ;	main.c:213: sec_high = '0';
      00035A 75*08 30         [24] 1355 	mov	_sec_high,#0x30
                                   1356 ;	main.c:214: sec_low = '0';
      00035D 75*09 30         [24] 1357 	mov	_sec_low,#0x30
                                   1358 ;	main.c:215: mili_sec = '0';
      000360 75*0A 30         [24] 1359 	mov	_mili_sec,#0x30
                                   1360 ;	main.c:217: lcdgotoaddr(0x59);
      000363 75 82 59         [24] 1361 	mov	dpl,#0x59
      000366 12r00r52         [24] 1362 	lcall	_lcdgotoaddr
                                   1363 ;	main.c:218: lcdputch(min_high);
      000369 85*06 82         [24] 1364 	mov	dpl,_min_high
      00036C 12r00rB2         [24] 1365 	lcall	_lcdputch
                                   1366 ;	main.c:219: lcdputch(min_low);
      00036F 85*07 82         [24] 1367 	mov	dpl,_min_low
      000372 12r00rB2         [24] 1368 	lcall	_lcdputch
                                   1369 ;	main.c:220: lcdputch(':');
      000375 75 82 3A         [24] 1370 	mov	dpl,#0x3a
      000378 12r00rB2         [24] 1371 	lcall	_lcdputch
                                   1372 ;	main.c:221: lcdputch(sec_high);
      00037B 85*08 82         [24] 1373 	mov	dpl,_sec_high
      00037E 12r00rB2         [24] 1374 	lcall	_lcdputch
                                   1375 ;	main.c:222: lcdputch(sec_low);
      000381 85*09 82         [24] 1376 	mov	dpl,_sec_low
      000384 12r00rB2         [24] 1377 	lcall	_lcdputch
                                   1378 ;	main.c:223: lcdputch('.');
      000387 75 82 2E         [24] 1379 	mov	dpl,#0x2e
      00038A 12r00rB2         [24] 1380 	lcall	_lcdputch
                                   1381 ;	main.c:224: lcdputch(mili_sec);
      00038D 85*0A 82         [24] 1382 	mov	dpl,_mili_sec
                                   1383 ;	main.c:225: }
      000390 02r00rB2         [24] 1384 	ljmp	_lcdputch
                                   1385 ;------------------------------------------------------------
                                   1386 ;Allocation info for local variables in function 'clock_run'
                                   1387 ;------------------------------------------------------------
                                   1388 ;	main.c:226: void clock_run(){
                                   1389 ;	-----------------------------------------
                                   1390 ;	 function clock_run
                                   1391 ;	-----------------------------------------
      000393                       1392 _clock_run:
                                   1393 ;	main.c:227: if(clockrun_flag && ((tick % 2) == 0) && (tick > elapsed_tick)){
      000393 E5*0C            [12] 1394 	mov	a,_clockrun_flag
      000395 45*0D            [12] 1395 	orl	a,(_clockrun_flag + 1)
      000397 70 01            [24] 1396 	jnz	00149$
      000399 22               [24] 1397 	ret
      00039A                       1398 00149$:
      00039A E5*02            [12] 1399 	mov	a,_tick
      00039C 30 E0 01         [24] 1400 	jnb	acc.0,00150$
      00039F 22               [24] 1401 	ret
      0003A0                       1402 00150$:
      0003A0 C3               [12] 1403 	clr	c
      0003A1 E5*04            [12] 1404 	mov	a,_elapsed_tick
      0003A3 95*02            [12] 1405 	subb	a,_tick
      0003A5 E5*05            [12] 1406 	mov	a,(_elapsed_tick + 1)
      0003A7 95*03            [12] 1407 	subb	a,(_tick + 1)
      0003A9 40 01            [24] 1408 	jc	00151$
      0003AB 22               [24] 1409 	ret
      0003AC                       1410 00151$:
                                   1411 ;	main.c:228: elapsed_tick = tick;
      0003AC 85*02*04         [24] 1412 	mov	_elapsed_tick,_tick
      0003AF 85*03*05         [24] 1413 	mov	(_elapsed_tick + 1),(_tick + 1)
                                   1414 ;	main.c:229: mili_sec++;
      0003B2 E5*0A            [12] 1415 	mov	a,_mili_sec
      0003B4 04               [12] 1416 	inc	a
      0003B5 F5*0A            [12] 1417 	mov	_mili_sec,a
                                   1418 ;	main.c:230: if(mili_sec > '9'){
      0003B7 E5*0A            [12] 1419 	mov	a,_mili_sec
      0003B9 24 C6            [12] 1420 	add	a,#0xff - 0x39
      0003BB 50 20            [24] 1421 	jnc	00102$
                                   1422 ;	main.c:231: mili_sec = '0';
      0003BD 75*0A 30         [24] 1423 	mov	_mili_sec,#0x30
                                   1424 ;	main.c:232: lcdgotoaddr(0x5F);
      0003C0 75 82 5F         [24] 1425 	mov	dpl,#0x5f
      0003C3 12r00r52         [24] 1426 	lcall	_lcdgotoaddr
                                   1427 ;	main.c:233: lcdputch(mili_sec);
      0003C6 85*0A 82         [24] 1428 	mov	dpl,_mili_sec
      0003C9 12r00rB2         [24] 1429 	lcall	_lcdputch
                                   1430 ;	main.c:234: sec_low++;
      0003CC E5*09            [12] 1431 	mov	a,_sec_low
      0003CE 04               [12] 1432 	inc	a
      0003CF F5*09            [12] 1433 	mov	_sec_low,a
                                   1434 ;	main.c:235: lcdgotoaddr(0x5D);
      0003D1 75 82 5D         [24] 1435 	mov	dpl,#0x5d
      0003D4 12r00r52         [24] 1436 	lcall	_lcdgotoaddr
                                   1437 ;	main.c:236: lcdputch(sec_low);
      0003D7 85*09 82         [24] 1438 	mov	dpl,_sec_low
      0003DA 12r00rB2         [24] 1439 	lcall	_lcdputch
      0003DD                       1440 00102$:
                                   1441 ;	main.c:238: if(sec_low > '9'){
      0003DD E5*09            [12] 1442 	mov	a,_sec_low
      0003DF 24 C6            [12] 1443 	add	a,#0xff - 0x39
      0003E1 50 20            [24] 1444 	jnc	00104$
                                   1445 ;	main.c:239: sec_low = '0';
      0003E3 75*09 30         [24] 1446 	mov	_sec_low,#0x30
                                   1447 ;	main.c:240: lcdgotoaddr(0x5D);
      0003E6 75 82 5D         [24] 1448 	mov	dpl,#0x5d
      0003E9 12r00r52         [24] 1449 	lcall	_lcdgotoaddr
                                   1450 ;	main.c:241: lcdputch(sec_low);
      0003EC 85*09 82         [24] 1451 	mov	dpl,_sec_low
      0003EF 12r00rB2         [24] 1452 	lcall	_lcdputch
                                   1453 ;	main.c:242: sec_high++;
      0003F2 E5*08            [12] 1454 	mov	a,_sec_high
      0003F4 04               [12] 1455 	inc	a
      0003F5 F5*08            [12] 1456 	mov	_sec_high,a
                                   1457 ;	main.c:243: lcdgotoaddr(0x5C);
      0003F7 75 82 5C         [24] 1458 	mov	dpl,#0x5c
      0003FA 12r00r52         [24] 1459 	lcall	_lcdgotoaddr
                                   1460 ;	main.c:244: lcdputch(sec_high);
      0003FD 85*08 82         [24] 1461 	mov	dpl,_sec_high
      000400 12r00rB2         [24] 1462 	lcall	_lcdputch
      000403                       1463 00104$:
                                   1464 ;	main.c:246: if(sec_high > '5'){
      000403 E5*08            [12] 1465 	mov	a,_sec_high
      000405 24 CA            [12] 1466 	add	a,#0xff - 0x35
      000407 50 20            [24] 1467 	jnc	00106$
                                   1468 ;	main.c:247: sec_high = '0';
      000409 75*08 30         [24] 1469 	mov	_sec_high,#0x30
                                   1470 ;	main.c:248: lcdgotoaddr(0x5C);
      00040C 75 82 5C         [24] 1471 	mov	dpl,#0x5c
      00040F 12r00r52         [24] 1472 	lcall	_lcdgotoaddr
                                   1473 ;	main.c:249: lcdputch(sec_high);
      000412 85*08 82         [24] 1474 	mov	dpl,_sec_high
      000415 12r00rB2         [24] 1475 	lcall	_lcdputch
                                   1476 ;	main.c:250: min_low++;
      000418 E5*07            [12] 1477 	mov	a,_min_low
      00041A 04               [12] 1478 	inc	a
      00041B F5*07            [12] 1479 	mov	_min_low,a
                                   1480 ;	main.c:251: lcdgotoaddr(0x5A);
      00041D 75 82 5A         [24] 1481 	mov	dpl,#0x5a
      000420 12r00r52         [24] 1482 	lcall	_lcdgotoaddr
                                   1483 ;	main.c:252: lcdputch(min_low);
      000423 85*07 82         [24] 1484 	mov	dpl,_min_low
      000426 12r00rB2         [24] 1485 	lcall	_lcdputch
      000429                       1486 00106$:
                                   1487 ;	main.c:254: if(min_low > '9'){
      000429 E5*07            [12] 1488 	mov	a,_min_low
      00042B 24 C6            [12] 1489 	add	a,#0xff - 0x39
      00042D 50 20            [24] 1490 	jnc	00108$
                                   1491 ;	main.c:255: min_low = '0';
      00042F 75*07 30         [24] 1492 	mov	_min_low,#0x30
                                   1493 ;	main.c:256: lcdgotoaddr(0x5A);
      000432 75 82 5A         [24] 1494 	mov	dpl,#0x5a
      000435 12r00r52         [24] 1495 	lcall	_lcdgotoaddr
                                   1496 ;	main.c:257: lcdputch(min_low);
      000438 85*07 82         [24] 1497 	mov	dpl,_min_low
      00043B 12r00rB2         [24] 1498 	lcall	_lcdputch
                                   1499 ;	main.c:258: min_high++;
      00043E E5*06            [12] 1500 	mov	a,_min_high
      000440 04               [12] 1501 	inc	a
      000441 F5*06            [12] 1502 	mov	_min_high,a
                                   1503 ;	main.c:259: lcdgotoaddr(0x59);
      000443 75 82 59         [24] 1504 	mov	dpl,#0x59
      000446 12r00r52         [24] 1505 	lcall	_lcdgotoaddr
                                   1506 ;	main.c:260: lcdputch(min_high);
      000449 85*06 82         [24] 1507 	mov	dpl,_min_high
      00044C 12r00rB2         [24] 1508 	lcall	_lcdputch
      00044F                       1509 00108$:
                                   1510 ;	main.c:262: if(min_high > '5'){
      00044F E5*06            [12] 1511 	mov	a,_min_high
      000451 24 CA            [12] 1512 	add	a,#0xff - 0x35
      000453 50 0F            [24] 1513 	jnc	00110$
                                   1514 ;	main.c:263: min_high = '0';
      000455 75*06 30         [24] 1515 	mov	_min_high,#0x30
                                   1516 ;	main.c:264: lcdgotoaddr(0x59);
      000458 75 82 59         [24] 1517 	mov	dpl,#0x59
      00045B 12r00r52         [24] 1518 	lcall	_lcdgotoaddr
                                   1519 ;	main.c:265: lcdputch(min_high);
      00045E 85*06 82         [24] 1520 	mov	dpl,_min_high
      000461 12r00rB2         [24] 1521 	lcall	_lcdputch
      000464                       1522 00110$:
                                   1523 ;	main.c:267: lcdgotoaddr(0x5F);
      000464 75 82 5F         [24] 1524 	mov	dpl,#0x5f
      000467 12r00r52         [24] 1525 	lcall	_lcdgotoaddr
                                   1526 ;	main.c:268: lcdputch(mili_sec);
      00046A 85*0A 82         [24] 1527 	mov	dpl,_mili_sec
                                   1528 ;	main.c:270: }
      00046D 02r00rB2         [24] 1529 	ljmp	_lcdputch
                                   1530 ;------------------------------------------------------------
                                   1531 ;Allocation info for local variables in function 'main'
                                   1532 ;------------------------------------------------------------
                                   1533 ;indicator                 Allocated to registers 
                                   1534 ;user_input                Allocated to registers r7 
                                   1535 ;------------------------------------------------------------
                                   1536 ;	main.c:271: void main(void)
                                   1537 ;	-----------------------------------------
                                   1538 ;	 function main
                                   1539 ;	-----------------------------------------
      000470                       1540 _main:
                                   1541 ;	main.c:274: lcdinit();
      000470 12r01r68         [24] 1542 	lcall	_lcdinit
                                   1543 ;	main.c:275: test_functionality();
      000473 12r02r02         [24] 1544 	lcall	_test_functionality
                                   1545 ;	main.c:276: timer2_interrupt_Init();
      000476 12r02rF3         [24] 1546 	lcall	_timer2_interrupt_Init
                                   1547 ;	main.c:278: printf_tiny("*************************************************************************\n\r");
      000479 74r77            [12] 1548 	mov	a,#___str_3
      00047B C0 E0            [24] 1549 	push	acc
      00047D 74s00            [12] 1550 	mov	a,#(___str_3 >> 8)
      00047F C0 E0            [24] 1551 	push	acc
      000481 12r00r00         [24] 1552 	lcall	_printf_tiny
      000484 15 81            [12] 1553 	dec	sp
      000486 15 81            [12] 1554 	dec	sp
                                   1555 ;	main.c:279: printf_tiny("CLOCK MENU:\n\r");
      000488 74rC3            [12] 1556 	mov	a,#___str_4
      00048A C0 E0            [24] 1557 	push	acc
      00048C 74s00            [12] 1558 	mov	a,#(___str_4 >> 8)
      00048E C0 E0            [24] 1559 	push	acc
      000490 12r00r00         [24] 1560 	lcall	_printf_tiny
      000493 15 81            [12] 1561 	dec	sp
      000495 15 81            [12] 1562 	dec	sp
                                   1563 ;	main.c:280: printf_tiny("[a]. Clock restart\n\r");
      000497 74rD1            [12] 1564 	mov	a,#___str_5
      000499 C0 E0            [24] 1565 	push	acc
      00049B 74s00            [12] 1566 	mov	a,#(___str_5 >> 8)
      00049D C0 E0            [24] 1567 	push	acc
      00049F 12r00r00         [24] 1568 	lcall	_printf_tiny
      0004A2 15 81            [12] 1569 	dec	sp
      0004A4 15 81            [12] 1570 	dec	sp
                                   1571 ;	main.c:281: printf_tiny("[b]. Clock stop\n\r");
      0004A6 74rE6            [12] 1572 	mov	a,#___str_6
      0004A8 C0 E0            [24] 1573 	push	acc
      0004AA 74s00            [12] 1574 	mov	a,#(___str_6 >> 8)
      0004AC C0 E0            [24] 1575 	push	acc
      0004AE 12r00r00         [24] 1576 	lcall	_printf_tiny
      0004B1 15 81            [12] 1577 	dec	sp
      0004B3 15 81            [12] 1578 	dec	sp
                                   1579 ;	main.c:282: printf_tiny("[c]. Clock reset\n\r");
      0004B5 74rF8            [12] 1580 	mov	a,#___str_7
      0004B7 C0 E0            [24] 1581 	push	acc
      0004B9 74s00            [12] 1582 	mov	a,#(___str_7 >> 8)
      0004BB C0 E0            [24] 1583 	push	acc
      0004BD 12r00r00         [24] 1584 	lcall	_printf_tiny
      0004C0 15 81            [12] 1585 	dec	sp
      0004C2 15 81            [12] 1586 	dec	sp
                                   1587 ;	main.c:283: printf_tiny("*************************************************************************\n\r");
      0004C4 74r77            [12] 1588 	mov	a,#___str_3
      0004C6 C0 E0            [24] 1589 	push	acc
      0004C8 74s00            [12] 1590 	mov	a,#(___str_3 >> 8)
      0004CA C0 E0            [24] 1591 	push	acc
      0004CC 12r00r00         [24] 1592 	lcall	_printf_tiny
      0004CF 15 81            [12] 1593 	dec	sp
      0004D1 15 81            [12] 1594 	dec	sp
                                   1595 ;	main.c:284: reset_clock();
      0004D3 12r03r54         [24] 1596 	lcall	_reset_clock
                                   1597 ;	main.c:285: lcdgotoxy(1,1);
      0004D6 75*0E 01         [24] 1598 	mov	_lcdgotoxy_PARM_2,#0x01
      0004D9 75 82 01         [24] 1599 	mov	dpl,#0x01
      0004DC 12r00r66         [24] 1600 	lcall	_lcdgotoxy
                                   1601 ;	main.c:286: lcdputstr("Clock status:");
      0004DF 90r01r0B         [24] 1602 	mov	dptr,#___str_8
      0004E2 75 F0 80         [24] 1603 	mov	b,#0x80
      0004E5 12r00rC3         [24] 1604 	lcall	_lcdputstr
                                   1605 ;	main.c:287: lcdgotoxy(2,1);
      0004E8 75*0E 01         [24] 1606 	mov	_lcdgotoxy_PARM_2,#0x01
      0004EB 75 82 02         [24] 1607 	mov	dpl,#0x02
      0004EE 12r00r66         [24] 1608 	lcall	_lcdgotoxy
                                   1609 ;	main.c:288: lcdputstr("Running");
      0004F1 90r01r19         [24] 1610 	mov	dptr,#___str_9
      0004F4 75 F0 80         [24] 1611 	mov	b,#0x80
      0004F7 12r00rC3         [24] 1612 	lcall	_lcdputstr
                                   1613 ;	main.c:289: lcdgotoxy(3,1);
      0004FA 75*0E 01         [24] 1614 	mov	_lcdgotoxy_PARM_2,#0x01
      0004FD 75 82 03         [24] 1615 	mov	dpl,#0x03
      000500 12r00r66         [24] 1616 	lcall	_lcdgotoxy
                                   1617 ;	main.c:290: lcdputstr("Stopped");
      000503 90r01r21         [24] 1618 	mov	dptr,#___str_10
      000506 75 F0 80         [24] 1619 	mov	b,#0x80
      000509 12r00rC3         [24] 1620 	lcall	_lcdputstr
                                   1621 ;	main.c:291: lcdgotoxy(4,1);
      00050C 75*0E 01         [24] 1622 	mov	_lcdgotoxy_PARM_2,#0x01
      00050F 75 82 04         [24] 1623 	mov	dpl,#0x04
      000512 12r00r66         [24] 1624 	lcall	_lcdgotoxy
                                   1625 ;	main.c:292: lcdputstr("Reset");
      000515 90r01r29         [24] 1626 	mov	dptr,#___str_11
      000518 75 F0 80         [24] 1627 	mov	b,#0x80
      00051B 12r00rC3         [24] 1628 	lcall	_lcdputstr
                                   1629 ;	main.c:293: while(1){
      00051E                       1630 00116$:
                                   1631 ;	main.c:294: int8_t user_input = echo(); // Read user input from UART
      00051E 12r00r00         [24] 1632 	lcall	_echo
      000521 AF 82            [24] 1633 	mov	r7,dpl
                                   1634 ;	main.c:295: if (((user_input >= '0') && (user_input <= '9')) || ((user_input >= 'A') && (user_input <= 'Z')))
      000523 C3               [12] 1635 	clr	c
      000524 EF               [12] 1636 	mov	a,r7
      000525 64 80            [12] 1637 	xrl	a,#0x80
      000527 94 B0            [12] 1638 	subb	a,#0xb0
      000529 40 0B            [24] 1639 	jc	00106$
      00052B 74 B9            [12] 1640 	mov	a,#(0x39 ^ 0x80)
      00052D 8F F0            [24] 1641 	mov	b,r7
      00052F 63 F0 80         [24] 1642 	xrl	b,#0x80
      000532 95 F0            [12] 1643 	subb	a,b
      000534 50 13            [24] 1644 	jnc	00101$
      000536                       1645 00106$:
      000536 C3               [12] 1646 	clr	c
      000537 EF               [12] 1647 	mov	a,r7
      000538 64 80            [12] 1648 	xrl	a,#0x80
      00053A 94 C1            [12] 1649 	subb	a,#0xc1
      00053C 40 20            [24] 1650 	jc	00102$
      00053E 74 DA            [12] 1651 	mov	a,#(0x5a ^ 0x80)
      000540 8F F0            [24] 1652 	mov	b,r7
      000542 63 F0 80         [24] 1653 	xrl	b,#0x80
      000545 95 F0            [12] 1654 	subb	a,b
      000547 40 15            [24] 1655 	jc	00102$
      000549                       1656 00101$:
                                   1657 ;	main.c:298: printf_tiny("Please enter commands in small cases\n\r");
      000549 C0 07            [24] 1658 	push	ar7
      00054B 74r2F            [12] 1659 	mov	a,#___str_12
      00054D C0 E0            [24] 1660 	push	acc
      00054F 74s01            [12] 1661 	mov	a,#(___str_12 >> 8)
      000551 C0 E0            [24] 1662 	push	acc
      000553 12r00r00         [24] 1663 	lcall	_printf_tiny
      000556 15 81            [12] 1664 	dec	sp
      000558 15 81            [12] 1665 	dec	sp
      00055A D0 07            [24] 1666 	pop	ar7
      00055C 80 13            [24] 1667 	sjmp	00103$
      00055E                       1668 00102$:
                                   1669 ;	main.c:302: printf_tiny("\n\r"); // Print newline for better output formatting
      00055E C0 07            [24] 1670 	push	ar7
      000560 74r56            [12] 1671 	mov	a,#___str_13
      000562 C0 E0            [24] 1672 	push	acc
      000564 74s01            [12] 1673 	mov	a,#(___str_13 >> 8)
      000566 C0 E0            [24] 1674 	push	acc
      000568 12r00r00         [24] 1675 	lcall	_printf_tiny
      00056B 15 81            [12] 1676 	dec	sp
      00056D 15 81            [12] 1677 	dec	sp
      00056F D0 07            [24] 1678 	pop	ar7
      000571                       1679 00103$:
                                   1680 ;	main.c:304: switch(user_input)
      000571 BF 61 02         [24] 1681 	cjne	r7,#0x61,00152$
      000574 80 0D            [24] 1682 	sjmp	00107$
      000576                       1683 00152$:
      000576 BF 62 02         [24] 1684 	cjne	r7,#0x62,00153$
      000579 80 4D            [24] 1685 	sjmp	00108$
      00057B                       1686 00153$:
      00057B BF 63 03         [24] 1687 	cjne	r7,#0x63,00154$
      00057E 02r06r0C         [24] 1688 	ljmp	00109$
      000581                       1689 00154$:
                                   1690 ;	main.c:306: case 'a' :
      000581 80 9B            [24] 1691 	sjmp	00116$
      000583                       1692 00107$:
                                   1693 ;	main.c:307: printf_tiny("Restarting clock\n\r");
      000583 74r59            [12] 1694 	mov	a,#___str_14
      000585 C0 E0            [24] 1695 	push	acc
      000587 74s01            [12] 1696 	mov	a,#(___str_14 >> 8)
      000589 C0 E0            [24] 1697 	push	acc
      00058B 12r00r00         [24] 1698 	lcall	_printf_tiny
      00058E 15 81            [12] 1699 	dec	sp
      000590 15 81            [12] 1700 	dec	sp
                                   1701 ;	main.c:308: clockrun_flag = 1;
      000592 75*0C 01         [24] 1702 	mov	_clockrun_flag,#0x01
      000595 75*0D 00         [24] 1703 	mov	(_clockrun_flag + 1),#0x00
                                   1704 ;	main.c:309: lcdgotoxy(2,8);
      000598 75*0E 08         [24] 1705 	mov	_lcdgotoxy_PARM_2,#0x08
      00059B 75 82 02         [24] 1706 	mov	dpl,#0x02
      00059E 12r00r66         [24] 1707 	lcall	_lcdgotoxy
                                   1708 ;	main.c:310: lcdputch(indicator);
      0005A1 75 82 3C         [24] 1709 	mov	dpl,#0x3c
      0005A4 12r00rB2         [24] 1710 	lcall	_lcdputch
                                   1711 ;	main.c:311: lcdgotoxy(3,8);
      0005A7 75*0E 08         [24] 1712 	mov	_lcdgotoxy_PARM_2,#0x08
      0005AA 75 82 03         [24] 1713 	mov	dpl,#0x03
      0005AD 12r00r66         [24] 1714 	lcall	_lcdgotoxy
                                   1715 ;	main.c:312: lcdputch(' ');
      0005B0 75 82 20         [24] 1716 	mov	dpl,#0x20
      0005B3 12r00rB2         [24] 1717 	lcall	_lcdputch
                                   1718 ;	main.c:313: lcdgotoxy(4,6);
      0005B6 75*0E 06         [24] 1719 	mov	_lcdgotoxy_PARM_2,#0x06
      0005B9 75 82 04         [24] 1720 	mov	dpl,#0x04
      0005BC 12r00r66         [24] 1721 	lcall	_lcdgotoxy
                                   1722 ;	main.c:314: lcdputch(' ');
      0005BF 75 82 20         [24] 1723 	mov	dpl,#0x20
      0005C2 12r00rB2         [24] 1724 	lcall	_lcdputch
                                   1725 ;	main.c:315: break;
      0005C5 02r05r1E         [24] 1726 	ljmp	00116$
                                   1727 ;	main.c:317: case 'b' :
      0005C8                       1728 00108$:
                                   1729 ;	main.c:318: printf_tiny("Stopping clock\n\r");
      0005C8 74r6C            [12] 1730 	mov	a,#___str_15
      0005CA C0 E0            [24] 1731 	push	acc
      0005CC 74s01            [12] 1732 	mov	a,#(___str_15 >> 8)
      0005CE C0 E0            [24] 1733 	push	acc
      0005D0 12r00r00         [24] 1734 	lcall	_printf_tiny
      0005D3 15 81            [12] 1735 	dec	sp
      0005D5 15 81            [12] 1736 	dec	sp
                                   1737 ;	main.c:319: clockrun_flag = 0;
      0005D7 E4               [12] 1738 	clr	a
      0005D8 F5*0C            [12] 1739 	mov	_clockrun_flag,a
      0005DA F5*0D            [12] 1740 	mov	(_clockrun_flag + 1),a
                                   1741 ;	main.c:320: lcdgotoxy(2,8);
      0005DC 75*0E 08         [24] 1742 	mov	_lcdgotoxy_PARM_2,#0x08
      0005DF 75 82 02         [24] 1743 	mov	dpl,#0x02
      0005E2 12r00r66         [24] 1744 	lcall	_lcdgotoxy
                                   1745 ;	main.c:321: lcdputch(' ');
      0005E5 75 82 20         [24] 1746 	mov	dpl,#0x20
      0005E8 12r00rB2         [24] 1747 	lcall	_lcdputch
                                   1748 ;	main.c:322: lcdgotoxy(3,8);
      0005EB 75*0E 08         [24] 1749 	mov	_lcdgotoxy_PARM_2,#0x08
      0005EE 75 82 03         [24] 1750 	mov	dpl,#0x03
      0005F1 12r00r66         [24] 1751 	lcall	_lcdgotoxy
                                   1752 ;	main.c:323: lcdputch(indicator);
      0005F4 75 82 3C         [24] 1753 	mov	dpl,#0x3c
      0005F7 12r00rB2         [24] 1754 	lcall	_lcdputch
                                   1755 ;	main.c:324: lcdgotoxy(4,6);
      0005FA 75*0E 06         [24] 1756 	mov	_lcdgotoxy_PARM_2,#0x06
      0005FD 75 82 04         [24] 1757 	mov	dpl,#0x04
      000600 12r00r66         [24] 1758 	lcall	_lcdgotoxy
                                   1759 ;	main.c:325: lcdputch(' ');
      000603 75 82 20         [24] 1760 	mov	dpl,#0x20
      000606 12r00rB2         [24] 1761 	lcall	_lcdputch
                                   1762 ;	main.c:326: break;
      000609 02r05r1E         [24] 1763 	ljmp	00116$
                                   1764 ;	main.c:327: case 'c' :
      00060C                       1765 00109$:
                                   1766 ;	main.c:328: printf_tiny("Resetting clock\n\r");
      00060C 74r7D            [12] 1767 	mov	a,#___str_16
      00060E C0 E0            [24] 1768 	push	acc
      000610 74s01            [12] 1769 	mov	a,#(___str_16 >> 8)
      000612 C0 E0            [24] 1770 	push	acc
      000614 12r00r00         [24] 1771 	lcall	_printf_tiny
      000617 15 81            [12] 1772 	dec	sp
      000619 15 81            [12] 1773 	dec	sp
                                   1774 ;	main.c:329: reset_clock();
      00061B 12r03r54         [24] 1775 	lcall	_reset_clock
                                   1776 ;	main.c:330: lcdgotoxy(2,8);
      00061E 75*0E 08         [24] 1777 	mov	_lcdgotoxy_PARM_2,#0x08
      000621 75 82 02         [24] 1778 	mov	dpl,#0x02
      000624 12r00r66         [24] 1779 	lcall	_lcdgotoxy
                                   1780 ;	main.c:331: lcdputch(' ');
      000627 75 82 20         [24] 1781 	mov	dpl,#0x20
      00062A 12r00rB2         [24] 1782 	lcall	_lcdputch
                                   1783 ;	main.c:332: lcdgotoxy(3,8);
      00062D 75*0E 08         [24] 1784 	mov	_lcdgotoxy_PARM_2,#0x08
      000630 75 82 03         [24] 1785 	mov	dpl,#0x03
      000633 12r00r66         [24] 1786 	lcall	_lcdgotoxy
                                   1787 ;	main.c:333: lcdputch(' ');
      000636 75 82 20         [24] 1788 	mov	dpl,#0x20
      000639 12r00rB2         [24] 1789 	lcall	_lcdputch
                                   1790 ;	main.c:334: lcdgotoxy(4,6);
      00063C 75*0E 06         [24] 1791 	mov	_lcdgotoxy_PARM_2,#0x06
      00063F 75 82 04         [24] 1792 	mov	dpl,#0x04
      000642 12r00r66         [24] 1793 	lcall	_lcdgotoxy
                                   1794 ;	main.c:335: lcdputch(indicator);
      000645 75 82 3C         [24] 1795 	mov	dpl,#0x3c
      000648 12r00rB2         [24] 1796 	lcall	_lcdputch
                                   1797 ;	main.c:336: if(clockrun_flag){
      00064B E5*0C            [12] 1798 	mov	a,_clockrun_flag
      00064D 45*0D            [12] 1799 	orl	a,(_clockrun_flag + 1)
      00064F 60 12            [24] 1800 	jz	00111$
                                   1801 ;	main.c:337: lcdgotoxy(2,8);
      000651 75*0E 08         [24] 1802 	mov	_lcdgotoxy_PARM_2,#0x08
      000654 75 82 02         [24] 1803 	mov	dpl,#0x02
      000657 12r00r66         [24] 1804 	lcall	_lcdgotoxy
                                   1805 ;	main.c:338: lcdputch(indicator);
      00065A 75 82 3C         [24] 1806 	mov	dpl,#0x3c
      00065D 12r00rB2         [24] 1807 	lcall	_lcdputch
      000660 02r05r1E         [24] 1808 	ljmp	00116$
      000663                       1809 00111$:
                                   1810 ;	main.c:340: lcdgotoxy(3,8);
      000663 75*0E 08         [24] 1811 	mov	_lcdgotoxy_PARM_2,#0x08
      000666 75 82 03         [24] 1812 	mov	dpl,#0x03
      000669 12r00r66         [24] 1813 	lcall	_lcdgotoxy
                                   1814 ;	main.c:341: lcdputch(indicator);
      00066C 75 82 3C         [24] 1815 	mov	dpl,#0x3c
      00066F 12r00rB2         [24] 1816 	lcall	_lcdputch
                                   1817 ;	main.c:343: break;
                                   1818 ;	main.c:346: }
                                   1819 ;	main.c:348: }
      000672 02r05r1E         [24] 1820 	ljmp	00116$
                                   1821 	.area CSEG    (CODE)
                                   1822 	.area CONST   (CODE)
                                   1823 	.area CONST   (CODE)
      000000                       1824 ___str_0:
      000000 74 65 73 74 5F 66 75  1825 	.ascii "test_functionality start"
             6E 63 74 69 6F 6E 61
             6C 69 74 79 20 73 74
             61 72 74
      000018 0A                    1826 	.db 0x0a
      000019 0D                    1827 	.db 0x0d
      00001A 00                    1828 	.db 0x00
                                   1829 	.area CSEG    (CODE)
                                   1830 	.area CONST   (CODE)
      00001B                       1831 ___str_1:
      00001B 41 42 43 44 45 46 47  1832 	.ascii "ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789abcdefghijklmnopqrstuvwxy"
             48 49 4A 4B 4C 4D 4E
             4F 50 51 52 53 54 55
             56 57 58 59 5A 31 32
             33 34 35 36 37 38 39
             61 62 63 64 65 66 67
             68 69 6A 6B 6C 6D 6E
             6F 70 71 72 73 74 75
             76 77 78 79
      000057 7A 4A 49 54 48 55     1833 	.ascii "zJITHU"
      00005D 00                    1834 	.db 0x00
                                   1835 	.area CSEG    (CODE)
                                   1836 	.area CONST   (CODE)
      00005E                       1837 ___str_2:
      00005E 74 65 73 74 5F 66 75  1838 	.ascii "test_functionality end"
             6E 63 74 69 6F 6E 61
             6C 69 74 79 20 65 6E
             64
      000074 0A                    1839 	.db 0x0a
      000075 0D                    1840 	.db 0x0d
      000076 00                    1841 	.db 0x00
                                   1842 	.area CSEG    (CODE)
                                   1843 	.area CONST   (CODE)
      000077                       1844 ___str_3:
      000077 2A 2A 2A 2A 2A 2A 2A  1845 	.ascii "************************************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      0000B3 2A 2A 2A 2A 2A 2A 2A  1846 	.ascii "*************"
             2A 2A 2A 2A 2A 2A
      0000C0 0A                    1847 	.db 0x0a
      0000C1 0D                    1848 	.db 0x0d
      0000C2 00                    1849 	.db 0x00
                                   1850 	.area CSEG    (CODE)
                                   1851 	.area CONST   (CODE)
      0000C3                       1852 ___str_4:
      0000C3 43 4C 4F 43 4B 20 4D  1853 	.ascii "CLOCK MENU:"
             45 4E 55 3A
      0000CE 0A                    1854 	.db 0x0a
      0000CF 0D                    1855 	.db 0x0d
      0000D0 00                    1856 	.db 0x00
                                   1857 	.area CSEG    (CODE)
                                   1858 	.area CONST   (CODE)
      0000D1                       1859 ___str_5:
      0000D1 5B 61 5D 2E 20 43 6C  1860 	.ascii "[a]. Clock restart"
             6F 63 6B 20 72 65 73
             74 61 72 74
      0000E3 0A                    1861 	.db 0x0a
      0000E4 0D                    1862 	.db 0x0d
      0000E5 00                    1863 	.db 0x00
                                   1864 	.area CSEG    (CODE)
                                   1865 	.area CONST   (CODE)
      0000E6                       1866 ___str_6:
      0000E6 5B 62 5D 2E 20 43 6C  1867 	.ascii "[b]. Clock stop"
             6F 63 6B 20 73 74 6F
             70
      0000F5 0A                    1868 	.db 0x0a
      0000F6 0D                    1869 	.db 0x0d
      0000F7 00                    1870 	.db 0x00
                                   1871 	.area CSEG    (CODE)
                                   1872 	.area CONST   (CODE)
      0000F8                       1873 ___str_7:
      0000F8 5B 63 5D 2E 20 43 6C  1874 	.ascii "[c]. Clock reset"
             6F 63 6B 20 72 65 73
             65 74
      000108 0A                    1875 	.db 0x0a
      000109 0D                    1876 	.db 0x0d
      00010A 00                    1877 	.db 0x00
                                   1878 	.area CSEG    (CODE)
                                   1879 	.area CONST   (CODE)
      00010B                       1880 ___str_8:
      00010B 43 6C 6F 63 6B 20 73  1881 	.ascii "Clock status:"
             74 61 74 75 73 3A
      000118 00                    1882 	.db 0x00
                                   1883 	.area CSEG    (CODE)
                                   1884 	.area CONST   (CODE)
      000119                       1885 ___str_9:
      000119 52 75 6E 6E 69 6E 67  1886 	.ascii "Running"
      000120 00                    1887 	.db 0x00
                                   1888 	.area CSEG    (CODE)
                                   1889 	.area CONST   (CODE)
      000121                       1890 ___str_10:
      000121 53 74 6F 70 70 65 64  1891 	.ascii "Stopped"
      000128 00                    1892 	.db 0x00
                                   1893 	.area CSEG    (CODE)
                                   1894 	.area CONST   (CODE)
      000129                       1895 ___str_11:
      000129 52 65 73 65 74        1896 	.ascii "Reset"
      00012E 00                    1897 	.db 0x00
                                   1898 	.area CSEG    (CODE)
                                   1899 	.area CONST   (CODE)
      00012F                       1900 ___str_12:
      00012F 50 6C 65 61 73 65 20  1901 	.ascii "Please enter commands in small cases"
             65 6E 74 65 72 20 63
             6F 6D 6D 61 6E 64 73
             20 69 6E 20 73 6D 61
             6C 6C 20 63 61 73 65
             73
      000153 0A                    1902 	.db 0x0a
      000154 0D                    1903 	.db 0x0d
      000155 00                    1904 	.db 0x00
                                   1905 	.area CSEG    (CODE)
                                   1906 	.area CONST   (CODE)
      000156                       1907 ___str_13:
      000156 0A                    1908 	.db 0x0a
      000157 0D                    1909 	.db 0x0d
      000158 00                    1910 	.db 0x00
                                   1911 	.area CSEG    (CODE)
                                   1912 	.area CONST   (CODE)
      000159                       1913 ___str_14:
      000159 52 65 73 74 61 72 74  1914 	.ascii "Restarting clock"
             69 6E 67 20 63 6C 6F
             63 6B
      000169 0A                    1915 	.db 0x0a
      00016A 0D                    1916 	.db 0x0d
      00016B 00                    1917 	.db 0x00
                                   1918 	.area CSEG    (CODE)
                                   1919 	.area CONST   (CODE)
      00016C                       1920 ___str_15:
      00016C 53 74 6F 70 70 69 6E  1921 	.ascii "Stopping clock"
             67 20 63 6C 6F 63 6B
      00017A 0A                    1922 	.db 0x0a
      00017B 0D                    1923 	.db 0x0d
      00017C 00                    1924 	.db 0x00
                                   1925 	.area CSEG    (CODE)
                                   1926 	.area CONST   (CODE)
      00017D                       1927 ___str_16:
      00017D 52 65 73 65 74 74 69  1928 	.ascii "Resetting clock"
             6E 67 20 63 6C 6F 63
             6B
      00018C 0A                    1929 	.db 0x0a
      00018D 0D                    1930 	.db 0x0d
      00018E 00                    1931 	.db 0x00
                                   1932 	.area CSEG    (CODE)
                                   1933 	.area XINIT   (CODE)
      000000                       1934 __xinit__db:
      000000 00                    1935 	.db #0x00	; 0
                                   1936 	.area CABS    (ABS,CODE)
