                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___sdcc_heap_size
                                     12 	.globl _main
                                     13 	.globl __sdcc_external_startup
                                     14 	.globl _get_buffer_size
                                     15 	.globl _echo
                                     16 	.globl _free
                                     17 	.globl _malloc
                                     18 	.globl _printf
                                     19 	.globl _TF1
                                     20 	.globl _TR1
                                     21 	.globl _TF0
                                     22 	.globl _TR0
                                     23 	.globl _IE1
                                     24 	.globl _IT1
                                     25 	.globl _IE0
                                     26 	.globl _IT0
                                     27 	.globl _SM0
                                     28 	.globl _SM1
                                     29 	.globl _SM2
                                     30 	.globl _REN
                                     31 	.globl _TB8
                                     32 	.globl _RB8
                                     33 	.globl _TI
                                     34 	.globl _RI
                                     35 	.globl _CY
                                     36 	.globl _AC
                                     37 	.globl _F0
                                     38 	.globl _RS1
                                     39 	.globl _RS0
                                     40 	.globl _OV
                                     41 	.globl _F1
                                     42 	.globl _P
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD0
                                     50 	.globl _TXD
                                     51 	.globl _RXD0
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _P2_7
                                     62 	.globl _P2_6
                                     63 	.globl _P2_5
                                     64 	.globl _P2_4
                                     65 	.globl _P2_3
                                     66 	.globl _P2_2
                                     67 	.globl _P2_1
                                     68 	.globl _P2_0
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _P0_7
                                     78 	.globl _P0_6
                                     79 	.globl _P0_5
                                     80 	.globl _P0_4
                                     81 	.globl _P0_3
                                     82 	.globl _P0_2
                                     83 	.globl _P0_1
                                     84 	.globl _P0_0
                                     85 	.globl _PS
                                     86 	.globl _PT1
                                     87 	.globl _PX1
                                     88 	.globl _PT0
                                     89 	.globl _PX0
                                     90 	.globl _EA
                                     91 	.globl _ES
                                     92 	.globl _ET1
                                     93 	.globl _EX1
                                     94 	.globl _ET0
                                     95 	.globl _EX0
                                     96 	.globl _BREG_F7
                                     97 	.globl _BREG_F6
                                     98 	.globl _BREG_F5
                                     99 	.globl _BREG_F4
                                    100 	.globl _BREG_F3
                                    101 	.globl _BREG_F2
                                    102 	.globl _BREG_F1
                                    103 	.globl _BREG_F0
                                    104 	.globl _P5_7
                                    105 	.globl _P5_6
                                    106 	.globl _P5_5
                                    107 	.globl _P5_4
                                    108 	.globl _P5_3
                                    109 	.globl _P5_2
                                    110 	.globl _P5_1
                                    111 	.globl _P5_0
                                    112 	.globl _P4_7
                                    113 	.globl _P4_6
                                    114 	.globl _P4_5
                                    115 	.globl _P4_4
                                    116 	.globl _P4_3
                                    117 	.globl _P4_2
                                    118 	.globl _P4_1
                                    119 	.globl _P4_0
                                    120 	.globl _PX0L
                                    121 	.globl _PT0L
                                    122 	.globl _PX1L
                                    123 	.globl _PT1L
                                    124 	.globl _PSL
                                    125 	.globl _PT2L
                                    126 	.globl _PPCL
                                    127 	.globl _EC
                                    128 	.globl _CCF0
                                    129 	.globl _CCF1
                                    130 	.globl _CCF2
                                    131 	.globl _CCF3
                                    132 	.globl _CCF4
                                    133 	.globl _CR
                                    134 	.globl _CF
                                    135 	.globl _TF2
                                    136 	.globl _EXF2
                                    137 	.globl _RCLK
                                    138 	.globl _TCLK
                                    139 	.globl _EXEN2
                                    140 	.globl _TR2
                                    141 	.globl _C_T2
                                    142 	.globl _CP_RL2
                                    143 	.globl _T2CON_7
                                    144 	.globl _T2CON_6
                                    145 	.globl _T2CON_5
                                    146 	.globl _T2CON_4
                                    147 	.globl _T2CON_3
                                    148 	.globl _T2CON_2
                                    149 	.globl _T2CON_1
                                    150 	.globl _T2CON_0
                                    151 	.globl _PT2
                                    152 	.globl _ET2
                                    153 	.globl _TMOD
                                    154 	.globl _TL1
                                    155 	.globl _TL0
                                    156 	.globl _TH1
                                    157 	.globl _TH0
                                    158 	.globl _TCON
                                    159 	.globl _SP
                                    160 	.globl _SCON
                                    161 	.globl _SBUF0
                                    162 	.globl _SBUF
                                    163 	.globl _PSW
                                    164 	.globl _PCON
                                    165 	.globl _P3
                                    166 	.globl _P2
                                    167 	.globl _P1
                                    168 	.globl _P0
                                    169 	.globl _IP
                                    170 	.globl _IE
                                    171 	.globl _DP0L
                                    172 	.globl _DPL
                                    173 	.globl _DP0H
                                    174 	.globl _DPH
                                    175 	.globl _B
                                    176 	.globl _ACC
                                    177 	.globl _EECON
                                    178 	.globl _KBF
                                    179 	.globl _KBE
                                    180 	.globl _KBLS
                                    181 	.globl _BRL
                                    182 	.globl _BDRCON
                                    183 	.globl _T2MOD
                                    184 	.globl _SPDAT
                                    185 	.globl _SPSTA
                                    186 	.globl _SPCON
                                    187 	.globl _SADEN
                                    188 	.globl _SADDR
                                    189 	.globl _WDTPRG
                                    190 	.globl _WDTRST
                                    191 	.globl _P5
                                    192 	.globl _P4
                                    193 	.globl _IPH1
                                    194 	.globl _IPL1
                                    195 	.globl _IPH0
                                    196 	.globl _IPL0
                                    197 	.globl _IEN1
                                    198 	.globl _IEN0
                                    199 	.globl _CMOD
                                    200 	.globl _CL
                                    201 	.globl _CH
                                    202 	.globl _CCON
                                    203 	.globl _CCAPM4
                                    204 	.globl _CCAPM3
                                    205 	.globl _CCAPM2
                                    206 	.globl _CCAPM1
                                    207 	.globl _CCAPM0
                                    208 	.globl _CCAP4L
                                    209 	.globl _CCAP3L
                                    210 	.globl _CCAP2L
                                    211 	.globl _CCAP1L
                                    212 	.globl _CCAP0L
                                    213 	.globl _CCAP4H
                                    214 	.globl _CCAP3H
                                    215 	.globl _CCAP2H
                                    216 	.globl _CCAP1H
                                    217 	.globl _CCAP0H
                                    218 	.globl _CKCON1
                                    219 	.globl _CKCON0
                                    220 	.globl _CKRL
                                    221 	.globl _AUXR1
                                    222 	.globl _AUXR
                                    223 	.globl _TH2
                                    224 	.globl _TL2
                                    225 	.globl _RCAP2H
                                    226 	.globl _RCAP2L
                                    227 	.globl _T2CON
                                    228 	.globl ___sdcc_heap
                                    229 ;--------------------------------------------------------
                                    230 ; special function registers
                                    231 ;--------------------------------------------------------
                                    232 	.area RSEG    (ABS,DATA)
      000000                        233 	.org 0x0000
                           0000C8   234 _T2CON	=	0x00c8
                           0000CA   235 _RCAP2L	=	0x00ca
                           0000CB   236 _RCAP2H	=	0x00cb
                           0000CC   237 _TL2	=	0x00cc
                           0000CD   238 _TH2	=	0x00cd
                           00008E   239 _AUXR	=	0x008e
                           0000A2   240 _AUXR1	=	0x00a2
                           000097   241 _CKRL	=	0x0097
                           00008F   242 _CKCON0	=	0x008f
                           0000AF   243 _CKCON1	=	0x00af
                           0000FA   244 _CCAP0H	=	0x00fa
                           0000FB   245 _CCAP1H	=	0x00fb
                           0000FC   246 _CCAP2H	=	0x00fc
                           0000FD   247 _CCAP3H	=	0x00fd
                           0000FE   248 _CCAP4H	=	0x00fe
                           0000EA   249 _CCAP0L	=	0x00ea
                           0000EB   250 _CCAP1L	=	0x00eb
                           0000EC   251 _CCAP2L	=	0x00ec
                           0000ED   252 _CCAP3L	=	0x00ed
                           0000EE   253 _CCAP4L	=	0x00ee
                           0000DA   254 _CCAPM0	=	0x00da
                           0000DB   255 _CCAPM1	=	0x00db
                           0000DC   256 _CCAPM2	=	0x00dc
                           0000DD   257 _CCAPM3	=	0x00dd
                           0000DE   258 _CCAPM4	=	0x00de
                           0000D8   259 _CCON	=	0x00d8
                           0000F9   260 _CH	=	0x00f9
                           0000E9   261 _CL	=	0x00e9
                           0000D9   262 _CMOD	=	0x00d9
                           0000A8   263 _IEN0	=	0x00a8
                           0000B1   264 _IEN1	=	0x00b1
                           0000B8   265 _IPL0	=	0x00b8
                           0000B7   266 _IPH0	=	0x00b7
                           0000B2   267 _IPL1	=	0x00b2
                           0000B3   268 _IPH1	=	0x00b3
                           0000C0   269 _P4	=	0x00c0
                           0000E8   270 _P5	=	0x00e8
                           0000A6   271 _WDTRST	=	0x00a6
                           0000A7   272 _WDTPRG	=	0x00a7
                           0000A9   273 _SADDR	=	0x00a9
                           0000B9   274 _SADEN	=	0x00b9
                           0000C3   275 _SPCON	=	0x00c3
                           0000C4   276 _SPSTA	=	0x00c4
                           0000C5   277 _SPDAT	=	0x00c5
                           0000C9   278 _T2MOD	=	0x00c9
                           00009B   279 _BDRCON	=	0x009b
                           00009A   280 _BRL	=	0x009a
                           00009C   281 _KBLS	=	0x009c
                           00009D   282 _KBE	=	0x009d
                           00009E   283 _KBF	=	0x009e
                           0000D2   284 _EECON	=	0x00d2
                           0000E0   285 _ACC	=	0x00e0
                           0000F0   286 _B	=	0x00f0
                           000083   287 _DPH	=	0x0083
                           000083   288 _DP0H	=	0x0083
                           000082   289 _DPL	=	0x0082
                           000082   290 _DP0L	=	0x0082
                           0000A8   291 _IE	=	0x00a8
                           0000B8   292 _IP	=	0x00b8
                           000080   293 _P0	=	0x0080
                           000090   294 _P1	=	0x0090
                           0000A0   295 _P2	=	0x00a0
                           0000B0   296 _P3	=	0x00b0
                           000087   297 _PCON	=	0x0087
                           0000D0   298 _PSW	=	0x00d0
                           000099   299 _SBUF	=	0x0099
                           000099   300 _SBUF0	=	0x0099
                           000098   301 _SCON	=	0x0098
                           000081   302 _SP	=	0x0081
                           000088   303 _TCON	=	0x0088
                           00008C   304 _TH0	=	0x008c
                           00008D   305 _TH1	=	0x008d
                           00008A   306 _TL0	=	0x008a
                           00008B   307 _TL1	=	0x008b
                           000089   308 _TMOD	=	0x0089
                                    309 ;--------------------------------------------------------
                                    310 ; special function bits
                                    311 ;--------------------------------------------------------
                                    312 	.area RSEG    (ABS,DATA)
      000000                        313 	.org 0x0000
                           0000AD   314 _ET2	=	0x00ad
                           0000BD   315 _PT2	=	0x00bd
                           0000C8   316 _T2CON_0	=	0x00c8
                           0000C9   317 _T2CON_1	=	0x00c9
                           0000CA   318 _T2CON_2	=	0x00ca
                           0000CB   319 _T2CON_3	=	0x00cb
                           0000CC   320 _T2CON_4	=	0x00cc
                           0000CD   321 _T2CON_5	=	0x00cd
                           0000CE   322 _T2CON_6	=	0x00ce
                           0000CF   323 _T2CON_7	=	0x00cf
                           0000C8   324 _CP_RL2	=	0x00c8
                           0000C9   325 _C_T2	=	0x00c9
                           0000CA   326 _TR2	=	0x00ca
                           0000CB   327 _EXEN2	=	0x00cb
                           0000CC   328 _TCLK	=	0x00cc
                           0000CD   329 _RCLK	=	0x00cd
                           0000CE   330 _EXF2	=	0x00ce
                           0000CF   331 _TF2	=	0x00cf
                           0000DF   332 _CF	=	0x00df
                           0000DE   333 _CR	=	0x00de
                           0000DC   334 _CCF4	=	0x00dc
                           0000DB   335 _CCF3	=	0x00db
                           0000DA   336 _CCF2	=	0x00da
                           0000D9   337 _CCF1	=	0x00d9
                           0000D8   338 _CCF0	=	0x00d8
                           0000AE   339 _EC	=	0x00ae
                           0000BE   340 _PPCL	=	0x00be
                           0000BD   341 _PT2L	=	0x00bd
                           0000BC   342 _PSL	=	0x00bc
                           0000BB   343 _PT1L	=	0x00bb
                           0000BA   344 _PX1L	=	0x00ba
                           0000B9   345 _PT0L	=	0x00b9
                           0000B8   346 _PX0L	=	0x00b8
                           0000C0   347 _P4_0	=	0x00c0
                           0000C1   348 _P4_1	=	0x00c1
                           0000C2   349 _P4_2	=	0x00c2
                           0000C3   350 _P4_3	=	0x00c3
                           0000C4   351 _P4_4	=	0x00c4
                           0000C5   352 _P4_5	=	0x00c5
                           0000C6   353 _P4_6	=	0x00c6
                           0000C7   354 _P4_7	=	0x00c7
                           0000E8   355 _P5_0	=	0x00e8
                           0000E9   356 _P5_1	=	0x00e9
                           0000EA   357 _P5_2	=	0x00ea
                           0000EB   358 _P5_3	=	0x00eb
                           0000EC   359 _P5_4	=	0x00ec
                           0000ED   360 _P5_5	=	0x00ed
                           0000EE   361 _P5_6	=	0x00ee
                           0000EF   362 _P5_7	=	0x00ef
                           0000F0   363 _BREG_F0	=	0x00f0
                           0000F1   364 _BREG_F1	=	0x00f1
                           0000F2   365 _BREG_F2	=	0x00f2
                           0000F3   366 _BREG_F3	=	0x00f3
                           0000F4   367 _BREG_F4	=	0x00f4
                           0000F5   368 _BREG_F5	=	0x00f5
                           0000F6   369 _BREG_F6	=	0x00f6
                           0000F7   370 _BREG_F7	=	0x00f7
                           0000A8   371 _EX0	=	0x00a8
                           0000A9   372 _ET0	=	0x00a9
                           0000AA   373 _EX1	=	0x00aa
                           0000AB   374 _ET1	=	0x00ab
                           0000AC   375 _ES	=	0x00ac
                           0000AF   376 _EA	=	0x00af
                           0000B8   377 _PX0	=	0x00b8
                           0000B9   378 _PT0	=	0x00b9
                           0000BA   379 _PX1	=	0x00ba
                           0000BB   380 _PT1	=	0x00bb
                           0000BC   381 _PS	=	0x00bc
                           000080   382 _P0_0	=	0x0080
                           000081   383 _P0_1	=	0x0081
                           000082   384 _P0_2	=	0x0082
                           000083   385 _P0_3	=	0x0083
                           000084   386 _P0_4	=	0x0084
                           000085   387 _P0_5	=	0x0085
                           000086   388 _P0_6	=	0x0086
                           000087   389 _P0_7	=	0x0087
                           000090   390 _P1_0	=	0x0090
                           000091   391 _P1_1	=	0x0091
                           000092   392 _P1_2	=	0x0092
                           000093   393 _P1_3	=	0x0093
                           000094   394 _P1_4	=	0x0094
                           000095   395 _P1_5	=	0x0095
                           000096   396 _P1_6	=	0x0096
                           000097   397 _P1_7	=	0x0097
                           0000A0   398 _P2_0	=	0x00a0
                           0000A1   399 _P2_1	=	0x00a1
                           0000A2   400 _P2_2	=	0x00a2
                           0000A3   401 _P2_3	=	0x00a3
                           0000A4   402 _P2_4	=	0x00a4
                           0000A5   403 _P2_5	=	0x00a5
                           0000A6   404 _P2_6	=	0x00a6
                           0000A7   405 _P2_7	=	0x00a7
                           0000B0   406 _P3_0	=	0x00b0
                           0000B1   407 _P3_1	=	0x00b1
                           0000B2   408 _P3_2	=	0x00b2
                           0000B3   409 _P3_3	=	0x00b3
                           0000B4   410 _P3_4	=	0x00b4
                           0000B5   411 _P3_5	=	0x00b5
                           0000B6   412 _P3_6	=	0x00b6
                           0000B7   413 _P3_7	=	0x00b7
                           0000B0   414 _RXD	=	0x00b0
                           0000B0   415 _RXD0	=	0x00b0
                           0000B1   416 _TXD	=	0x00b1
                           0000B1   417 _TXD0	=	0x00b1
                           0000B2   418 _INT0	=	0x00b2
                           0000B3   419 _INT1	=	0x00b3
                           0000B4   420 _T0	=	0x00b4
                           0000B5   421 _T1	=	0x00b5
                           0000B6   422 _WR	=	0x00b6
                           0000B7   423 _RD	=	0x00b7
                           0000D0   424 _P	=	0x00d0
                           0000D1   425 _F1	=	0x00d1
                           0000D2   426 _OV	=	0x00d2
                           0000D3   427 _RS0	=	0x00d3
                           0000D4   428 _RS1	=	0x00d4
                           0000D5   429 _F0	=	0x00d5
                           0000D6   430 _AC	=	0x00d6
                           0000D7   431 _CY	=	0x00d7
                           000098   432 _RI	=	0x0098
                           000099   433 _TI	=	0x0099
                           00009A   434 _RB8	=	0x009a
                           00009B   435 _TB8	=	0x009b
                           00009C   436 _REN	=	0x009c
                           00009D   437 _SM2	=	0x009d
                           00009E   438 _SM1	=	0x009e
                           00009F   439 _SM0	=	0x009f
                           000088   440 _IT0	=	0x0088
                           000089   441 _IE0	=	0x0089
                           00008A   442 _IT1	=	0x008a
                           00008B   443 _IE1	=	0x008b
                           00008C   444 _TR0	=	0x008c
                           00008D   445 _TF0	=	0x008d
                           00008E   446 _TR1	=	0x008e
                           00008F   447 _TF1	=	0x008f
                                    448 ;--------------------------------------------------------
                                    449 ; overlayable register banks
                                    450 ;--------------------------------------------------------
                                    451 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        452 	.ds 8
                                    453 ;--------------------------------------------------------
                                    454 ; internal ram data
                                    455 ;--------------------------------------------------------
                                    456 	.area DSEG    (DATA)
      000000                        457 _main_sloc0_1_0:
      000000                        458 	.ds 4
      000004                        459 _main_sloc1_1_0:
      000004                        460 	.ds 2
      000006                        461 _main_sloc2_1_0:
      000006                        462 	.ds 2
      000008                        463 _main_sloc3_1_0:
      000008                        464 	.ds 2
      00000A                        465 _main_sloc4_1_0:
      00000A                        466 	.ds 2
      00000C                        467 _main_sloc5_1_0:
      00000C                        468 	.ds 2
      00000E                        469 _main_sloc6_1_0:
      00000E                        470 	.ds 3
                                    471 ;--------------------------------------------------------
                                    472 ; overlayable items in internal ram
                                    473 ;--------------------------------------------------------
                                    474 ;--------------------------------------------------------
                                    475 ; Stack segment in internal ram
                                    476 ;--------------------------------------------------------
                                    477 	.area	SSEG
      000000                        478 __start__stack:
      000000                        479 	.ds	1
                                    480 
                                    481 ;--------------------------------------------------------
                                    482 ; indirectly addressable internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area ISEG    (DATA)
                                    485 ;--------------------------------------------------------
                                    486 ; absolute internal ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area IABS    (ABS,DATA)
                                    489 	.area IABS    (ABS,DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; bit data
                                    492 ;--------------------------------------------------------
                                    493 	.area BSEG    (BIT)
                                    494 ;--------------------------------------------------------
                                    495 ; paged external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area PSEG    (PAG,XDATA)
                                    498 ;--------------------------------------------------------
                                    499 ; external ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area XSEG    (XDATA)
      000000                        502 ___sdcc_heap::
      000000                        503 	.ds 5000
      001388                        504 _main_buffer_array_131072_48:
      001388                        505 	.ds 60
      0013C4                        506 _main_buffer_count_131072_48:
      0013C4                        507 	.ds 2
      0013C6                        508 _main_inserted_131072_48:
      0013C6                        509 	.ds 2
      0013C8                        510 _main_since_last_131073_49:
      0013C8                        511 	.ds 2
      0013CA                        512 _main_switch_case_131074_52:
      0013CA                        513 	.ds 4
                                    514 ;--------------------------------------------------------
                                    515 ; absolute external ram data
                                    516 ;--------------------------------------------------------
                                    517 	.area XABS    (ABS,XDATA)
                                    518 ;--------------------------------------------------------
                                    519 ; external initialized ram data
                                    520 ;--------------------------------------------------------
                                    521 	.area XISEG   (XDATA)
                                    522 	.area HOME    (CODE)
                                    523 	.area GSINIT0 (CODE)
                                    524 	.area GSINIT1 (CODE)
                                    525 	.area GSINIT2 (CODE)
                                    526 	.area GSINIT3 (CODE)
                                    527 	.area GSINIT4 (CODE)
                                    528 	.area GSINIT5 (CODE)
                                    529 	.area GSINIT  (CODE)
                                    530 	.area GSFINAL (CODE)
                                    531 	.area CSEG    (CODE)
                                    532 ;--------------------------------------------------------
                                    533 ; interrupt vector
                                    534 ;--------------------------------------------------------
                                    535 	.area HOME    (CODE)
      000000                        536 __interrupt_vect:
      000000 02r00r00         [24]  537 	ljmp	__sdcc_gsinit_startup
                                    538 ;--------------------------------------------------------
                                    539 ; global & static initialisations
                                    540 ;--------------------------------------------------------
                                    541 	.area HOME    (CODE)
                                    542 	.area GSINIT  (CODE)
                                    543 	.area GSFINAL (CODE)
                                    544 	.area GSINIT  (CODE)
                                    545 	.globl __sdcc_gsinit_startup
                                    546 	.globl __sdcc_program_startup
                                    547 	.globl __start__stack
                                    548 	.globl __mcs51_genXINIT
                                    549 	.globl __mcs51_genXRAMCLEAR
                                    550 	.globl __mcs51_genRAMCLEAR
                                    551 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  552 	ljmp	__sdcc_program_startup
                                    553 ;--------------------------------------------------------
                                    554 ; Home
                                    555 ;--------------------------------------------------------
                                    556 	.area HOME    (CODE)
                                    557 	.area HOME    (CODE)
      000003                        558 __sdcc_program_startup:
      000003 02r00r07         [24]  559 	ljmp	_main
                                    560 ;	return from main will return to caller
                                    561 ;--------------------------------------------------------
                                    562 ; code
                                    563 ;--------------------------------------------------------
                                    564 	.area CSEG    (CODE)
                                    565 ;------------------------------------------------------------
                                    566 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    567 ;------------------------------------------------------------
                                    568 ;	main.c:48: _sdcc_external_startup()
                                    569 ;	-----------------------------------------
                                    570 ;	 function _sdcc_external_startup
                                    571 ;	-----------------------------------------
      000000                        572 __sdcc_external_startup:
                           000007   573 	ar7 = 0x07
                           000006   574 	ar6 = 0x06
                           000005   575 	ar5 = 0x05
                           000004   576 	ar4 = 0x04
                           000003   577 	ar3 = 0x03
                           000002   578 	ar2 = 0x02
                           000001   579 	ar1 = 0x01
                           000000   580 	ar0 = 0x00
                                    581 ;	main.c:50: AUXR |= (XRS1 | XRS0); // Configure XRAM
      000000 43 8E 0C         [24]  582 	orl	_AUXR,#0x0c
                                    583 ;	main.c:51: return 0;
      000003 90 00 00         [24]  584 	mov	dptr,#0x0000
                                    585 ;	main.c:52: }
      000006 22               [24]  586 	ret
                                    587 ;------------------------------------------------------------
                                    588 ;Allocation info for local variables in function 'main'
                                    589 ;------------------------------------------------------------
                                    590 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    591 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    592 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    593 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    594 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    595 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    596 ;sloc6                     Allocated with name '_main_sloc6_1_0'
                                    597 ;buffer_array              Allocated with name '_main_buffer_array_131072_48'
                                    598 ;user_input_1              Allocated with name '_main_user_input_1_131072_48'
                                    599 ;user_input_2              Allocated with name '_main_user_input_2_131072_48'
                                    600 ;buffer_count              Allocated with name '_main_buffer_count_131072_48'
                                    601 ;buffer_0_index            Allocated with name '_main_buffer_0_index_131072_48'
                                    602 ;divisible                 Allocated with name '_main_divisible_131072_48'
                                    603 ;inserted                  Allocated with name '_main_inserted_131072_48'
                                    604 ;since_last                Allocated with name '_main_since_last_131073_49'
                                    605 ;switch_case               Allocated with name '_main_switch_case_131074_52'
                                    606 ;char_received             Allocated with name '_main_char_received_196610_53'
                                    607 ;index                     Allocated with name '_main_index_327682_73'
                                    608 ;index                     Allocated with name '_main_index_327682_82'
                                    609 ;j                         Allocated with name '_main_j_524290_86'
                                    610 ;k                         Allocated with name '_main_k_327682_89'
                                    611 ;l                         Allocated with name '_main_l_196610_92'
                                    612 ;------------------------------------------------------------
                                    613 ;	main.c:57: void main(void)
                                    614 ;	-----------------------------------------
                                    615 ;	 function main
                                    616 ;	-----------------------------------------
      000007                        617 _main:
                                    618 ;	main.c:59: while (1) {
      000007                        619 00185$:
                                    620 ;	main.c:66: int inserted = 0;
      000007 90r13rC6         [24]  621 	mov	dptr,#_main_inserted_131072_48
      00000A E4               [12]  622 	clr	a
      00000B F0               [24]  623 	movx	@dptr,a
      00000C A3               [24]  624 	inc	dptr
      00000D F0               [24]  625 	movx	@dptr,a
                                    626 ;	main.c:67: total_characters_count = 0;
      00000E 90r00r00         [24]  627 	mov	dptr,#_total_characters_count
      000011 F0               [24]  628 	movx	@dptr,a
      000012 A3               [24]  629 	inc	dptr
      000013 F0               [24]  630 	movx	@dptr,a
                                    631 ;	main.c:68: int since_last = total_characters_count;
      000014 90r13rC8         [24]  632 	mov	dptr,#_main_since_last_131073_49
      000017 F0               [24]  633 	movx	@dptr,a
      000018 A3               [24]  634 	inc	dptr
      000019 F0               [24]  635 	movx	@dptr,a
                                    636 ;	main.c:71: printf("Specify the buffer size (range 32 to 4800) divisible by 16: \n\r");
      00001A 74r02            [12]  637 	mov	a,#___str_0
      00001C C0 E0            [24]  638 	push	acc
      00001E 74s00            [12]  639 	mov	a,#(___str_0 >> 8)
      000020 C0 E0            [24]  640 	push	acc
      000022 74 80            [12]  641 	mov	a,#0x80
      000024 C0 E0            [24]  642 	push	acc
      000026 12r00r00         [24]  643 	lcall	_printf
      000029 15 81            [12]  644 	dec	sp
      00002B 15 81            [12]  645 	dec	sp
      00002D 15 81            [12]  646 	dec	sp
                                    647 ;	main.c:72: user_input_1 = get_buffer_size(32, 4800, DIVISIBLE);
      00002F 90r00r00         [24]  648 	mov	dptr,#_get_buffer_size_PARM_2
      000032 74 C0            [12]  649 	mov	a,#0xc0
      000034 F0               [24]  650 	movx	@dptr,a
      000035 74 12            [12]  651 	mov	a,#0x12
      000037 A3               [24]  652 	inc	dptr
      000038 F0               [24]  653 	movx	@dptr,a
      000039 E4               [12]  654 	clr	a
      00003A A3               [24]  655 	inc	dptr
      00003B F0               [24]  656 	movx	@dptr,a
      00003C A3               [24]  657 	inc	dptr
      00003D F0               [24]  658 	movx	@dptr,a
      00003E 90r00r00         [24]  659 	mov	dptr,#_get_buffer_size_PARM_3
      000041 74 10            [12]  660 	mov	a,#0x10
      000043 F0               [24]  661 	movx	@dptr,a
      000044 E4               [12]  662 	clr	a
      000045 A3               [24]  663 	inc	dptr
      000046 F0               [24]  664 	movx	@dptr,a
      000047 A3               [24]  665 	inc	dptr
      000048 F0               [24]  666 	movx	@dptr,a
      000049 A3               [24]  667 	inc	dptr
      00004A F0               [24]  668 	movx	@dptr,a
      00004B 90 00 20         [24]  669 	mov	dptr,#(0x20&0x00ff)
      00004E E4               [12]  670 	clr	a
      00004F F5 F0            [12]  671 	mov	b,a
      000051 12r00r00         [24]  672 	lcall	_get_buffer_size
      000054 85 82*08         [24]  673 	mov	_main_sloc3_1_0,dpl
      000057 85 83*09         [24]  674 	mov	(_main_sloc3_1_0 + 1),dph
                                    675 ;	main.c:75: buffer_array[buffer_count].buffer_pointer = (uint8_t *)malloc(user_input_1 * sizeof(uint8_t));
      00005A AC*08            [24]  676 	mov	r4,_main_sloc3_1_0
      00005C AD*09            [24]  677 	mov	r5,(_main_sloc3_1_0 + 1)
      00005E 8C 82            [24]  678 	mov	dpl,r4
      000060 8D 83            [24]  679 	mov	dph,r5
      000062 C0 05            [24]  680 	push	ar5
      000064 C0 04            [24]  681 	push	ar4
      000066 12r00r00         [24]  682 	lcall	_malloc
      000069 AA 82            [24]  683 	mov	r2,dpl
      00006B AB 83            [24]  684 	mov	r3,dph
      00006D D0 04            [24]  685 	pop	ar4
      00006F D0 05            [24]  686 	pop	ar5
      000071 90r13r88         [24]  687 	mov	dptr,#_main_buffer_array_131072_48
      000074 EA               [12]  688 	mov	a,r2
      000075 F0               [24]  689 	movx	@dptr,a
      000076 EB               [12]  690 	mov	a,r3
      000077 A3               [24]  691 	inc	dptr
      000078 F0               [24]  692 	movx	@dptr,a
                                    693 ;	main.c:76: if (buffer_array[buffer_count].buffer_pointer == NULL) {
      000079 EA               [12]  694 	mov	a,r2
      00007A 4B               [12]  695 	orl	a,r3
      00007B 70 18            [24]  696 	jnz	00102$
                                    697 ;	main.c:77: printf("Failed to allocate memory\n\r");
      00007D 74r41            [12]  698 	mov	a,#___str_1
      00007F C0 E0            [24]  699 	push	acc
      000081 74s00            [12]  700 	mov	a,#(___str_1 >> 8)
      000083 C0 E0            [24]  701 	push	acc
      000085 74 80            [12]  702 	mov	a,#0x80
      000087 C0 E0            [24]  703 	push	acc
      000089 12r00r00         [24]  704 	lcall	_printf
      00008C 15 81            [12]  705 	dec	sp
      00008E 15 81            [12]  706 	dec	sp
      000090 15 81            [12]  707 	dec	sp
                                    708 ;	main.c:78: continue;
      000092 02r00r07         [24]  709 	ljmp	00185$
      000095                        710 00102$:
                                    711 ;	main.c:80: buffer_array[buffer_count].buffer_size = user_input_1;
      000095 90r13r8A         [24]  712 	mov	dptr,#(_main_buffer_array_131072_48 + 0x0002)
      000098 E5*08            [12]  713 	mov	a,_main_sloc3_1_0
      00009A F0               [24]  714 	movx	@dptr,a
      00009B E5*09            [12]  715 	mov	a,(_main_sloc3_1_0 + 1)
      00009D A3               [24]  716 	inc	dptr
      00009E F0               [24]  717 	movx	@dptr,a
                                    718 ;	main.c:81: buffer_array[buffer_count].buffer_occupied = 0;
      00009F 90r13r8C         [24]  719 	mov	dptr,#(_main_buffer_array_131072_48 + 0x0004)
      0000A2 E4               [12]  720 	clr	a
      0000A3 F0               [24]  721 	movx	@dptr,a
      0000A4 A3               [24]  722 	inc	dptr
      0000A5 F0               [24]  723 	movx	@dptr,a
                                    724 ;	main.c:85: buffer_array[buffer_count].buffer_pointer = (uint8_t *)malloc(user_input_1 * sizeof(uint8_t));
      0000A6 8C 82            [24]  725 	mov	dpl,r4
      0000A8 8D 83            [24]  726 	mov	dph,r5
      0000AA 12r00r00         [24]  727 	lcall	_malloc
      0000AD AC 82            [24]  728 	mov	r4,dpl
      0000AF AD 83            [24]  729 	mov	r5,dph
      0000B1 90r13r8E         [24]  730 	mov	dptr,#(_main_buffer_array_131072_48 + 0x0006)
      0000B4 EC               [12]  731 	mov	a,r4
      0000B5 F0               [24]  732 	movx	@dptr,a
      0000B6 ED               [12]  733 	mov	a,r5
      0000B7 A3               [24]  734 	inc	dptr
      0000B8 F0               [24]  735 	movx	@dptr,a
                                    736 ;	main.c:86: if (buffer_array[buffer_count].buffer_pointer == NULL) {
      0000B9 EC               [12]  737 	mov	a,r4
      0000BA 4D               [12]  738 	orl	a,r5
      0000BB 70 32            [24]  739 	jnz	00104$
                                    740 ;	main.c:87: printf("Failed to allocate memory\n\r");
      0000BD 74r41            [12]  741 	mov	a,#___str_1
      0000BF C0 E0            [24]  742 	push	acc
      0000C1 74s00            [12]  743 	mov	a,#(___str_1 >> 8)
      0000C3 C0 E0            [24]  744 	push	acc
      0000C5 74 80            [12]  745 	mov	a,#0x80
      0000C7 C0 E0            [24]  746 	push	acc
      0000C9 12r00r00         [24]  747 	lcall	_printf
      0000CC 15 81            [12]  748 	dec	sp
      0000CE 15 81            [12]  749 	dec	sp
      0000D0 15 81            [12]  750 	dec	sp
                                    751 ;	main.c:88: free(buffer_array[0].buffer_pointer);
      0000D2 90r13r88         [24]  752 	mov	dptr,#_main_buffer_array_131072_48
      0000D5 E0               [24]  753 	movx	a,@dptr
      0000D6 FC               [12]  754 	mov	r4,a
      0000D7 A3               [24]  755 	inc	dptr
      0000D8 E0               [24]  756 	movx	a,@dptr
      0000D9 FD               [12]  757 	mov	r5,a
      0000DA 7B 00            [12]  758 	mov	r3,#0x00
      0000DC 8C 82            [24]  759 	mov	dpl,r4
      0000DE 8D 83            [24]  760 	mov	dph,r5
      0000E0 8B F0            [24]  761 	mov	b,r3
      0000E2 12r00r00         [24]  762 	lcall	_free
                                    763 ;	main.c:89: buffer_array[0].buffer_pointer = NULL;
      0000E5 90r13r88         [24]  764 	mov	dptr,#_main_buffer_array_131072_48
      0000E8 E4               [12]  765 	clr	a
      0000E9 F0               [24]  766 	movx	@dptr,a
      0000EA A3               [24]  767 	inc	dptr
      0000EB F0               [24]  768 	movx	@dptr,a
                                    769 ;	main.c:90: continue;
      0000EC 02r00r07         [24]  770 	ljmp	00185$
      0000EF                        771 00104$:
                                    772 ;	main.c:92: buffer_array[buffer_count].buffer_size = user_input_1;
      0000EF 90r13r90         [24]  773 	mov	dptr,#(_main_buffer_array_131072_48 + 0x0008)
      0000F2 E5*08            [12]  774 	mov	a,_main_sloc3_1_0
      0000F4 F0               [24]  775 	movx	@dptr,a
      0000F5 E5*09            [12]  776 	mov	a,(_main_sloc3_1_0 + 1)
      0000F7 A3               [24]  777 	inc	dptr
      0000F8 F0               [24]  778 	movx	@dptr,a
                                    779 ;	main.c:93: buffer_array[buffer_count].buffer_occupied = 0;
      0000F9 90r13r92         [24]  780 	mov	dptr,#(_main_buffer_array_131072_48 + 0x000a)
      0000FC E4               [12]  781 	clr	a
      0000FD F0               [24]  782 	movx	@dptr,a
      0000FE A3               [24]  783 	inc	dptr
      0000FF F0               [24]  784 	movx	@dptr,a
                                    785 ;	main.c:94: buffer_count++;
      000100 90r13rC4         [24]  786 	mov	dptr,#_main_buffer_count_131072_48
      000103 74 02            [12]  787 	mov	a,#0x02
      000105 F0               [24]  788 	movx	@dptr,a
      000106 E4               [12]  789 	clr	a
      000107 A3               [24]  790 	inc	dptr
      000108 F0               [24]  791 	movx	@dptr,a
                                    792 ;	main.c:97: printf("* Enter any UPPERCASE letter to append characters into buffer 0\n\r");
      000109 74r5D            [12]  793 	mov	a,#___str_2
      00010B C0 E0            [24]  794 	push	acc
      00010D 74s00            [12]  795 	mov	a,#(___str_2 >> 8)
      00010F C0 E0            [24]  796 	push	acc
      000111 74 80            [12]  797 	mov	a,#0x80
      000113 C0 E0            [24]  798 	push	acc
      000115 12r00r00         [24]  799 	lcall	_printf
      000118 15 81            [12]  800 	dec	sp
      00011A 15 81            [12]  801 	dec	sp
      00011C 15 81            [12]  802 	dec	sp
                                    803 ;	main.c:98: printf("* Press '+' to allocate a new buffer \n\r");
      00011E 74r9F            [12]  804 	mov	a,#___str_3
      000120 C0 E0            [24]  805 	push	acc
      000122 74s00            [12]  806 	mov	a,#(___str_3 >> 8)
      000124 C0 E0            [24]  807 	push	acc
      000126 74 80            [12]  808 	mov	a,#0x80
      000128 C0 E0            [24]  809 	push	acc
      00012A 12r00r00         [24]  810 	lcall	_printf
      00012D 15 81            [12]  811 	dec	sp
      00012F 15 81            [12]  812 	dec	sp
      000131 15 81            [12]  813 	dec	sp
                                    814 ;	main.c:99: printf("* Press '-' to remove allocated buffers \n\r");
      000133 74rC7            [12]  815 	mov	a,#___str_4
      000135 C0 E0            [24]  816 	push	acc
      000137 74s00            [12]  817 	mov	a,#(___str_4 >> 8)
      000139 C0 E0            [24]  818 	push	acc
      00013B 74 80            [12]  819 	mov	a,#0x80
      00013D C0 E0            [24]  820 	push	acc
      00013F 12r00r00         [24]  821 	lcall	_printf
      000142 15 81            [12]  822 	dec	sp
      000144 15 81            [12]  823 	dec	sp
      000146 15 81            [12]  824 	dec	sp
                                    825 ;	main.c:100: printf("* Press '?' to get the heap report \n\r");
      000148 74rF2            [12]  826 	mov	a,#___str_5
      00014A C0 E0            [24]  827 	push	acc
      00014C 74s00            [12]  828 	mov	a,#(___str_5 >> 8)
      00014E C0 E0            [24]  829 	push	acc
      000150 74 80            [12]  830 	mov	a,#0x80
      000152 C0 E0            [24]  831 	push	acc
      000154 12r00r00         [24]  832 	lcall	_printf
      000157 15 81            [12]  833 	dec	sp
      000159 15 81            [12]  834 	dec	sp
      00015B 15 81            [12]  835 	dec	sp
                                    836 ;	main.c:101: printf("* Press '=' to get buffer 0 content \n\r");
      00015D 74r18            [12]  837 	mov	a,#___str_6
      00015F C0 E0            [24]  838 	push	acc
      000161 74s01            [12]  839 	mov	a,#(___str_6 >> 8)
      000163 C0 E0            [24]  840 	push	acc
      000165 74 80            [12]  841 	mov	a,#0x80
      000167 C0 E0            [24]  842 	push	acc
      000169 12r00r00         [24]  843 	lcall	_printf
      00016C 15 81            [12]  844 	dec	sp
      00016E 15 81            [12]  845 	dec	sp
      000170 15 81            [12]  846 	dec	sp
                                    847 ;	main.c:102: printf("* Press '@' to restart the program \n\r");
      000172 74r3F            [12]  848 	mov	a,#___str_7
      000174 C0 E0            [24]  849 	push	acc
      000176 74s01            [12]  850 	mov	a,#(___str_7 >> 8)
      000178 C0 E0            [24]  851 	push	acc
      00017A 74 80            [12]  852 	mov	a,#0x80
      00017C C0 E0            [24]  853 	push	acc
      00017E 12r00r00         [24]  854 	lcall	_printf
      000181 15 81            [12]  855 	dec	sp
      000183 15 81            [12]  856 	dec	sp
      000185 15 81            [12]  857 	dec	sp
                                    858 ;	main.c:104: int32_t switch_case = 0;
      000187 90r13rCA         [24]  859 	mov	dptr,#_main_switch_case_131074_52
      00018A E4               [12]  860 	clr	a
      00018B F0               [24]  861 	movx	@dptr,a
      00018C A3               [24]  862 	inc	dptr
      00018D F0               [24]  863 	movx	@dptr,a
      00018E A3               [24]  864 	inc	dptr
      00018F F0               [24]  865 	movx	@dptr,a
      000190 A3               [24]  866 	inc	dptr
      000191 F0               [24]  867 	movx	@dptr,a
                                    868 ;	main.c:107: while (1) {
      000192                        869 00181$:
                                    870 ;	main.c:108: __xdata uint8_t char_received = echo(); // Receive a character from UART
      000192 12r00r00         [24]  871 	lcall	_echo
      000195 AD 82            [24]  872 	mov	r5,dpl
                                    873 ;	main.c:111: if (((char_received >= 'A') && (char_received <= 'Z')) && !switch_case) {
      000197 8D 04            [24]  874 	mov	ar4,r5
      000199 BC 41 00         [24]  875 	cjne	r4,#0x41,00380$
      00019C                        876 00380$:
      00019C 40 2B            [24]  877 	jc	00136$
      00019E 8D 04            [24]  878 	mov	ar4,r5
      0001A0 EC               [12]  879 	mov	a,r4
      0001A1 24 A5            [12]  880 	add	a,#0xff - 0x5a
      0001A3 40 24            [24]  881 	jc	00136$
      0001A5 90r13rCA         [24]  882 	mov	dptr,#_main_switch_case_131074_52
      0001A8 E0               [24]  883 	movx	a,@dptr
      0001A9 F5 F0            [12]  884 	mov	b,a
      0001AB A3               [24]  885 	inc	dptr
      0001AC E0               [24]  886 	movx	a,@dptr
      0001AD 42 F0            [12]  887 	orl	b,a
      0001AF A3               [24]  888 	inc	dptr
      0001B0 E0               [24]  889 	movx	a,@dptr
      0001B1 42 F0            [12]  890 	orl	b,a
      0001B3 A3               [24]  891 	inc	dptr
      0001B4 E0               [24]  892 	movx	a,@dptr
      0001B5 45 F0            [12]  893 	orl	a,b
      0001B7 70 10            [24]  894 	jnz	00136$
                                    895 ;	main.c:112: switch_case = 1;
      0001B9 90r13rCA         [24]  896 	mov	dptr,#_main_switch_case_131074_52
      0001BC 74 01            [12]  897 	mov	a,#0x01
      0001BE F0               [24]  898 	movx	@dptr,a
      0001BF E4               [12]  899 	clr	a
      0001C0 A3               [24]  900 	inc	dptr
      0001C1 F0               [24]  901 	movx	@dptr,a
      0001C2 A3               [24]  902 	inc	dptr
      0001C3 F0               [24]  903 	movx	@dptr,a
      0001C4 A3               [24]  904 	inc	dptr
      0001C5 F0               [24]  905 	movx	@dptr,a
      0001C6 02r03r80         [24]  906 	ljmp	00137$
      0001C9                        907 00136$:
                                    908 ;	main.c:113: } else if (char_received == '+') {
      0001C9 BD 2B 59         [24]  909 	cjne	r5,#0x2b,00133$
                                    910 ;	main.c:114: if (!switch_case) {
      0001CC 90r13rCA         [24]  911 	mov	dptr,#_main_switch_case_131074_52
      0001CF E0               [24]  912 	movx	a,@dptr
      0001D0 F5 F0            [12]  913 	mov	b,a
      0001D2 A3               [24]  914 	inc	dptr
      0001D3 E0               [24]  915 	movx	a,@dptr
      0001D4 42 F0            [12]  916 	orl	b,a
      0001D6 A3               [24]  917 	inc	dptr
      0001D7 E0               [24]  918 	movx	a,@dptr
      0001D8 42 F0            [12]  919 	orl	b,a
      0001DA A3               [24]  920 	inc	dptr
      0001DB E0               [24]  921 	movx	a,@dptr
      0001DC 45 F0            [12]  922 	orl	a,b
      0001DE 70 29            [24]  923 	jnz	00106$
                                    924 ;	main.c:115: printf(" mode, specify buffer size (range 20 to 400): \n\r");
      0001E0 C0 05            [24]  925 	push	ar5
      0001E2 74r65            [12]  926 	mov	a,#___str_8
      0001E4 C0 E0            [24]  927 	push	acc
      0001E6 74s01            [12]  928 	mov	a,#(___str_8 >> 8)
      0001E8 C0 E0            [24]  929 	push	acc
      0001EA 74 80            [12]  930 	mov	a,#0x80
      0001EC C0 E0            [24]  931 	push	acc
      0001EE 12r00r00         [24]  932 	lcall	_printf
      0001F1 15 81            [12]  933 	dec	sp
      0001F3 15 81            [12]  934 	dec	sp
      0001F5 15 81            [12]  935 	dec	sp
      0001F7 D0 05            [24]  936 	pop	ar5
                                    937 ;	main.c:116: switch_case = 2;
      0001F9 90r13rCA         [24]  938 	mov	dptr,#_main_switch_case_131074_52
      0001FC 74 02            [12]  939 	mov	a,#0x02
      0001FE F0               [24]  940 	movx	@dptr,a
      0001FF E4               [12]  941 	clr	a
      000200 A3               [24]  942 	inc	dptr
      000201 F0               [24]  943 	movx	@dptr,a
      000202 A3               [24]  944 	inc	dptr
      000203 F0               [24]  945 	movx	@dptr,a
      000204 A3               [24]  946 	inc	dptr
      000205 F0               [24]  947 	movx	@dptr,a
      000206 02r03r80         [24]  948 	ljmp	00137$
      000209                        949 00106$:
                                    950 ;	main.c:118: printf("First exit the current mode \n\r");
      000209 C0 05            [24]  951 	push	ar5
      00020B 74r96            [12]  952 	mov	a,#___str_9
      00020D C0 E0            [24]  953 	push	acc
      00020F 74s01            [12]  954 	mov	a,#(___str_9 >> 8)
      000211 C0 E0            [24]  955 	push	acc
      000213 74 80            [12]  956 	mov	a,#0x80
      000215 C0 E0            [24]  957 	push	acc
      000217 12r00r00         [24]  958 	lcall	_printf
      00021A 15 81            [12]  959 	dec	sp
      00021C 15 81            [12]  960 	dec	sp
      00021E 15 81            [12]  961 	dec	sp
      000220 D0 05            [24]  962 	pop	ar5
      000222 02r03r80         [24]  963 	ljmp	00137$
      000225                        964 00133$:
                                    965 ;	main.c:120: } else if (char_received == '-') {
      000225 BD 2D 59         [24]  966 	cjne	r5,#0x2d,00130$
                                    967 ;	main.c:121: if (!switch_case) {
      000228 90r13rCA         [24]  968 	mov	dptr,#_main_switch_case_131074_52
      00022B E0               [24]  969 	movx	a,@dptr
      00022C F5 F0            [12]  970 	mov	b,a
      00022E A3               [24]  971 	inc	dptr
      00022F E0               [24]  972 	movx	a,@dptr
      000230 42 F0            [12]  973 	orl	b,a
      000232 A3               [24]  974 	inc	dptr
      000233 E0               [24]  975 	movx	a,@dptr
      000234 42 F0            [12]  976 	orl	b,a
      000236 A3               [24]  977 	inc	dptr
      000237 E0               [24]  978 	movx	a,@dptr
      000238 45 F0            [12]  979 	orl	a,b
      00023A 70 29            [24]  980 	jnz	00109$
                                    981 ;	main.c:122: printf(" mode, specify buffer number to destroy: \n\r");
      00023C C0 05            [24]  982 	push	ar5
      00023E 74rB5            [12]  983 	mov	a,#___str_10
      000240 C0 E0            [24]  984 	push	acc
      000242 74s01            [12]  985 	mov	a,#(___str_10 >> 8)
      000244 C0 E0            [24]  986 	push	acc
      000246 74 80            [12]  987 	mov	a,#0x80
      000248 C0 E0            [24]  988 	push	acc
      00024A 12r00r00         [24]  989 	lcall	_printf
      00024D 15 81            [12]  990 	dec	sp
      00024F 15 81            [12]  991 	dec	sp
      000251 15 81            [12]  992 	dec	sp
      000253 D0 05            [24]  993 	pop	ar5
                                    994 ;	main.c:123: switch_case = 3;
      000255 90r13rCA         [24]  995 	mov	dptr,#_main_switch_case_131074_52
      000258 74 03            [12]  996 	mov	a,#0x03
      00025A F0               [24]  997 	movx	@dptr,a
      00025B E4               [12]  998 	clr	a
      00025C A3               [24]  999 	inc	dptr
      00025D F0               [24] 1000 	movx	@dptr,a
      00025E A3               [24] 1001 	inc	dptr
      00025F F0               [24] 1002 	movx	@dptr,a
      000260 A3               [24] 1003 	inc	dptr
      000261 F0               [24] 1004 	movx	@dptr,a
      000262 02r03r80         [24] 1005 	ljmp	00137$
      000265                       1006 00109$:
                                   1007 ;	main.c:125: printf("First exit the current mode \n\r");
      000265 C0 05            [24] 1008 	push	ar5
      000267 74r96            [12] 1009 	mov	a,#___str_9
      000269 C0 E0            [24] 1010 	push	acc
      00026B 74s01            [12] 1011 	mov	a,#(___str_9 >> 8)
      00026D C0 E0            [24] 1012 	push	acc
      00026F 74 80            [12] 1013 	mov	a,#0x80
      000271 C0 E0            [24] 1014 	push	acc
      000273 12r00r00         [24] 1015 	lcall	_printf
      000276 15 81            [12] 1016 	dec	sp
      000278 15 81            [12] 1017 	dec	sp
      00027A 15 81            [12] 1018 	dec	sp
      00027C D0 05            [24] 1019 	pop	ar5
      00027E 02r03r80         [24] 1020 	ljmp	00137$
      000281                       1021 00130$:
                                   1022 ;	main.c:127: } else if (char_received == '?') {
      000281 BD 3F 59         [24] 1023 	cjne	r5,#0x3f,00127$
                                   1024 ;	main.c:128: if (!switch_case) {
      000284 90r13rCA         [24] 1025 	mov	dptr,#_main_switch_case_131074_52
      000287 E0               [24] 1026 	movx	a,@dptr
      000288 F5 F0            [12] 1027 	mov	b,a
      00028A A3               [24] 1028 	inc	dptr
      00028B E0               [24] 1029 	movx	a,@dptr
      00028C 42 F0            [12] 1030 	orl	b,a
      00028E A3               [24] 1031 	inc	dptr
      00028F E0               [24] 1032 	movx	a,@dptr
      000290 42 F0            [12] 1033 	orl	b,a
      000292 A3               [24] 1034 	inc	dptr
      000293 E0               [24] 1035 	movx	a,@dptr
      000294 45 F0            [12] 1036 	orl	a,b
      000296 70 29            [24] 1037 	jnz	00112$
                                   1038 ;	main.c:129: printf(" mode\n\r");
      000298 C0 05            [24] 1039 	push	ar5
      00029A 74rE1            [12] 1040 	mov	a,#___str_11
      00029C C0 E0            [24] 1041 	push	acc
      00029E 74s01            [12] 1042 	mov	a,#(___str_11 >> 8)
      0002A0 C0 E0            [24] 1043 	push	acc
      0002A2 74 80            [12] 1044 	mov	a,#0x80
      0002A4 C0 E0            [24] 1045 	push	acc
      0002A6 12r00r00         [24] 1046 	lcall	_printf
      0002A9 15 81            [12] 1047 	dec	sp
      0002AB 15 81            [12] 1048 	dec	sp
      0002AD 15 81            [12] 1049 	dec	sp
      0002AF D0 05            [24] 1050 	pop	ar5
                                   1051 ;	main.c:130: switch_case = 4;
      0002B1 90r13rCA         [24] 1052 	mov	dptr,#_main_switch_case_131074_52
      0002B4 74 04            [12] 1053 	mov	a,#0x04
      0002B6 F0               [24] 1054 	movx	@dptr,a
      0002B7 E4               [12] 1055 	clr	a
      0002B8 A3               [24] 1056 	inc	dptr
      0002B9 F0               [24] 1057 	movx	@dptr,a
      0002BA A3               [24] 1058 	inc	dptr
      0002BB F0               [24] 1059 	movx	@dptr,a
      0002BC A3               [24] 1060 	inc	dptr
      0002BD F0               [24] 1061 	movx	@dptr,a
      0002BE 02r03r80         [24] 1062 	ljmp	00137$
      0002C1                       1063 00112$:
                                   1064 ;	main.c:132: printf("First exit the current mode \n\r");
      0002C1 C0 05            [24] 1065 	push	ar5
      0002C3 74r96            [12] 1066 	mov	a,#___str_9
      0002C5 C0 E0            [24] 1067 	push	acc
      0002C7 74s01            [12] 1068 	mov	a,#(___str_9 >> 8)
      0002C9 C0 E0            [24] 1069 	push	acc
      0002CB 74 80            [12] 1070 	mov	a,#0x80
      0002CD C0 E0            [24] 1071 	push	acc
      0002CF 12r00r00         [24] 1072 	lcall	_printf
      0002D2 15 81            [12] 1073 	dec	sp
      0002D4 15 81            [12] 1074 	dec	sp
      0002D6 15 81            [12] 1075 	dec	sp
      0002D8 D0 05            [24] 1076 	pop	ar5
      0002DA 02r03r80         [24] 1077 	ljmp	00137$
      0002DD                       1078 00127$:
                                   1079 ;	main.c:134: } else if ((char_received == '\n') || (char_received == '\r')) {
      0002DD BD 0A 02         [24] 1080 	cjne	r5,#0x0a,00393$
      0002E0 80 03            [24] 1081 	sjmp	00122$
      0002E2                       1082 00393$:
      0002E2 BD 0D 26         [24] 1083 	cjne	r5,#0x0d,00123$
      0002E5                       1084 00122$:
                                   1085 ;	main.c:135: printf("\n\r");
      0002E5 C0 05            [24] 1086 	push	ar5
      0002E7 74rE9            [12] 1087 	mov	a,#___str_12
      0002E9 C0 E0            [24] 1088 	push	acc
      0002EB 74s01            [12] 1089 	mov	a,#(___str_12 >> 8)
      0002ED C0 E0            [24] 1090 	push	acc
      0002EF 74 80            [12] 1091 	mov	a,#0x80
      0002F1 C0 E0            [24] 1092 	push	acc
      0002F3 12r00r00         [24] 1093 	lcall	_printf
      0002F6 15 81            [12] 1094 	dec	sp
      0002F8 15 81            [12] 1095 	dec	sp
      0002FA 15 81            [12] 1096 	dec	sp
      0002FC D0 05            [24] 1097 	pop	ar5
                                   1098 ;	main.c:136: switch_case = 0;
      0002FE 90r13rCA         [24] 1099 	mov	dptr,#_main_switch_case_131074_52
      000301 E4               [12] 1100 	clr	a
      000302 F0               [24] 1101 	movx	@dptr,a
      000303 A3               [24] 1102 	inc	dptr
      000304 F0               [24] 1103 	movx	@dptr,a
      000305 A3               [24] 1104 	inc	dptr
      000306 F0               [24] 1105 	movx	@dptr,a
      000307 A3               [24] 1106 	inc	dptr
      000308 F0               [24] 1107 	movx	@dptr,a
      000309 80 75            [24] 1108 	sjmp	00137$
      00030B                       1109 00123$:
                                   1110 ;	main.c:137: } else if (char_received == '=') {
      00030B BD 3D 57         [24] 1111 	cjne	r5,#0x3d,00120$
                                   1112 ;	main.c:138: if (!switch_case) {
      00030E 90r13rCA         [24] 1113 	mov	dptr,#_main_switch_case_131074_52
      000311 E0               [24] 1114 	movx	a,@dptr
      000312 F5 F0            [12] 1115 	mov	b,a
      000314 A3               [24] 1116 	inc	dptr
      000315 E0               [24] 1117 	movx	a,@dptr
      000316 42 F0            [12] 1118 	orl	b,a
      000318 A3               [24] 1119 	inc	dptr
      000319 E0               [24] 1120 	movx	a,@dptr
      00031A 42 F0            [12] 1121 	orl	b,a
      00031C A3               [24] 1122 	inc	dptr
      00031D E0               [24] 1123 	movx	a,@dptr
      00031E 45 F0            [12] 1124 	orl	a,b
      000320 70 28            [24] 1125 	jnz	00115$
                                   1126 ;	main.c:139: printf(" mode\n\r");
      000322 C0 05            [24] 1127 	push	ar5
      000324 74rE1            [12] 1128 	mov	a,#___str_11
      000326 C0 E0            [24] 1129 	push	acc
      000328 74s01            [12] 1130 	mov	a,#(___str_11 >> 8)
      00032A C0 E0            [24] 1131 	push	acc
      00032C 74 80            [12] 1132 	mov	a,#0x80
      00032E C0 E0            [24] 1133 	push	acc
      000330 12r00r00         [24] 1134 	lcall	_printf
      000333 15 81            [12] 1135 	dec	sp
      000335 15 81            [12] 1136 	dec	sp
      000337 15 81            [12] 1137 	dec	sp
      000339 D0 05            [24] 1138 	pop	ar5
                                   1139 ;	main.c:140: switch_case = 5;
      00033B 90r13rCA         [24] 1140 	mov	dptr,#_main_switch_case_131074_52
      00033E 74 05            [12] 1141 	mov	a,#0x05
      000340 F0               [24] 1142 	movx	@dptr,a
      000341 E4               [12] 1143 	clr	a
      000342 A3               [24] 1144 	inc	dptr
      000343 F0               [24] 1145 	movx	@dptr,a
      000344 A3               [24] 1146 	inc	dptr
      000345 F0               [24] 1147 	movx	@dptr,a
      000346 A3               [24] 1148 	inc	dptr
      000347 F0               [24] 1149 	movx	@dptr,a
      000348 80 36            [24] 1150 	sjmp	00137$
      00034A                       1151 00115$:
                                   1152 ;	main.c:142: printf("First exit the current mode \n\r");
      00034A C0 05            [24] 1153 	push	ar5
      00034C 74r96            [12] 1154 	mov	a,#___str_9
      00034E C0 E0            [24] 1155 	push	acc
      000350 74s01            [12] 1156 	mov	a,#(___str_9 >> 8)
      000352 C0 E0            [24] 1157 	push	acc
      000354 74 80            [12] 1158 	mov	a,#0x80
      000356 C0 E0            [24] 1159 	push	acc
      000358 12r00r00         [24] 1160 	lcall	_printf
      00035B 15 81            [12] 1161 	dec	sp
      00035D 15 81            [12] 1162 	dec	sp
      00035F 15 81            [12] 1163 	dec	sp
      000361 D0 05            [24] 1164 	pop	ar5
      000363 80 1B            [24] 1165 	sjmp	00137$
      000365                       1166 00120$:
                                   1167 ;	main.c:144: } else if (char_received == '@') {
      000365 BD 40 18         [24] 1168 	cjne	r5,#0x40,00137$
                                   1169 ;	main.c:145: printf(" mode - restarting program \n\r");
      000368 74rEC            [12] 1170 	mov	a,#___str_13
      00036A C0 E0            [24] 1171 	push	acc
      00036C 74s01            [12] 1172 	mov	a,#(___str_13 >> 8)
      00036E C0 E0            [24] 1173 	push	acc
      000370 74 80            [12] 1174 	mov	a,#0x80
      000372 C0 E0            [24] 1175 	push	acc
      000374 12r00r00         [24] 1176 	lcall	_printf
      000377 15 81            [12] 1177 	dec	sp
      000379 15 81            [12] 1178 	dec	sp
      00037B 15 81            [12] 1179 	dec	sp
                                   1180 ;	main.c:146: break;
      00037D 02r0Ar73         [24] 1181 	ljmp	00245$
      000380                       1182 00137$:
                                   1183 ;	main.c:150: switch (switch_case) {
      000380 90r13rCA         [24] 1184 	mov	dptr,#_main_switch_case_131074_52
      000383 E0               [24] 1185 	movx	a,@dptr
      000384 F9               [12] 1186 	mov	r1,a
      000385 A3               [24] 1187 	inc	dptr
      000386 E0               [24] 1188 	movx	a,@dptr
      000387 FA               [12] 1189 	mov	r2,a
      000388 A3               [24] 1190 	inc	dptr
      000389 E0               [24] 1191 	movx	a,@dptr
      00038A FB               [12] 1192 	mov	r3,a
      00038B A3               [24] 1193 	inc	dptr
      00038C E0               [24] 1194 	movx	a,@dptr
      00038D FC               [12] 1195 	mov	r4,a
      00038E B9 01 0B         [24] 1196 	cjne	r1,#0x01,00401$
      000391 BA 00 08         [24] 1197 	cjne	r2,#0x00,00401$
      000394 BB 00 05         [24] 1198 	cjne	r3,#0x00,00401$
      000397 BC 00 02         [24] 1199 	cjne	r4,#0x00,00401$
      00039A 80 3F            [24] 1200 	sjmp	00140$
      00039C                       1201 00401$:
      00039C B9 02 0C         [24] 1202 	cjne	r1,#0x02,00402$
      00039F BA 00 09         [24] 1203 	cjne	r2,#0x00,00402$
      0003A2 BB 00 06         [24] 1204 	cjne	r3,#0x00,00402$
      0003A5 BC 00 03         [24] 1205 	cjne	r4,#0x00,00402$
      0003A8 02r04r7A         [24] 1206 	ljmp	00148$
      0003AB                       1207 00402$:
      0003AB B9 03 0C         [24] 1208 	cjne	r1,#0x03,00403$
      0003AE BA 00 09         [24] 1209 	cjne	r2,#0x00,00403$
      0003B1 BB 00 06         [24] 1210 	cjne	r3,#0x00,00403$
      0003B4 BC 00 03         [24] 1211 	cjne	r4,#0x00,00403$
      0003B7 02r05rDB         [24] 1212 	ljmp	00157$
      0003BA                       1213 00403$:
      0003BA B9 04 0C         [24] 1214 	cjne	r1,#0x04,00404$
      0003BD BA 00 09         [24] 1215 	cjne	r2,#0x00,00404$
      0003C0 BB 00 06         [24] 1216 	cjne	r3,#0x00,00404$
      0003C3 BC 00 03         [24] 1217 	cjne	r4,#0x00,00404$
      0003C6 02r07r19         [24] 1218 	ljmp	00165$
      0003C9                       1219 00404$:
      0003C9 B9 05 0C         [24] 1220 	cjne	r1,#0x05,00405$
      0003CC BA 00 09         [24] 1221 	cjne	r2,#0x00,00405$
      0003CF BB 00 06         [24] 1222 	cjne	r3,#0x00,00405$
      0003D2 BC 00 03         [24] 1223 	cjne	r4,#0x00,00405$
      0003D5 02r09r9D         [24] 1224 	ljmp	00243$
      0003D8                       1225 00405$:
      0003D8 02r01r92         [24] 1226 	ljmp	00181$
                                   1227 ;	main.c:151: case 1:
      0003DB                       1228 00140$:
                                   1229 ;	main.c:152: if ((char_received == '\n') || (char_received == '\r')) {
      0003DB BD 0A 02         [24] 1230 	cjne	r5,#0x0a,00406$
      0003DE 80 03            [24] 1231 	sjmp	00144$
      0003E0                       1232 00406$:
      0003E0 BD 0D 23         [24] 1233 	cjne	r5,#0x0d,00145$
      0003E3                       1234 00144$:
                                   1235 ;	main.c:153: printf("Characters added to buffer 0 - exiting mode \n\r");
      0003E3 74r0A            [12] 1236 	mov	a,#___str_14
      0003E5 C0 E0            [24] 1237 	push	acc
      0003E7 74s02            [12] 1238 	mov	a,#(___str_14 >> 8)
      0003E9 C0 E0            [24] 1239 	push	acc
      0003EB 74 80            [12] 1240 	mov	a,#0x80
      0003ED C0 E0            [24] 1241 	push	acc
      0003EF 12r00r00         [24] 1242 	lcall	_printf
      0003F2 15 81            [12] 1243 	dec	sp
      0003F4 15 81            [12] 1244 	dec	sp
      0003F6 15 81            [12] 1245 	dec	sp
                                   1246 ;	main.c:154: switch_case = 0;
      0003F8 90r13rCA         [24] 1247 	mov	dptr,#_main_switch_case_131074_52
      0003FB E4               [12] 1248 	clr	a
      0003FC F0               [24] 1249 	movx	@dptr,a
      0003FD A3               [24] 1250 	inc	dptr
      0003FE F0               [24] 1251 	movx	@dptr,a
      0003FF A3               [24] 1252 	inc	dptr
      000400 F0               [24] 1253 	movx	@dptr,a
      000401 A3               [24] 1254 	inc	dptr
      000402 F0               [24] 1255 	movx	@dptr,a
      000403 02r01r92         [24] 1256 	ljmp	00181$
      000406                       1257 00145$:
                                   1258 ;	main.c:155: } else if (buffer_array[0].buffer_occupied < user_input_1) {
      000406 90r13r8C         [24] 1259 	mov	dptr,#(_main_buffer_array_131072_48 + 0x0004)
      000409 E0               [24] 1260 	movx	a,@dptr
      00040A FB               [12] 1261 	mov	r3,a
      00040B A3               [24] 1262 	inc	dptr
      00040C E0               [24] 1263 	movx	a,@dptr
      00040D FC               [12] 1264 	mov	r4,a
      00040E C3               [12] 1265 	clr	c
      00040F EB               [12] 1266 	mov	a,r3
      000410 95*08            [12] 1267 	subb	a,_main_sloc3_1_0
      000412 EC               [12] 1268 	mov	a,r4
      000413 64 80            [12] 1269 	xrl	a,#0x80
      000415 85*09 F0         [24] 1270 	mov	b,(_main_sloc3_1_0 + 1)
      000418 63 F0 80         [24] 1271 	xrl	b,#0x80
      00041B 95 F0            [12] 1272 	subb	a,b
      00041D 50 32            [24] 1273 	jnc	00142$
                                   1274 ;	main.c:156: buffer_array[0].buffer_pointer[buffer_array[0].buffer_occupied] = char_received;
      00041F 90r13r88         [24] 1275 	mov	dptr,#_main_buffer_array_131072_48
      000422 E0               [24] 1276 	movx	a,@dptr
      000423 FB               [12] 1277 	mov	r3,a
      000424 A3               [24] 1278 	inc	dptr
      000425 E0               [24] 1279 	movx	a,@dptr
      000426 FC               [12] 1280 	mov	r4,a
      000427 90r13r8C         [24] 1281 	mov	dptr,#(_main_buffer_array_131072_48 + 0x0004)
      00042A E0               [24] 1282 	movx	a,@dptr
      00042B F9               [12] 1283 	mov	r1,a
      00042C A3               [24] 1284 	inc	dptr
      00042D E0               [24] 1285 	movx	a,@dptr
      00042E FA               [12] 1286 	mov	r2,a
      00042F E9               [12] 1287 	mov	a,r1
      000430 2B               [12] 1288 	add	a,r3
      000431 F5 82            [12] 1289 	mov	dpl,a
      000433 EA               [12] 1290 	mov	a,r2
      000434 3C               [12] 1291 	addc	a,r4
      000435 F5 83            [12] 1292 	mov	dph,a
      000437 ED               [12] 1293 	mov	a,r5
      000438 F0               [24] 1294 	movx	@dptr,a
                                   1295 ;	main.c:157: buffer_array[0].buffer_occupied++;
      000439 90r13r8C         [24] 1296 	mov	dptr,#(_main_buffer_array_131072_48 + 0x0004)
      00043C E0               [24] 1297 	movx	a,@dptr
      00043D FB               [12] 1298 	mov	r3,a
      00043E A3               [24] 1299 	inc	dptr
      00043F E0               [24] 1300 	movx	a,@dptr
      000440 FC               [12] 1301 	mov	r4,a
      000441 0B               [12] 1302 	inc	r3
      000442 BB 00 01         [24] 1303 	cjne	r3,#0x00,00410$
      000445 0C               [12] 1304 	inc	r4
      000446                       1305 00410$:
      000446 90r13r8C         [24] 1306 	mov	dptr,#(_main_buffer_array_131072_48 + 0x0004)
      000449 EB               [12] 1307 	mov	a,r3
      00044A F0               [24] 1308 	movx	@dptr,a
      00044B EC               [12] 1309 	mov	a,r4
      00044C A3               [24] 1310 	inc	dptr
      00044D F0               [24] 1311 	movx	@dptr,a
      00044E 02r01r92         [24] 1312 	ljmp	00181$
      000451                       1313 00142$:
                                   1314 ;	main.c:159: printf("\n\rNot enough memory to load, echoing to serial output %c\n\r", char_received);
      000451 7C 00            [12] 1315 	mov	r4,#0x00
      000453 C0 05            [24] 1316 	push	ar5
      000455 C0 04            [24] 1317 	push	ar4
      000457 74r39            [12] 1318 	mov	a,#___str_15
      000459 C0 E0            [24] 1319 	push	acc
      00045B 74s02            [12] 1320 	mov	a,#(___str_15 >> 8)
      00045D C0 E0            [24] 1321 	push	acc
      00045F 74 80            [12] 1322 	mov	a,#0x80
      000461 C0 E0            [24] 1323 	push	acc
      000463 12r00r00         [24] 1324 	lcall	_printf
      000466 E5 81            [12] 1325 	mov	a,sp
      000468 24 FB            [12] 1326 	add	a,#0xfb
      00046A F5 81            [12] 1327 	mov	sp,a
                                   1328 ;	main.c:160: switch_case = 0;
      00046C 90r13rCA         [24] 1329 	mov	dptr,#_main_switch_case_131074_52
      00046F E4               [12] 1330 	clr	a
      000470 F0               [24] 1331 	movx	@dptr,a
      000471 A3               [24] 1332 	inc	dptr
      000472 F0               [24] 1333 	movx	@dptr,a
      000473 A3               [24] 1334 	inc	dptr
      000474 F0               [24] 1335 	movx	@dptr,a
      000475 A3               [24] 1336 	inc	dptr
      000476 F0               [24] 1337 	movx	@dptr,a
                                   1338 ;	main.c:162: break;
      000477 02r01r92         [24] 1339 	ljmp	00181$
                                   1340 ;	main.c:163: case 2:
      00047A                       1341 00148$:
                                   1342 ;	main.c:165: user_input_2 = get_buffer_size(20, 400, DIVISIBLE);
      00047A 90r00r00         [24] 1343 	mov	dptr,#_get_buffer_size_PARM_2
      00047D 74 90            [12] 1344 	mov	a,#0x90
      00047F F0               [24] 1345 	movx	@dptr,a
      000480 74 01            [12] 1346 	mov	a,#0x01
      000482 A3               [24] 1347 	inc	dptr
      000483 F0               [24] 1348 	movx	@dptr,a
      000484 E4               [12] 1349 	clr	a
      000485 A3               [24] 1350 	inc	dptr
      000486 F0               [24] 1351 	movx	@dptr,a
      000487 A3               [24] 1352 	inc	dptr
      000488 F0               [24] 1353 	movx	@dptr,a
      000489 90r00r00         [24] 1354 	mov	dptr,#_get_buffer_size_PARM_3
      00048C 74 10            [12] 1355 	mov	a,#0x10
      00048E F0               [24] 1356 	movx	@dptr,a
      00048F E4               [12] 1357 	clr	a
      000490 A3               [24] 1358 	inc	dptr
      000491 F0               [24] 1359 	movx	@dptr,a
      000492 A3               [24] 1360 	inc	dptr
      000493 F0               [24] 1361 	movx	@dptr,a
      000494 A3               [24] 1362 	inc	dptr
      000495 F0               [24] 1363 	movx	@dptr,a
      000496 90 00 14         [24] 1364 	mov	dptr,#(0x14&0x00ff)
      000499 E4               [12] 1365 	clr	a
      00049A F5 F0            [12] 1366 	mov	b,a
      00049C 12r00r00         [24] 1367 	lcall	_get_buffer_size
      00049F 85 82*06         [24] 1368 	mov	_main_sloc2_1_0,dpl
      0004A2 85 83*07         [24] 1369 	mov	(_main_sloc2_1_0 + 1),dph
                                   1370 ;	main.c:166: for (int32_t index = 1; index < 10; index++) {
      0004A5 78 01            [12] 1371 	mov	r0,#0x01
      0004A7 79 00            [12] 1372 	mov	r1,#0x00
      0004A9 7A 00            [12] 1373 	mov	r2,#0x00
      0004AB 7B 00            [12] 1374 	mov	r3,#0x00
      0004AD                       1375 00188$:
      0004AD C3               [12] 1376 	clr	c
      0004AE E8               [12] 1377 	mov	a,r0
      0004AF 94 0A            [12] 1378 	subb	a,#0x0a
      0004B1 E9               [12] 1379 	mov	a,r1
      0004B2 94 00            [12] 1380 	subb	a,#0x00
      0004B4 EA               [12] 1381 	mov	a,r2
      0004B5 94 00            [12] 1382 	subb	a,#0x00
      0004B7 EB               [12] 1383 	mov	a,r3
      0004B8 64 80            [12] 1384 	xrl	a,#0x80
      0004BA 94 80            [12] 1385 	subb	a,#0x80
      0004BC 40 03            [24] 1386 	jc	00411$
      0004BE 02r05r8F         [24] 1387 	ljmp	00154$
      0004C1                       1388 00411$:
                                   1389 ;	main.c:167: if (buffer_array[index].buffer_pointer == NULL) {
      0004C1 90r00r00         [24] 1390 	mov	dptr,#__mullong_PARM_2
      0004C4 E8               [12] 1391 	mov	a,r0
      0004C5 F0               [24] 1392 	movx	@dptr,a
      0004C6 E9               [12] 1393 	mov	a,r1
      0004C7 A3               [24] 1394 	inc	dptr
      0004C8 F0               [24] 1395 	movx	@dptr,a
      0004C9 EA               [12] 1396 	mov	a,r2
      0004CA A3               [24] 1397 	inc	dptr
      0004CB F0               [24] 1398 	movx	@dptr,a
      0004CC EB               [12] 1399 	mov	a,r3
      0004CD A3               [24] 1400 	inc	dptr
      0004CE F0               [24] 1401 	movx	@dptr,a
      0004CF 90 00 06         [24] 1402 	mov	dptr,#(0x06&0x00ff)
      0004D2 E4               [12] 1403 	clr	a
      0004D3 F5 F0            [12] 1404 	mov	b,a
      0004D5 C0 03            [24] 1405 	push	ar3
      0004D7 C0 02            [24] 1406 	push	ar2
      0004D9 C0 01            [24] 1407 	push	ar1
      0004DB C0 00            [24] 1408 	push	ar0
      0004DD 12r00r00         [24] 1409 	lcall	__mullong
      0004E0 85 82*00         [24] 1410 	mov	_main_sloc0_1_0,dpl
      0004E3 85 83*01         [24] 1411 	mov	(_main_sloc0_1_0 + 1),dph
      0004E6 85 F0*02         [24] 1412 	mov	(_main_sloc0_1_0 + 2),b
      0004E9 F5*03            [12] 1413 	mov	(_main_sloc0_1_0 + 3),a
      0004EB D0 00            [24] 1414 	pop	ar0
      0004ED D0 01            [24] 1415 	pop	ar1
      0004EF D0 02            [24] 1416 	pop	ar2
      0004F1 D0 03            [24] 1417 	pop	ar3
      0004F3 E5*00            [12] 1418 	mov	a,_main_sloc0_1_0
      0004F5 24r88            [12] 1419 	add	a,#_main_buffer_array_131072_48
      0004F7 F5*04            [12] 1420 	mov	_main_sloc1_1_0,a
      0004F9 E5*01            [12] 1421 	mov	a,(_main_sloc0_1_0 + 1)
      0004FB 34s13            [12] 1422 	addc	a,#(_main_buffer_array_131072_48 >> 8)
      0004FD F5*05            [12] 1423 	mov	(_main_sloc1_1_0 + 1),a
      0004FF 85*04 82         [24] 1424 	mov	dpl,_main_sloc1_1_0
      000502 85*05 83         [24] 1425 	mov	dph,(_main_sloc1_1_0 + 1)
      000505 E0               [24] 1426 	movx	a,@dptr
      000506 FC               [12] 1427 	mov	r4,a
      000507 A3               [24] 1428 	inc	dptr
      000508 E0               [24] 1429 	movx	a,@dptr
      000509 FD               [12] 1430 	mov	r5,a
      00050A 4C               [12] 1431 	orl	a,r4
      00050B 70 72            [24] 1432 	jnz	00189$
                                   1433 ;	main.c:168: buffer_array[index].buffer_pointer = (int8_t *)malloc(user_input_2 * sizeof(int8_t));
      00050D AC*06            [24] 1434 	mov	r4,_main_sloc2_1_0
      00050F AD*07            [24] 1435 	mov	r5,(_main_sloc2_1_0 + 1)
      000511 8C 82            [24] 1436 	mov	dpl,r4
      000513 8D 83            [24] 1437 	mov	dph,r5
      000515 C0 03            [24] 1438 	push	ar3
      000517 C0 02            [24] 1439 	push	ar2
      000519 C0 01            [24] 1440 	push	ar1
      00051B C0 00            [24] 1441 	push	ar0
      00051D 12r00r00         [24] 1442 	lcall	_malloc
      000520 AC 82            [24] 1443 	mov	r4,dpl
      000522 AD 83            [24] 1444 	mov	r5,dph
      000524 D0 00            [24] 1445 	pop	ar0
      000526 D0 01            [24] 1446 	pop	ar1
      000528 D0 02            [24] 1447 	pop	ar2
      00052A D0 03            [24] 1448 	pop	ar3
      00052C 85*04 82         [24] 1449 	mov	dpl,_main_sloc1_1_0
      00052F 85*05 83         [24] 1450 	mov	dph,(_main_sloc1_1_0 + 1)
      000532 EC               [12] 1451 	mov	a,r4
      000533 F0               [24] 1452 	movx	@dptr,a
      000534 ED               [12] 1453 	mov	a,r5
      000535 A3               [24] 1454 	inc	dptr
      000536 F0               [24] 1455 	movx	@dptr,a
                                   1456 ;	main.c:169: if (buffer_array[index].buffer_pointer == NULL) {
      000537 EC               [12] 1457 	mov	a,r4
      000538 4D               [12] 1458 	orl	a,r5
      000539 70 17            [24] 1459 	jnz	00150$
                                   1460 ;	main.c:170: printf("Failed to allocate memory  - exiting mode \n\r");
      00053B 74r74            [12] 1461 	mov	a,#___str_16
      00053D C0 E0            [24] 1462 	push	acc
      00053F 74s02            [12] 1463 	mov	a,#(___str_16 >> 8)
      000541 C0 E0            [24] 1464 	push	acc
      000543 74 80            [12] 1465 	mov	a,#0x80
      000545 C0 E0            [24] 1466 	push	acc
      000547 12r00r00         [24] 1467 	lcall	_printf
      00054A 15 81            [12] 1468 	dec	sp
      00054C 15 81            [12] 1469 	dec	sp
      00054E 15 81            [12] 1470 	dec	sp
      000550 80 3D            [24] 1471 	sjmp	00154$
      000552                       1472 00150$:
                                   1473 ;	main.c:172: buffer_array[index].buffer_size = user_input_2;
      000552 E5*00            [12] 1474 	mov	a,_main_sloc0_1_0
      000554 24r88            [12] 1475 	add	a,#_main_buffer_array_131072_48
      000556 FC               [12] 1476 	mov	r4,a
      000557 E5*01            [12] 1477 	mov	a,(_main_sloc0_1_0 + 1)
      000559 34s13            [12] 1478 	addc	a,#(_main_buffer_array_131072_48 >> 8)
      00055B FD               [12] 1479 	mov	r5,a
      00055C 8C 82            [24] 1480 	mov	dpl,r4
      00055E 8D 83            [24] 1481 	mov	dph,r5
      000560 A3               [24] 1482 	inc	dptr
      000561 A3               [24] 1483 	inc	dptr
      000562 E5*06            [12] 1484 	mov	a,_main_sloc2_1_0
      000564 F0               [24] 1485 	movx	@dptr,a
      000565 E5*07            [12] 1486 	mov	a,(_main_sloc2_1_0 + 1)
      000567 A3               [24] 1487 	inc	dptr
      000568 F0               [24] 1488 	movx	@dptr,a
                                   1489 ;	main.c:173: buffer_array[index].buffer_occupied = 0;
      000569 8C 82            [24] 1490 	mov	dpl,r4
      00056B 8D 83            [24] 1491 	mov	dph,r5
      00056D A3               [24] 1492 	inc	dptr
      00056E A3               [24] 1493 	inc	dptr
      00056F A3               [24] 1494 	inc	dptr
      000570 A3               [24] 1495 	inc	dptr
      000571 E4               [12] 1496 	clr	a
      000572 F0               [24] 1497 	movx	@dptr,a
      000573 A3               [24] 1498 	inc	dptr
      000574 F0               [24] 1499 	movx	@dptr,a
                                   1500 ;	main.c:174: inserted = index;
      000575 90r13rC6         [24] 1501 	mov	dptr,#_main_inserted_131072_48
      000578 E8               [12] 1502 	mov	a,r0
      000579 F0               [24] 1503 	movx	@dptr,a
      00057A E9               [12] 1504 	mov	a,r1
      00057B A3               [24] 1505 	inc	dptr
      00057C F0               [24] 1506 	movx	@dptr,a
                                   1507 ;	main.c:176: break;
      00057D 80 10            [24] 1508 	sjmp	00154$
      00057F                       1509 00189$:
                                   1510 ;	main.c:166: for (int32_t index = 1; index < 10; index++) {
      00057F 08               [12] 1511 	inc	r0
      000580 B8 00 09         [24] 1512 	cjne	r0,#0x00,00414$
      000583 09               [12] 1513 	inc	r1
      000584 B9 00 05         [24] 1514 	cjne	r1,#0x00,00414$
      000587 0A               [12] 1515 	inc	r2
      000588 BA 00 01         [24] 1516 	cjne	r2,#0x00,00414$
      00058B 0B               [12] 1517 	inc	r3
      00058C                       1518 00414$:
      00058C 02r04rAD         [24] 1519 	ljmp	00188$
      00058F                       1520 00154$:
                                   1521 ;	main.c:179: if (inserted) {
      00058F 90r13rC6         [24] 1522 	mov	dptr,#_main_inserted_131072_48
      000592 E0               [24] 1523 	movx	a,@dptr
      000593 F5 F0            [12] 1524 	mov	b,a
      000595 A3               [24] 1525 	inc	dptr
      000596 E0               [24] 1526 	movx	a,@dptr
      000597 45 F0            [12] 1527 	orl	a,b
      000599 60 32            [24] 1528 	jz	00156$
                                   1529 ;	main.c:180: printf("Allocated memory as buffer #%d  - exiting mode \n\r", inserted);
      00059B 90r13rC6         [24] 1530 	mov	dptr,#_main_inserted_131072_48
      00059E E0               [24] 1531 	movx	a,@dptr
      00059F C0 E0            [24] 1532 	push	acc
      0005A1 A3               [24] 1533 	inc	dptr
      0005A2 E0               [24] 1534 	movx	a,@dptr
      0005A3 C0 E0            [24] 1535 	push	acc
      0005A5 74rA1            [12] 1536 	mov	a,#___str_17
      0005A7 C0 E0            [24] 1537 	push	acc
      0005A9 74s02            [12] 1538 	mov	a,#(___str_17 >> 8)
      0005AB C0 E0            [24] 1539 	push	acc
      0005AD 74 80            [12] 1540 	mov	a,#0x80
      0005AF C0 E0            [24] 1541 	push	acc
      0005B1 12r00r00         [24] 1542 	lcall	_printf
      0005B4 E5 81            [12] 1543 	mov	a,sp
      0005B6 24 FB            [12] 1544 	add	a,#0xfb
      0005B8 F5 81            [12] 1545 	mov	sp,a
                                   1546 ;	main.c:181: buffer_count++;
      0005BA 90r13rC4         [24] 1547 	mov	dptr,#_main_buffer_count_131072_48
      0005BD E0               [24] 1548 	movx	a,@dptr
      0005BE 24 01            [12] 1549 	add	a,#0x01
      0005C0 F0               [24] 1550 	movx	@dptr,a
      0005C1 A3               [24] 1551 	inc	dptr
      0005C2 E0               [24] 1552 	movx	a,@dptr
      0005C3 34 00            [12] 1553 	addc	a,#0x00
      0005C5 F0               [24] 1554 	movx	@dptr,a
                                   1555 ;	main.c:182: inserted = 0;
      0005C6 90r13rC6         [24] 1556 	mov	dptr,#_main_inserted_131072_48
      0005C9 E4               [12] 1557 	clr	a
      0005CA F0               [24] 1558 	movx	@dptr,a
      0005CB A3               [24] 1559 	inc	dptr
      0005CC F0               [24] 1560 	movx	@dptr,a
      0005CD                       1561 00156$:
                                   1562 ;	main.c:184: switch_case = 0;
      0005CD 90r13rCA         [24] 1563 	mov	dptr,#_main_switch_case_131074_52
      0005D0 E4               [12] 1564 	clr	a
      0005D1 F0               [24] 1565 	movx	@dptr,a
      0005D2 A3               [24] 1566 	inc	dptr
      0005D3 F0               [24] 1567 	movx	@dptr,a
      0005D4 A3               [24] 1568 	inc	dptr
      0005D5 F0               [24] 1569 	movx	@dptr,a
      0005D6 A3               [24] 1570 	inc	dptr
      0005D7 F0               [24] 1571 	movx	@dptr,a
                                   1572 ;	main.c:185: break;
      0005D8 02r01r92         [24] 1573 	ljmp	00181$
                                   1574 ;	main.c:186: case 3:
      0005DB                       1575 00157$:
                                   1576 ;	main.c:187: user_input_2 = get_buffer_size(ZERO, ARRAY_SIZE, ONE);
      0005DB 90r00r00         [24] 1577 	mov	dptr,#_get_buffer_size_PARM_2
      0005DE 74 0A            [12] 1578 	mov	a,#0x0a
      0005E0 F0               [24] 1579 	movx	@dptr,a
      0005E1 E4               [12] 1580 	clr	a
      0005E2 A3               [24] 1581 	inc	dptr
      0005E3 F0               [24] 1582 	movx	@dptr,a
      0005E4 A3               [24] 1583 	inc	dptr
      0005E5 F0               [24] 1584 	movx	@dptr,a
      0005E6 A3               [24] 1585 	inc	dptr
      0005E7 F0               [24] 1586 	movx	@dptr,a
      0005E8 90r00r00         [24] 1587 	mov	dptr,#_get_buffer_size_PARM_3
      0005EB 04               [12] 1588 	inc	a
      0005EC F0               [24] 1589 	movx	@dptr,a
      0005ED E4               [12] 1590 	clr	a
      0005EE A3               [24] 1591 	inc	dptr
      0005EF F0               [24] 1592 	movx	@dptr,a
      0005F0 A3               [24] 1593 	inc	dptr
      0005F1 F0               [24] 1594 	movx	@dptr,a
      0005F2 A3               [24] 1595 	inc	dptr
      0005F3 F0               [24] 1596 	movx	@dptr,a
      0005F4 90 00 00         [24] 1597 	mov	dptr,#(0x00&0x00ff)
      0005F7 E4               [12] 1598 	clr	a
      0005F8 F5 F0            [12] 1599 	mov	b,a
      0005FA 12r00r00         [24] 1600 	lcall	_get_buffer_size
      0005FD AC 82            [24] 1601 	mov	r4,dpl
      0005FF AD 83            [24] 1602 	mov	r5,dph
                                   1603 ;	main.c:188: if (user_input_2 == 0) {
      000601 EC               [12] 1604 	mov	a,r4
      000602 4D               [12] 1605 	orl	a,r5
      000603 70 18            [24] 1606 	jnz	00163$
                                   1607 ;	main.c:189: printf("Cannot remove buffer 0 - exiting mode \n\r");
      000605 74rD3            [12] 1608 	mov	a,#___str_18
      000607 C0 E0            [24] 1609 	push	acc
      000609 74s02            [12] 1610 	mov	a,#(___str_18 >> 8)
      00060B C0 E0            [24] 1611 	push	acc
      00060D 74 80            [12] 1612 	mov	a,#0x80
      00060F C0 E0            [24] 1613 	push	acc
      000611 12r00r00         [24] 1614 	lcall	_printf
      000614 15 81            [12] 1615 	dec	sp
      000616 15 81            [12] 1616 	dec	sp
      000618 15 81            [12] 1617 	dec	sp
      00061A 02r07r0B         [24] 1618 	ljmp	00164$
      00061D                       1619 00163$:
                                   1620 ;	main.c:190: } else if ((user_input_2 < buffer_count) && (buffer_array[user_input_2].buffer_pointer != NULL)) {
      00061D 90r13rC4         [24] 1621 	mov	dptr,#_main_buffer_count_131072_48
      000620 E0               [24] 1622 	movx	a,@dptr
      000621 FA               [12] 1623 	mov	r2,a
      000622 A3               [24] 1624 	inc	dptr
      000623 E0               [24] 1625 	movx	a,@dptr
      000624 FB               [12] 1626 	mov	r3,a
      000625 8C 00            [24] 1627 	mov	ar0,r4
      000627 8D 01            [24] 1628 	mov	ar1,r5
      000629 C3               [12] 1629 	clr	c
      00062A E8               [12] 1630 	mov	a,r0
      00062B 9A               [12] 1631 	subb	a,r2
      00062C E9               [12] 1632 	mov	a,r1
      00062D 64 80            [12] 1633 	xrl	a,#0x80
      00062F 8B F0            [24] 1634 	mov	b,r3
      000631 63 F0 80         [24] 1635 	xrl	b,#0x80
      000634 95 F0            [12] 1636 	subb	a,b
      000636 40 03            [24] 1637 	jc	00417$
      000638 02r06rF6         [24] 1638 	ljmp	00159$
      00063B                       1639 00417$:
      00063B 90r00r00         [24] 1640 	mov	dptr,#__mulint_PARM_2
      00063E EC               [12] 1641 	mov	a,r4
      00063F F0               [24] 1642 	movx	@dptr,a
      000640 ED               [12] 1643 	mov	a,r5
      000641 A3               [24] 1644 	inc	dptr
      000642 F0               [24] 1645 	movx	@dptr,a
      000643 90 00 06         [24] 1646 	mov	dptr,#0x0006
      000646 C0 05            [24] 1647 	push	ar5
      000648 C0 04            [24] 1648 	push	ar4
      00064A C0 03            [24] 1649 	push	ar3
      00064C C0 02            [24] 1650 	push	ar2
      00064E 12r00r00         [24] 1651 	lcall	__mulint
      000651 85 82*00         [24] 1652 	mov	_main_sloc0_1_0,dpl
      000654 85 83*01         [24] 1653 	mov	(_main_sloc0_1_0 + 1),dph
      000657 D0 02            [24] 1654 	pop	ar2
      000659 D0 03            [24] 1655 	pop	ar3
      00065B D0 04            [24] 1656 	pop	ar4
      00065D D0 05            [24] 1657 	pop	ar5
      00065F E5*00            [12] 1658 	mov	a,_main_sloc0_1_0
      000661 24r88            [12] 1659 	add	a,#_main_buffer_array_131072_48
      000663 F5*06            [12] 1660 	mov	_main_sloc2_1_0,a
      000665 E5*01            [12] 1661 	mov	a,(_main_sloc0_1_0 + 1)
      000667 34s13            [12] 1662 	addc	a,#(_main_buffer_array_131072_48 >> 8)
      000669 F5*07            [12] 1663 	mov	(_main_sloc2_1_0 + 1),a
      00066B 85*06 82         [24] 1664 	mov	dpl,_main_sloc2_1_0
      00066E 85*07 83         [24] 1665 	mov	dph,(_main_sloc2_1_0 + 1)
      000671 E0               [24] 1666 	movx	a,@dptr
      000672 F5*04            [12] 1667 	mov	_main_sloc1_1_0,a
      000674 A3               [24] 1668 	inc	dptr
      000675 E0               [24] 1669 	movx	a,@dptr
      000676 F5*05            [12] 1670 	mov	(_main_sloc1_1_0 + 1),a
      000678 E5*04            [12] 1671 	mov	a,_main_sloc1_1_0
      00067A 45*05            [12] 1672 	orl	a,(_main_sloc1_1_0 + 1)
      00067C 60 78            [24] 1673 	jz	00159$
                                   1674 ;	main.c:191: free(buffer_array[user_input_2].buffer_pointer);
      00067E AE*04            [24] 1675 	mov	r6,_main_sloc1_1_0
      000680 A9*05            [24] 1676 	mov	r1,(_main_sloc1_1_0 + 1)
      000682 7F 00            [12] 1677 	mov	r7,#0x00
      000684 8E 82            [24] 1678 	mov	dpl,r6
      000686 89 83            [24] 1679 	mov	dph,r1
      000688 8F F0            [24] 1680 	mov	b,r7
      00068A C0 05            [24] 1681 	push	ar5
      00068C C0 04            [24] 1682 	push	ar4
      00068E C0 03            [24] 1683 	push	ar3
      000690 C0 02            [24] 1684 	push	ar2
      000692 12r00r00         [24] 1685 	lcall	_free
      000695 D0 02            [24] 1686 	pop	ar2
      000697 D0 03            [24] 1687 	pop	ar3
      000699 D0 04            [24] 1688 	pop	ar4
      00069B D0 05            [24] 1689 	pop	ar5
                                   1690 ;	main.c:192: buffer_array[user_input_2].buffer_pointer = NULL;
      00069D 85*06 82         [24] 1691 	mov	dpl,_main_sloc2_1_0
      0006A0 85*07 83         [24] 1692 	mov	dph,(_main_sloc2_1_0 + 1)
      0006A3 E4               [12] 1693 	clr	a
      0006A4 F0               [24] 1694 	movx	@dptr,a
      0006A5 A3               [24] 1695 	inc	dptr
      0006A6 F0               [24] 1696 	movx	@dptr,a
                                   1697 ;	main.c:193: buffer_array[user_input_2].buffer_size = 0;
      0006A7 E5*00            [12] 1698 	mov	a,_main_sloc0_1_0
      0006A9 24r88            [12] 1699 	add	a,#_main_buffer_array_131072_48
      0006AB FE               [12] 1700 	mov	r6,a
      0006AC E5*01            [12] 1701 	mov	a,(_main_sloc0_1_0 + 1)
      0006AE 34s13            [12] 1702 	addc	a,#(_main_buffer_array_131072_48 >> 8)
      0006B0 FF               [12] 1703 	mov	r7,a
      0006B1 8E 82            [24] 1704 	mov	dpl,r6
      0006B3 8F 83            [24] 1705 	mov	dph,r7
      0006B5 A3               [24] 1706 	inc	dptr
      0006B6 A3               [24] 1707 	inc	dptr
      0006B7 E4               [12] 1708 	clr	a
      0006B8 F0               [24] 1709 	movx	@dptr,a
      0006B9 A3               [24] 1710 	inc	dptr
      0006BA F0               [24] 1711 	movx	@dptr,a
                                   1712 ;	main.c:194: buffer_array[user_input_2].buffer_occupied = 0;
      0006BB 8E 82            [24] 1713 	mov	dpl,r6
      0006BD 8F 83            [24] 1714 	mov	dph,r7
      0006BF A3               [24] 1715 	inc	dptr
      0006C0 A3               [24] 1716 	inc	dptr
      0006C1 A3               [24] 1717 	inc	dptr
      0006C2 A3               [24] 1718 	inc	dptr
      0006C3 F0               [24] 1719 	movx	@dptr,a
      0006C4 A3               [24] 1720 	inc	dptr
      0006C5 F0               [24] 1721 	movx	@dptr,a
                                   1722 ;	main.c:195: printf("Freed buffer #%d - exiting mode \n\r", user_input_2);
      0006C6 C0 03            [24] 1723 	push	ar3
      0006C8 C0 02            [24] 1724 	push	ar2
      0006CA C0 04            [24] 1725 	push	ar4
      0006CC C0 05            [24] 1726 	push	ar5
      0006CE 74rFC            [12] 1727 	mov	a,#___str_19
      0006D0 C0 E0            [24] 1728 	push	acc
      0006D2 74s02            [12] 1729 	mov	a,#(___str_19 >> 8)
      0006D4 C0 E0            [24] 1730 	push	acc
      0006D6 74 80            [12] 1731 	mov	a,#0x80
      0006D8 C0 E0            [24] 1732 	push	acc
      0006DA 12r00r00         [24] 1733 	lcall	_printf
      0006DD E5 81            [12] 1734 	mov	a,sp
      0006DF 24 FB            [12] 1735 	add	a,#0xfb
      0006E1 F5 81            [12] 1736 	mov	sp,a
      0006E3 D0 02            [24] 1737 	pop	ar2
      0006E5 D0 03            [24] 1738 	pop	ar3
                                   1739 ;	main.c:196: buffer_count--;
      0006E7 1A               [12] 1740 	dec	r2
      0006E8 BA FF 01         [24] 1741 	cjne	r2,#0xff,00419$
      0006EB 1B               [12] 1742 	dec	r3
      0006EC                       1743 00419$:
      0006EC 90r13rC4         [24] 1744 	mov	dptr,#_main_buffer_count_131072_48
      0006EF EA               [12] 1745 	mov	a,r2
      0006F0 F0               [24] 1746 	movx	@dptr,a
      0006F1 EB               [12] 1747 	mov	a,r3
      0006F2 A3               [24] 1748 	inc	dptr
      0006F3 F0               [24] 1749 	movx	@dptr,a
      0006F4 80 15            [24] 1750 	sjmp	00164$
      0006F6                       1751 00159$:
                                   1752 ;	main.c:198: printf("No such buffer exists - exiting mode \n\r");
      0006F6 74r1F            [12] 1753 	mov	a,#___str_20
      0006F8 C0 E0            [24] 1754 	push	acc
      0006FA 74s03            [12] 1755 	mov	a,#(___str_20 >> 8)
      0006FC C0 E0            [24] 1756 	push	acc
      0006FE 74 80            [12] 1757 	mov	a,#0x80
      000700 C0 E0            [24] 1758 	push	acc
      000702 12r00r00         [24] 1759 	lcall	_printf
      000705 15 81            [12] 1760 	dec	sp
      000707 15 81            [12] 1761 	dec	sp
      000709 15 81            [12] 1762 	dec	sp
      00070B                       1763 00164$:
                                   1764 ;	main.c:200: switch_case = 0;
      00070B 90r13rCA         [24] 1765 	mov	dptr,#_main_switch_case_131074_52
      00070E E4               [12] 1766 	clr	a
      00070F F0               [24] 1767 	movx	@dptr,a
      000710 A3               [24] 1768 	inc	dptr
      000711 F0               [24] 1769 	movx	@dptr,a
      000712 A3               [24] 1770 	inc	dptr
      000713 F0               [24] 1771 	movx	@dptr,a
      000714 A3               [24] 1772 	inc	dptr
      000715 F0               [24] 1773 	movx	@dptr,a
                                   1774 ;	main.c:201: break;
      000716 02r01r92         [24] 1775 	ljmp	00181$
                                   1776 ;	main.c:202: case 4:
      000719                       1777 00165$:
                                   1778 ;	main.c:204: printf("Total characters count: %d \n\r", total_characters_count);
      000719 90r00r00         [24] 1779 	mov	dptr,#_total_characters_count
      00071C E0               [24] 1780 	movx	a,@dptr
      00071D C0 E0            [24] 1781 	push	acc
      00071F A3               [24] 1782 	inc	dptr
      000720 E0               [24] 1783 	movx	a,@dptr
      000721 C0 E0            [24] 1784 	push	acc
      000723 74r47            [12] 1785 	mov	a,#___str_21
      000725 C0 E0            [24] 1786 	push	acc
      000727 74s03            [12] 1787 	mov	a,#(___str_21 >> 8)
      000729 C0 E0            [24] 1788 	push	acc
      00072B 74 80            [12] 1789 	mov	a,#0x80
      00072D C0 E0            [24] 1790 	push	acc
      00072F 12r00r00         [24] 1791 	lcall	_printf
      000732 E5 81            [12] 1792 	mov	a,sp
      000734 24 FB            [12] 1793 	add	a,#0xfb
      000736 F5 81            [12] 1794 	mov	sp,a
                                   1795 ;	main.c:205: printf("Since last '?': %d \n\r", (total_characters_count - since_last));
      000738 90r13rC8         [24] 1796 	mov	dptr,#_main_since_last_131073_49
      00073B E0               [24] 1797 	movx	a,@dptr
      00073C FC               [12] 1798 	mov	r4,a
      00073D A3               [24] 1799 	inc	dptr
      00073E E0               [24] 1800 	movx	a,@dptr
      00073F FD               [12] 1801 	mov	r5,a
      000740 90r00r00         [24] 1802 	mov	dptr,#_total_characters_count
      000743 E0               [24] 1803 	movx	a,@dptr
      000744 FA               [12] 1804 	mov	r2,a
      000745 A3               [24] 1805 	inc	dptr
      000746 E0               [24] 1806 	movx	a,@dptr
      000747 FB               [12] 1807 	mov	r3,a
      000748 EA               [12] 1808 	mov	a,r2
      000749 C3               [12] 1809 	clr	c
      00074A 9C               [12] 1810 	subb	a,r4
      00074B FC               [12] 1811 	mov	r4,a
      00074C EB               [12] 1812 	mov	a,r3
      00074D 9D               [12] 1813 	subb	a,r5
      00074E FD               [12] 1814 	mov	r5,a
      00074F C0 04            [24] 1815 	push	ar4
      000751 C0 05            [24] 1816 	push	ar5
      000753 74r65            [12] 1817 	mov	a,#___str_22
      000755 C0 E0            [24] 1818 	push	acc
      000757 74s03            [12] 1819 	mov	a,#(___str_22 >> 8)
      000759 C0 E0            [24] 1820 	push	acc
      00075B 74 80            [12] 1821 	mov	a,#0x80
      00075D C0 E0            [24] 1822 	push	acc
      00075F 12r00r00         [24] 1823 	lcall	_printf
      000762 E5 81            [12] 1824 	mov	a,sp
      000764 24 FB            [12] 1825 	add	a,#0xfb
      000766 F5 81            [12] 1826 	mov	sp,a
                                   1827 ;	main.c:206: since_last = total_characters_count;
      000768 90r00r00         [24] 1828 	mov	dptr,#_total_characters_count
      00076B E0               [24] 1829 	movx	a,@dptr
      00076C FC               [12] 1830 	mov	r4,a
      00076D A3               [24] 1831 	inc	dptr
      00076E E0               [24] 1832 	movx	a,@dptr
      00076F FD               [12] 1833 	mov	r5,a
      000770 90r13rC8         [24] 1834 	mov	dptr,#_main_since_last_131073_49
      000773 EC               [12] 1835 	mov	a,r4
      000774 F0               [24] 1836 	movx	@dptr,a
      000775 ED               [12] 1837 	mov	a,r5
      000776 A3               [24] 1838 	inc	dptr
      000777 F0               [24] 1839 	movx	@dptr,a
                                   1840 ;	main.c:207: for (int8_t index = 0; index <= buffer_count; index++) {
      000778 90r13rC4         [24] 1841 	mov	dptr,#_main_buffer_count_131072_48
      00077B E0               [24] 1842 	movx	a,@dptr
      00077C FC               [12] 1843 	mov	r4,a
      00077D A3               [24] 1844 	inc	dptr
      00077E E0               [24] 1845 	movx	a,@dptr
      00077F FD               [12] 1846 	mov	r5,a
      000780 75*04 00         [24] 1847 	mov	_main_sloc1_1_0,#0x00
      000783                       1848 00194$:
      000783 E5*04            [12] 1849 	mov	a,_main_sloc1_1_0
      000785 F9               [12] 1850 	mov	r1,a
      000786 33               [12] 1851 	rlc	a
      000787 95 E0            [12] 1852 	subb	a,acc
      000789 FA               [12] 1853 	mov	r2,a
      00078A C3               [12] 1854 	clr	c
      00078B EC               [12] 1855 	mov	a,r4
      00078C 99               [12] 1856 	subb	a,r1
      00078D ED               [12] 1857 	mov	a,r5
      00078E 64 80            [12] 1858 	xrl	a,#0x80
      000790 8A F0            [24] 1859 	mov	b,r2
      000792 63 F0 80         [24] 1860 	xrl	b,#0x80
      000795 95 F0            [12] 1861 	subb	a,b
      000797 50 03            [24] 1862 	jnc	00420$
      000799 02r09r8F         [24] 1863 	ljmp	00173$
      00079C                       1864 00420$:
                                   1865 ;	main.c:208: if (buffer_array[index].buffer_pointer == NULL) {
      00079C C2 D5            [12] 1866 	clr	F0
      00079E 75 F0 06         [24] 1867 	mov	b,#0x06
      0007A1 E5*04            [12] 1868 	mov	a,_main_sloc1_1_0
      0007A3 30 E7 04         [24] 1869 	jnb	acc.7,00421$
      0007A6 B2 D5            [12] 1870 	cpl	F0
      0007A8 F4               [12] 1871 	cpl	a
      0007A9 04               [12] 1872 	inc	a
      0007AA                       1873 00421$:
      0007AA A4               [48] 1874 	mul	ab
      0007AB 30 D5 0A         [24] 1875 	jnb	F0,00422$
      0007AE F4               [12] 1876 	cpl	a
      0007AF 24 01            [12] 1877 	add	a,#0x01
      0007B1 C5 F0            [12] 1878 	xch	a,b
      0007B3 F4               [12] 1879 	cpl	a
      0007B4 34 00            [12] 1880 	addc	a,#0x00
      0007B6 C5 F0            [12] 1881 	xch	a,b
      0007B8                       1882 00422$:
      0007B8 F5*06            [12] 1883 	mov	_main_sloc2_1_0,a
      0007BA 85 F0*07         [24] 1884 	mov	(_main_sloc2_1_0 + 1),b
      0007BD 24r88            [12] 1885 	add	a,#_main_buffer_array_131072_48
      0007BF F5 82            [12] 1886 	mov	dpl,a
      0007C1 E5*07            [12] 1887 	mov	a,(_main_sloc2_1_0 + 1)
      0007C3 34s13            [12] 1888 	addc	a,#(_main_buffer_array_131072_48 >> 8)
      0007C5 F5 83            [12] 1889 	mov	dph,a
      0007C7 E0               [24] 1890 	movx	a,@dptr
      0007C8 F8               [12] 1891 	mov	r0,a
      0007C9 A3               [24] 1892 	inc	dptr
      0007CA E0               [24] 1893 	movx	a,@dptr
      0007CB FF               [12] 1894 	mov	r7,a
      0007CC 48               [12] 1895 	orl	a,r0
      0007CD 70 03            [24] 1896 	jnz	00423$
      0007CF 02r09r8A         [24] 1897 	ljmp	00172$
      0007D2                       1898 00423$:
                                   1899 ;	main.c:216: (buffer_array[index].buffer_size - buffer_array[index].buffer_occupied));
      0007D2 C0 04            [24] 1900 	push	ar4
      0007D4 C0 05            [24] 1901 	push	ar5
      0007D6 E5*06            [12] 1902 	mov	a,_main_sloc2_1_0
      0007D8 24r88            [12] 1903 	add	a,#_main_buffer_array_131072_48
      0007DA FE               [12] 1904 	mov	r6,a
      0007DB E5*07            [12] 1905 	mov	a,(_main_sloc2_1_0 + 1)
      0007DD 34s13            [12] 1906 	addc	a,#(_main_buffer_array_131072_48 >> 8)
      0007DF FF               [12] 1907 	mov	r7,a
      0007E0 8E 82            [24] 1908 	mov	dpl,r6
      0007E2 8F 83            [24] 1909 	mov	dph,r7
      0007E4 A3               [24] 1910 	inc	dptr
      0007E5 A3               [24] 1911 	inc	dptr
      0007E6 E0               [24] 1912 	movx	a,@dptr
      0007E7 F8               [12] 1913 	mov	r0,a
      0007E8 A3               [24] 1914 	inc	dptr
      0007E9 E0               [24] 1915 	movx	a,@dptr
      0007EA FD               [12] 1916 	mov	r5,a
      0007EB 8E 82            [24] 1917 	mov	dpl,r6
      0007ED 8F 83            [24] 1918 	mov	dph,r7
      0007EF A3               [24] 1919 	inc	dptr
      0007F0 A3               [24] 1920 	inc	dptr
      0007F1 A3               [24] 1921 	inc	dptr
      0007F2 A3               [24] 1922 	inc	dptr
      0007F3 E0               [24] 1923 	movx	a,@dptr
      0007F4 F5*00            [12] 1924 	mov	_main_sloc0_1_0,a
      0007F6 A3               [24] 1925 	inc	dptr
      0007F7 E0               [24] 1926 	movx	a,@dptr
      0007F8 F5*01            [12] 1927 	mov	(_main_sloc0_1_0 + 1),a
      0007FA E8               [12] 1928 	mov	a,r0
      0007FB C3               [12] 1929 	clr	c
      0007FC 95*00            [12] 1930 	subb	a,_main_sloc0_1_0
      0007FE F5*0A            [12] 1931 	mov	_main_sloc4_1_0,a
      000800 ED               [12] 1932 	mov	a,r5
      000801 95*01            [12] 1933 	subb	a,(_main_sloc0_1_0 + 1)
      000803 F5*0B            [12] 1934 	mov	(_main_sloc4_1_0 + 1),a
                                   1935 ;	main.c:214: (buffer_array[index].buffer_pointer + buffer_array[index].buffer_size),
      000805 8E 82            [24] 1936 	mov	dpl,r6
      000807 8F 83            [24] 1937 	mov	dph,r7
      000809 E0               [24] 1938 	movx	a,@dptr
      00080A F5*0C            [12] 1939 	mov	_main_sloc5_1_0,a
      00080C A3               [24] 1940 	inc	dptr
      00080D E0               [24] 1941 	movx	a,@dptr
      00080E F5*0D            [12] 1942 	mov	(_main_sloc5_1_0 + 1),a
      000810 E8               [12] 1943 	mov	a,r0
      000811 25*0C            [12] 1944 	add	a,_main_sloc5_1_0
      000813 FB               [12] 1945 	mov	r3,a
      000814 ED               [12] 1946 	mov	a,r5
      000815 35*0D            [12] 1947 	addc	a,(_main_sloc5_1_0 + 1)
      000817 FC               [12] 1948 	mov	r4,a
      000818 8B*0E            [24] 1949 	mov	_main_sloc6_1_0,r3
      00081A 8C*0F            [24] 1950 	mov	(_main_sloc6_1_0 + 1),r4
      00081C 75*10 00         [24] 1951 	mov	(_main_sloc6_1_0 + 2),#0x00
                                   1952 ;	main.c:213: buffer_array[index].buffer_pointer,
      00081F AE*0C            [24] 1953 	mov	r6,_main_sloc5_1_0
      000821 AF*0D            [24] 1954 	mov	r7,(_main_sloc5_1_0 + 1)
      000823 7C 00            [12] 1955 	mov	r4,#0x00
                                   1956 ;	main.c:212: "Storage character counts: %u, Free space available: %u\n\r", index,
      000825 C0 05            [24] 1957 	push	ar5
      000827 C0 04            [24] 1958 	push	ar4
      000829 C0 02            [24] 1959 	push	ar2
      00082B C0 01            [24] 1960 	push	ar1
      00082D C0*0A            [24] 1961 	push	_main_sloc4_1_0
      00082F C0*0B            [24] 1962 	push	(_main_sloc4_1_0 + 1)
      000831 C0*00            [24] 1963 	push	_main_sloc0_1_0
      000833 C0*01            [24] 1964 	push	(_main_sloc0_1_0 + 1)
      000835 C0 00            [24] 1965 	push	ar0
      000837 C0 05            [24] 1966 	push	ar5
      000839 C0*0E            [24] 1967 	push	_main_sloc6_1_0
      00083B C0*0F            [24] 1968 	push	(_main_sloc6_1_0 + 1)
      00083D C0*10            [24] 1969 	push	(_main_sloc6_1_0 + 2)
      00083F C0 06            [24] 1970 	push	ar6
      000841 C0 07            [24] 1971 	push	ar7
      000843 C0 04            [24] 1972 	push	ar4
      000845 C0 01            [24] 1973 	push	ar1
      000847 C0 02            [24] 1974 	push	ar2
      000849 74r7B            [12] 1975 	mov	a,#___str_23
      00084B C0 E0            [24] 1976 	push	acc
      00084D 74s03            [12] 1977 	mov	a,#(___str_23 >> 8)
      00084F C0 E0            [24] 1978 	push	acc
      000851 74 80            [12] 1979 	mov	a,#0x80
      000853 C0 E0            [24] 1980 	push	acc
      000855 12r00r00         [24] 1981 	lcall	_printf
      000858 E5 81            [12] 1982 	mov	a,sp
      00085A 24 EF            [12] 1983 	add	a,#0xef
      00085C F5 81            [12] 1984 	mov	sp,a
      00085E D0 01            [24] 1985 	pop	ar1
      000860 D0 02            [24] 1986 	pop	ar2
                                   1987 ;	main.c:217: printf("Buffer %d content: \n\r", index);
      000862 C0 01            [24] 1988 	push	ar1
      000864 C0 02            [24] 1989 	push	ar2
      000866 74rFA            [12] 1990 	mov	a,#___str_24
      000868 C0 E0            [24] 1991 	push	acc
      00086A 74s03            [12] 1992 	mov	a,#(___str_24 >> 8)
      00086C C0 E0            [24] 1993 	push	acc
      00086E 74 80            [12] 1994 	mov	a,#0x80
      000870 C0 E0            [24] 1995 	push	acc
      000872 12r00r00         [24] 1996 	lcall	_printf
      000875 E5 81            [12] 1997 	mov	a,sp
      000877 24 FB            [12] 1998 	add	a,#0xfb
      000879 F5 81            [12] 1999 	mov	sp,a
      00087B D0 04            [24] 2000 	pop	ar4
      00087D D0 05            [24] 2001 	pop	ar5
                                   2002 ;	main.c:218: for (int j = 0; j < buffer_array[index].buffer_occupied; j++) {
      00087F E5*06            [12] 2003 	mov	a,_main_sloc2_1_0
      000881 24r88            [12] 2004 	add	a,#_main_buffer_array_131072_48
      000883 F5*0E            [12] 2005 	mov	_main_sloc6_1_0,a
      000885 E5*07            [12] 2006 	mov	a,(_main_sloc2_1_0 + 1)
      000887 34s13            [12] 2007 	addc	a,#(_main_buffer_array_131072_48 >> 8)
      000889 F5*0F            [12] 2008 	mov	(_main_sloc6_1_0 + 1),a
      00088B E5*06            [12] 2009 	mov	a,_main_sloc2_1_0
      00088D 24r88            [12] 2010 	add	a,#_main_buffer_array_131072_48
      00088F FE               [12] 2011 	mov	r6,a
      000890 E5*07            [12] 2012 	mov	a,(_main_sloc2_1_0 + 1)
      000892 34s13            [12] 2013 	addc	a,#(_main_buffer_array_131072_48 >> 8)
      000894 FF               [12] 2014 	mov	r7,a
      000895 74 04            [12] 2015 	mov	a,#0x04
      000897 2E               [12] 2016 	add	a,r6
      000898 F5*0C            [12] 2017 	mov	_main_sloc5_1_0,a
      00089A E4               [12] 2018 	clr	a
      00089B 3F               [12] 2019 	addc	a,r7
      00089C F5*0D            [12] 2020 	mov	(_main_sloc5_1_0 + 1),a
      00089E E4               [12] 2021 	clr	a
      00089F F5*0A            [12] 2022 	mov	_main_sloc4_1_0,a
      0008A1 F5*0B            [12] 2023 	mov	(_main_sloc4_1_0 + 1),a
                                   2024 ;	main.c:248: for (int8_t l = 0; l < ARRAY_SIZE; l++) {
      0008A3 D0 05            [24] 2025 	pop	ar5
      0008A5 D0 04            [24] 2026 	pop	ar4
                                   2027 ;	main.c:218: for (int j = 0; j < buffer_array[index].buffer_occupied; j++) {
      0008A7                       2028 00191$:
      0008A7 85*0C 82         [24] 2029 	mov	dpl,_main_sloc5_1_0
      0008AA 85*0D 83         [24] 2030 	mov	dph,(_main_sloc5_1_0 + 1)
      0008AD E0               [24] 2031 	movx	a,@dptr
      0008AE FE               [12] 2032 	mov	r6,a
      0008AF A3               [24] 2033 	inc	dptr
      0008B0 E0               [24] 2034 	movx	a,@dptr
      0008B1 FF               [12] 2035 	mov	r7,a
      0008B2 AA*0A            [24] 2036 	mov	r2,_main_sloc4_1_0
      0008B4 AB*0B            [24] 2037 	mov	r3,(_main_sloc4_1_0 + 1)
      0008B6 C3               [12] 2038 	clr	c
      0008B7 EA               [12] 2039 	mov	a,r2
      0008B8 9E               [12] 2040 	subb	a,r6
      0008B9 EB               [12] 2041 	mov	a,r3
      0008BA 64 80            [12] 2042 	xrl	a,#0x80
      0008BC 8F F0            [24] 2043 	mov	b,r7
      0008BE 63 F0 80         [24] 2044 	xrl	b,#0x80
      0008C1 95 F0            [12] 2045 	subb	a,b
      0008C3 40 03            [24] 2046 	jc	00424$
      0008C5 02r09r63         [24] 2047 	ljmp	00168$
      0008C8                       2048 00424$:
                                   2049 ;	main.c:219: if (!(j % 32)) {
      0008C8 90r00r00         [24] 2050 	mov	dptr,#__modsint_PARM_2
      0008CB 74 20            [12] 2051 	mov	a,#0x20
      0008CD F0               [24] 2052 	movx	@dptr,a
      0008CE E4               [12] 2053 	clr	a
      0008CF A3               [24] 2054 	inc	dptr
      0008D0 F0               [24] 2055 	movx	@dptr,a
      0008D1 85*0A 82         [24] 2056 	mov	dpl,_main_sloc4_1_0
      0008D4 85*0B 83         [24] 2057 	mov	dph,(_main_sloc4_1_0 + 1)
      0008D7 C0 05            [24] 2058 	push	ar5
      0008D9 C0 04            [24] 2059 	push	ar4
      0008DB 12r00r00         [24] 2060 	lcall	__modsint
      0008DE E5 82            [12] 2061 	mov	a,dpl
      0008E0 85 83 F0         [24] 2062 	mov	b,dph
      0008E3 D0 04            [24] 2063 	pop	ar4
      0008E5 D0 05            [24] 2064 	pop	ar5
      0008E7 45 F0            [12] 2065 	orl	a,b
      0008E9 70 1D            [24] 2066 	jnz	00167$
                                   2067 ;	main.c:220: printf("\n\r");
      0008EB C0 05            [24] 2068 	push	ar5
      0008ED C0 04            [24] 2069 	push	ar4
      0008EF 74rE9            [12] 2070 	mov	a,#___str_12
      0008F1 C0 E0            [24] 2071 	push	acc
      0008F3 74s01            [12] 2072 	mov	a,#(___str_12 >> 8)
      0008F5 C0 E0            [24] 2073 	push	acc
      0008F7 74 80            [12] 2074 	mov	a,#0x80
      0008F9 C0 E0            [24] 2075 	push	acc
      0008FB 12r00r00         [24] 2076 	lcall	_printf
      0008FE 15 81            [12] 2077 	dec	sp
      000900 15 81            [12] 2078 	dec	sp
      000902 15 81            [12] 2079 	dec	sp
      000904 D0 04            [24] 2080 	pop	ar4
      000906 D0 05            [24] 2081 	pop	ar5
      000908                       2082 00167$:
                                   2083 ;	main.c:222: printf("%c", buffer_array[index].buffer_pointer[j]);
      000908 85*0E 82         [24] 2084 	mov	dpl,_main_sloc6_1_0
      00090B 85*0F 83         [24] 2085 	mov	dph,(_main_sloc6_1_0 + 1)
      00090E E0               [24] 2086 	movx	a,@dptr
      00090F FE               [12] 2087 	mov	r6,a
      000910 A3               [24] 2088 	inc	dptr
      000911 E0               [24] 2089 	movx	a,@dptr
      000912 FF               [12] 2090 	mov	r7,a
      000913 E5*0A            [12] 2091 	mov	a,_main_sloc4_1_0
      000915 2E               [12] 2092 	add	a,r6
      000916 F5 82            [12] 2093 	mov	dpl,a
      000918 E5*0B            [12] 2094 	mov	a,(_main_sloc4_1_0 + 1)
      00091A 3F               [12] 2095 	addc	a,r7
      00091B F5 83            [12] 2096 	mov	dph,a
      00091D E0               [24] 2097 	movx	a,@dptr
      00091E FF               [12] 2098 	mov	r7,a
      00091F 7E 00            [12] 2099 	mov	r6,#0x00
      000921 C0 05            [24] 2100 	push	ar5
      000923 C0 04            [24] 2101 	push	ar4
      000925 C0 07            [24] 2102 	push	ar7
      000927 C0 06            [24] 2103 	push	ar6
      000929 74r10            [12] 2104 	mov	a,#___str_25
      00092B C0 E0            [24] 2105 	push	acc
      00092D 74s04            [12] 2106 	mov	a,#(___str_25 >> 8)
      00092F C0 E0            [24] 2107 	push	acc
      000931 74 80            [12] 2108 	mov	a,#0x80
      000933 C0 E0            [24] 2109 	push	acc
      000935 12r00r00         [24] 2110 	lcall	_printf
      000938 E5 81            [12] 2111 	mov	a,sp
      00093A 24 FB            [12] 2112 	add	a,#0xfb
      00093C F5 81            [12] 2113 	mov	sp,a
      00093E D0 04            [24] 2114 	pop	ar4
      000940 D0 05            [24] 2115 	pop	ar5
                                   2116 ;	main.c:223: buffer_array[index].buffer_pointer[j] = 0;
      000942 85*0E 82         [24] 2117 	mov	dpl,_main_sloc6_1_0
      000945 85*0F 83         [24] 2118 	mov	dph,(_main_sloc6_1_0 + 1)
      000948 E0               [24] 2119 	movx	a,@dptr
      000949 FE               [12] 2120 	mov	r6,a
      00094A A3               [24] 2121 	inc	dptr
      00094B E0               [24] 2122 	movx	a,@dptr
      00094C FF               [12] 2123 	mov	r7,a
      00094D E5*0A            [12] 2124 	mov	a,_main_sloc4_1_0
      00094F 2E               [12] 2125 	add	a,r6
      000950 F5 82            [12] 2126 	mov	dpl,a
      000952 E5*0B            [12] 2127 	mov	a,(_main_sloc4_1_0 + 1)
      000954 3F               [12] 2128 	addc	a,r7
      000955 F5 83            [12] 2129 	mov	dph,a
      000957 E4               [12] 2130 	clr	a
      000958 F0               [24] 2131 	movx	@dptr,a
                                   2132 ;	main.c:218: for (int j = 0; j < buffer_array[index].buffer_occupied; j++) {
      000959 05*0A            [12] 2133 	inc	_main_sloc4_1_0
                                   2134 ;	genFromRTrack removed	clr	a
      00095B B5*0A 02         [24] 2135 	cjne	a,_main_sloc4_1_0,00426$
      00095E 05*0B            [12] 2136 	inc	(_main_sloc4_1_0 + 1)
      000960                       2137 00426$:
      000960 02r08rA7         [24] 2138 	ljmp	00191$
      000963                       2139 00168$:
                                   2140 ;	main.c:225: printf("\n\r");
      000963 C0 05            [24] 2141 	push	ar5
      000965 C0 04            [24] 2142 	push	ar4
      000967 74rE9            [12] 2143 	mov	a,#___str_12
      000969 C0 E0            [24] 2144 	push	acc
      00096B 74s01            [12] 2145 	mov	a,#(___str_12 >> 8)
      00096D C0 E0            [24] 2146 	push	acc
      00096F 74 80            [12] 2147 	mov	a,#0x80
      000971 C0 E0            [24] 2148 	push	acc
      000973 12r00r00         [24] 2149 	lcall	_printf
      000976 15 81            [12] 2150 	dec	sp
      000978 15 81            [12] 2151 	dec	sp
      00097A 15 81            [12] 2152 	dec	sp
      00097C D0 04            [24] 2153 	pop	ar4
      00097E D0 05            [24] 2154 	pop	ar5
                                   2155 ;	main.c:226: buffer_array[index].buffer_occupied = 0;
      000980 85*0C 82         [24] 2156 	mov	dpl,_main_sloc5_1_0
      000983 85*0D 83         [24] 2157 	mov	dph,(_main_sloc5_1_0 + 1)
      000986 E4               [12] 2158 	clr	a
      000987 F0               [24] 2159 	movx	@dptr,a
      000988 A3               [24] 2160 	inc	dptr
      000989 F0               [24] 2161 	movx	@dptr,a
      00098A                       2162 00172$:
                                   2163 ;	main.c:207: for (int8_t index = 0; index <= buffer_count; index++) {
      00098A 05*04            [12] 2164 	inc	_main_sloc1_1_0
      00098C 02r07r83         [24] 2165 	ljmp	00194$
      00098F                       2166 00173$:
                                   2167 ;	main.c:229: switch_case = 0;
      00098F 90r13rCA         [24] 2168 	mov	dptr,#_main_switch_case_131074_52
      000992 E4               [12] 2169 	clr	a
      000993 F0               [24] 2170 	movx	@dptr,a
      000994 A3               [24] 2171 	inc	dptr
      000995 F0               [24] 2172 	movx	@dptr,a
      000996 A3               [24] 2173 	inc	dptr
      000997 F0               [24] 2174 	movx	@dptr,a
      000998 A3               [24] 2175 	inc	dptr
      000999 F0               [24] 2176 	movx	@dptr,a
                                   2177 ;	main.c:230: break;
      00099A 02r01r92         [24] 2178 	ljmp	00181$
                                   2179 ;	main.c:233: for (int k = 0; k < buffer_array[0].buffer_size; k++) {
      00099D                       2180 00243$:
      00099D 7E 00            [12] 2181 	mov	r6,#0x00
      00099F 7F 00            [12] 2182 	mov	r7,#0x00
      0009A1                       2183 00196$:
      0009A1 90r13r8A         [24] 2184 	mov	dptr,#(_main_buffer_array_131072_48 + 0x0002)
      0009A4 E0               [24] 2185 	movx	a,@dptr
      0009A5 FC               [12] 2186 	mov	r4,a
      0009A6 A3               [24] 2187 	inc	dptr
      0009A7 E0               [24] 2188 	movx	a,@dptr
      0009A8 FD               [12] 2189 	mov	r5,a
      0009A9 8E 02            [24] 2190 	mov	ar2,r6
      0009AB 8F 03            [24] 2191 	mov	ar3,r7
      0009AD C3               [12] 2192 	clr	c
      0009AE EA               [12] 2193 	mov	a,r2
      0009AF 9C               [12] 2194 	subb	a,r4
      0009B0 EB               [12] 2195 	mov	a,r3
      0009B1 64 80            [12] 2196 	xrl	a,#0x80
      0009B3 8D F0            [24] 2197 	mov	b,r5
      0009B5 63 F0 80         [24] 2198 	xrl	b,#0x80
      0009B8 95 F0            [12] 2199 	subb	a,b
      0009BA 40 03            [24] 2200 	jc	00427$
      0009BC 02r0Ar50         [24] 2201 	ljmp	00177$
      0009BF                       2202 00427$:
                                   2203 ;	main.c:234: if (!(k % 16)) {
      0009BF 90r00r00         [24] 2204 	mov	dptr,#__modsint_PARM_2
      0009C2 74 10            [12] 2205 	mov	a,#0x10
      0009C4 F0               [24] 2206 	movx	@dptr,a
      0009C5 E4               [12] 2207 	clr	a
      0009C6 A3               [24] 2208 	inc	dptr
      0009C7 F0               [24] 2209 	movx	@dptr,a
      0009C8 8E 82            [24] 2210 	mov	dpl,r6
      0009CA 8F 83            [24] 2211 	mov	dph,r7
      0009CC C0 07            [24] 2212 	push	ar7
      0009CE C0 06            [24] 2213 	push	ar6
      0009D0 12r00r00         [24] 2214 	lcall	__modsint
      0009D3 E5 82            [12] 2215 	mov	a,dpl
      0009D5 85 83 F0         [24] 2216 	mov	b,dph
      0009D8 D0 06            [24] 2217 	pop	ar6
      0009DA D0 07            [24] 2218 	pop	ar7
      0009DC 45 F0            [12] 2219 	orl	a,b
      0009DE 70 33            [24] 2220 	jnz	00176$
                                   2221 ;	main.c:235: printf("\n\r%p :", &buffer_array[0].buffer_pointer[k]);
      0009E0 90r13r88         [24] 2222 	mov	dptr,#_main_buffer_array_131072_48
      0009E3 E0               [24] 2223 	movx	a,@dptr
      0009E4 FC               [12] 2224 	mov	r4,a
      0009E5 A3               [24] 2225 	inc	dptr
      0009E6 E0               [24] 2226 	movx	a,@dptr
      0009E7 FD               [12] 2227 	mov	r5,a
      0009E8 EE               [12] 2228 	mov	a,r6
      0009E9 2C               [12] 2229 	add	a,r4
      0009EA FC               [12] 2230 	mov	r4,a
      0009EB EF               [12] 2231 	mov	a,r7
      0009EC 3D               [12] 2232 	addc	a,r5
      0009ED FD               [12] 2233 	mov	r5,a
      0009EE 7B 00            [12] 2234 	mov	r3,#0x00
      0009F0 C0 07            [24] 2235 	push	ar7
      0009F2 C0 06            [24] 2236 	push	ar6
      0009F4 C0 04            [24] 2237 	push	ar4
      0009F6 C0 05            [24] 2238 	push	ar5
      0009F8 C0 03            [24] 2239 	push	ar3
      0009FA 74r13            [12] 2240 	mov	a,#___str_26
      0009FC C0 E0            [24] 2241 	push	acc
      0009FE 74s04            [12] 2242 	mov	a,#(___str_26 >> 8)
      000A00 C0 E0            [24] 2243 	push	acc
      000A02 74 80            [12] 2244 	mov	a,#0x80
      000A04 C0 E0            [24] 2245 	push	acc
      000A06 12r00r00         [24] 2246 	lcall	_printf
      000A09 E5 81            [12] 2247 	mov	a,sp
      000A0B 24 FA            [12] 2248 	add	a,#0xfa
      000A0D F5 81            [12] 2249 	mov	sp,a
      000A0F D0 06            [24] 2250 	pop	ar6
      000A11 D0 07            [24] 2251 	pop	ar7
      000A13                       2252 00176$:
                                   2253 ;	main.c:237: printf(" %x", buffer_array[0].buffer_pointer[k]);
      000A13 90r13r88         [24] 2254 	mov	dptr,#_main_buffer_array_131072_48
      000A16 E0               [24] 2255 	movx	a,@dptr
      000A17 FC               [12] 2256 	mov	r4,a
      000A18 A3               [24] 2257 	inc	dptr
      000A19 E0               [24] 2258 	movx	a,@dptr
      000A1A FD               [12] 2259 	mov	r5,a
      000A1B EE               [12] 2260 	mov	a,r6
      000A1C 2C               [12] 2261 	add	a,r4
      000A1D F5 82            [12] 2262 	mov	dpl,a
      000A1F EF               [12] 2263 	mov	a,r7
      000A20 3D               [12] 2264 	addc	a,r5
      000A21 F5 83            [12] 2265 	mov	dph,a
      000A23 E0               [24] 2266 	movx	a,@dptr
      000A24 FD               [12] 2267 	mov	r5,a
      000A25 7C 00            [12] 2268 	mov	r4,#0x00
      000A27 C0 07            [24] 2269 	push	ar7
      000A29 C0 06            [24] 2270 	push	ar6
      000A2B C0 05            [24] 2271 	push	ar5
      000A2D C0 04            [24] 2272 	push	ar4
      000A2F 74r1A            [12] 2273 	mov	a,#___str_27
      000A31 C0 E0            [24] 2274 	push	acc
      000A33 74s04            [12] 2275 	mov	a,#(___str_27 >> 8)
      000A35 C0 E0            [24] 2276 	push	acc
      000A37 74 80            [12] 2277 	mov	a,#0x80
      000A39 C0 E0            [24] 2278 	push	acc
      000A3B 12r00r00         [24] 2279 	lcall	_printf
      000A3E E5 81            [12] 2280 	mov	a,sp
      000A40 24 FB            [12] 2281 	add	a,#0xfb
      000A42 F5 81            [12] 2282 	mov	sp,a
      000A44 D0 06            [24] 2283 	pop	ar6
      000A46 D0 07            [24] 2284 	pop	ar7
                                   2285 ;	main.c:233: for (int k = 0; k < buffer_array[0].buffer_size; k++) {
      000A48 0E               [12] 2286 	inc	r6
      000A49 BE 00 01         [24] 2287 	cjne	r6,#0x00,00429$
      000A4C 0F               [12] 2288 	inc	r7
      000A4D                       2289 00429$:
      000A4D 02r09rA1         [24] 2290 	ljmp	00196$
      000A50                       2291 00177$:
                                   2292 ;	main.c:239: printf("\n\r");
      000A50 74rE9            [12] 2293 	mov	a,#___str_12
      000A52 C0 E0            [24] 2294 	push	acc
      000A54 74s01            [12] 2295 	mov	a,#(___str_12 >> 8)
      000A56 C0 E0            [24] 2296 	push	acc
      000A58 74 80            [12] 2297 	mov	a,#0x80
      000A5A C0 E0            [24] 2298 	push	acc
      000A5C 12r00r00         [24] 2299 	lcall	_printf
      000A5F 15 81            [12] 2300 	dec	sp
      000A61 15 81            [12] 2301 	dec	sp
      000A63 15 81            [12] 2302 	dec	sp
                                   2303 ;	main.c:240: switch_case = 0;
      000A65 90r13rCA         [24] 2304 	mov	dptr,#_main_switch_case_131074_52
      000A68 E4               [12] 2305 	clr	a
      000A69 F0               [24] 2306 	movx	@dptr,a
      000A6A A3               [24] 2307 	inc	dptr
      000A6B F0               [24] 2308 	movx	@dptr,a
      000A6C A3               [24] 2309 	inc	dptr
      000A6D F0               [24] 2310 	movx	@dptr,a
      000A6E A3               [24] 2311 	inc	dptr
      000A6F F0               [24] 2312 	movx	@dptr,a
                                   2313 ;	main.c:241: break;
      000A70 02r01r92         [24] 2314 	ljmp	00181$
                                   2315 ;	main.c:248: for (int8_t l = 0; l < ARRAY_SIZE; l++) {
      000A73                       2316 00245$:
      000A73 7F 00            [12] 2317 	mov	r7,#0x00
      000A75                       2318 00199$:
      000A75 C3               [12] 2319 	clr	c
      000A76 EF               [12] 2320 	mov	a,r7
      000A77 64 80            [12] 2321 	xrl	a,#0x80
      000A79 94 8A            [12] 2322 	subb	a,#0x8a
      000A7B 40 03            [24] 2323 	jc	00430$
      000A7D 02r00r07         [24] 2324 	ljmp	00185$
      000A80                       2325 00430$:
                                   2326 ;	main.c:249: free(buffer_array[l].buffer_pointer);
      000A80 C2 D5            [12] 2327 	clr	F0
      000A82 75 F0 06         [24] 2328 	mov	b,#0x06
      000A85 EF               [12] 2329 	mov	a,r7
      000A86 30 E7 04         [24] 2330 	jnb	acc.7,00431$
      000A89 B2 D5            [12] 2331 	cpl	F0
      000A8B F4               [12] 2332 	cpl	a
      000A8C 04               [12] 2333 	inc	a
      000A8D                       2334 00431$:
      000A8D A4               [48] 2335 	mul	ab
      000A8E 30 D5 0A         [24] 2336 	jnb	F0,00432$
      000A91 F4               [12] 2337 	cpl	a
      000A92 24 01            [12] 2338 	add	a,#0x01
      000A94 C5 F0            [12] 2339 	xch	a,b
      000A96 F4               [12] 2340 	cpl	a
      000A97 34 00            [12] 2341 	addc	a,#0x00
      000A99 C5 F0            [12] 2342 	xch	a,b
      000A9B                       2343 00432$:
      000A9B 24r88            [12] 2344 	add	a,#_main_buffer_array_131072_48
      000A9D FD               [12] 2345 	mov	r5,a
      000A9E 74s13            [12] 2346 	mov	a,#(_main_buffer_array_131072_48 >> 8)
      000AA0 35 F0            [12] 2347 	addc	a,b
      000AA2 FE               [12] 2348 	mov	r6,a
      000AA3 8D 82            [24] 2349 	mov	dpl,r5
      000AA5 8E 83            [24] 2350 	mov	dph,r6
      000AA7 E0               [24] 2351 	movx	a,@dptr
      000AA8 FB               [12] 2352 	mov	r3,a
      000AA9 A3               [24] 2353 	inc	dptr
      000AAA E0               [24] 2354 	movx	a,@dptr
      000AAB FC               [12] 2355 	mov	r4,a
      000AAC 7A 00            [12] 2356 	mov	r2,#0x00
      000AAE 8B 82            [24] 2357 	mov	dpl,r3
      000AB0 8C 83            [24] 2358 	mov	dph,r4
      000AB2 8A F0            [24] 2359 	mov	b,r2
      000AB4 C0 07            [24] 2360 	push	ar7
      000AB6 C0 06            [24] 2361 	push	ar6
      000AB8 C0 05            [24] 2362 	push	ar5
      000ABA 12r00r00         [24] 2363 	lcall	_free
      000ABD D0 05            [24] 2364 	pop	ar5
      000ABF D0 06            [24] 2365 	pop	ar6
      000AC1 D0 07            [24] 2366 	pop	ar7
                                   2367 ;	main.c:250: buffer_array[l].buffer_pointer = NULL;
      000AC3 8D 82            [24] 2368 	mov	dpl,r5
      000AC5 8E 83            [24] 2369 	mov	dph,r6
      000AC7 E4               [12] 2370 	clr	a
      000AC8 F0               [24] 2371 	movx	@dptr,a
      000AC9 A3               [24] 2372 	inc	dptr
      000ACA F0               [24] 2373 	movx	@dptr,a
                                   2374 ;	main.c:248: for (int8_t l = 0; l < ARRAY_SIZE; l++) {
      000ACB 0F               [12] 2375 	inc	r7
                                   2376 ;	main.c:253: }
      000ACC 80 A7            [24] 2377 	sjmp	00199$
                                   2378 	.area CSEG    (CODE)
                                   2379 	.area CONST   (CODE)
      000000                       2380 ___sdcc_heap_size:
      000000 88 13                 2381 	.byte #0x88, #0x13	; 5000
                                   2382 	.area CONST   (CODE)
      000002                       2383 ___str_0:
      000002 53 70 65 63 69 66 79  2384 	.ascii "Specify the buffer size (range 32 to 4800) divisible by 16: "
             20 74 68 65 20 62 75
             66 66 65 72 20 73 69
             7A 65 20 28 72 61 6E
             67 65 20 33 32 20 74
             6F 20 34 38 30 30 29
             20 64 69 76 69 73 69
             62 6C 65 20 62 79 20
             31 36 3A 20
      00003E 0A                    2385 	.db 0x0a
      00003F 0D                    2386 	.db 0x0d
      000040 00                    2387 	.db 0x00
                                   2388 	.area CSEG    (CODE)
                                   2389 	.area CONST   (CODE)
      000041                       2390 ___str_1:
      000041 46 61 69 6C 65 64 20  2391 	.ascii "Failed to allocate memory"
             74 6F 20 61 6C 6C 6F
             63 61 74 65 20 6D 65
             6D 6F 72 79
      00005A 0A                    2392 	.db 0x0a
      00005B 0D                    2393 	.db 0x0d
      00005C 00                    2394 	.db 0x00
                                   2395 	.area CSEG    (CODE)
                                   2396 	.area CONST   (CODE)
      00005D                       2397 ___str_2:
      00005D 2A 20 45 6E 74 65 72  2398 	.ascii "* Enter any UPPERCASE letter to append characters into buffe"
             20 61 6E 79 20 55 50
             50 45 52 43 41 53 45
             20 6C 65 74 74 65 72
             20 74 6F 20 61 70 70
             65 6E 64 20 63 68 61
             72 61 63 74 65 72 73
             20 69 6E 74 6F 20 62
             75 66 66 65
      000099 72 20 30              2399 	.ascii "r 0"
      00009C 0A                    2400 	.db 0x0a
      00009D 0D                    2401 	.db 0x0d
      00009E 00                    2402 	.db 0x00
                                   2403 	.area CSEG    (CODE)
                                   2404 	.area CONST   (CODE)
      00009F                       2405 ___str_3:
      00009F 2A 20 50 72 65 73 73  2406 	.ascii "* Press '+' to allocate a new buffer "
             20 27 2B 27 20 74 6F
             20 61 6C 6C 6F 63 61
             74 65 20 61 20 6E 65
             77 20 62 75 66 66 65
             72 20
      0000C4 0A                    2407 	.db 0x0a
      0000C5 0D                    2408 	.db 0x0d
      0000C6 00                    2409 	.db 0x00
                                   2410 	.area CSEG    (CODE)
                                   2411 	.area CONST   (CODE)
      0000C7                       2412 ___str_4:
      0000C7 2A 20 50 72 65 73 73  2413 	.ascii "* Press '-' to remove allocated buffers "
             20 27 2D 27 20 74 6F
             20 72 65 6D 6F 76 65
             20 61 6C 6C 6F 63 61
             74 65 64 20 62 75 66
             66 65 72 73 20
      0000EF 0A                    2414 	.db 0x0a
      0000F0 0D                    2415 	.db 0x0d
      0000F1 00                    2416 	.db 0x00
                                   2417 	.area CSEG    (CODE)
                                   2418 	.area CONST   (CODE)
      0000F2                       2419 ___str_5:
      0000F2 2A 20 50 72 65 73 73  2420 	.ascii "* Press '?' to get the heap report "
             20 27 3F 27 20 74 6F
             20 67 65 74 20 74 68
             65 20 68 65 61 70 20
             72 65 70 6F 72 74 20
      000115 0A                    2421 	.db 0x0a
      000116 0D                    2422 	.db 0x0d
      000117 00                    2423 	.db 0x00
                                   2424 	.area CSEG    (CODE)
                                   2425 	.area CONST   (CODE)
      000118                       2426 ___str_6:
      000118 2A 20 50 72 65 73 73  2427 	.ascii "* Press '=' to get buffer 0 content "
             20 27 3D 27 20 74 6F
             20 67 65 74 20 62 75
             66 66 65 72 20 30 20
             63 6F 6E 74 65 6E 74
             20
      00013C 0A                    2428 	.db 0x0a
      00013D 0D                    2429 	.db 0x0d
      00013E 00                    2430 	.db 0x00
                                   2431 	.area CSEG    (CODE)
                                   2432 	.area CONST   (CODE)
      00013F                       2433 ___str_7:
      00013F 2A 20 50 72 65 73 73  2434 	.ascii "* Press '@' to restart the program "
             20 27 40 27 20 74 6F
             20 72 65 73 74 61 72
             74 20 74 68 65 20 70
             72 6F 67 72 61 6D 20
      000162 0A                    2435 	.db 0x0a
      000163 0D                    2436 	.db 0x0d
      000164 00                    2437 	.db 0x00
                                   2438 	.area CSEG    (CODE)
                                   2439 	.area CONST   (CODE)
      000165                       2440 ___str_8:
      000165 20 6D 6F 64 65 2C 20  2441 	.ascii " mode, specify buffer size (range 20 to 400): "
             73 70 65 63 69 66 79
             20 62 75 66 66 65 72
             20 73 69 7A 65 20 28
             72 61 6E 67 65 20 32
             30 20 74 6F 20 34 30
             30 29 3A 20
      000193 0A                    2442 	.db 0x0a
      000194 0D                    2443 	.db 0x0d
      000195 00                    2444 	.db 0x00
                                   2445 	.area CSEG    (CODE)
                                   2446 	.area CONST   (CODE)
      000196                       2447 ___str_9:
      000196 46 69 72 73 74 20 65  2448 	.ascii "First exit the current mode "
             78 69 74 20 74 68 65
             20 63 75 72 72 65 6E
             74 20 6D 6F 64 65 20
      0001B2 0A                    2449 	.db 0x0a
      0001B3 0D                    2450 	.db 0x0d
      0001B4 00                    2451 	.db 0x00
                                   2452 	.area CSEG    (CODE)
                                   2453 	.area CONST   (CODE)
      0001B5                       2454 ___str_10:
      0001B5 20 6D 6F 64 65 2C 20  2455 	.ascii " mode, specify buffer number to destroy: "
             73 70 65 63 69 66 79
             20 62 75 66 66 65 72
             20 6E 75 6D 62 65 72
             20 74 6F 20 64 65 73
             74 72 6F 79 3A 20
      0001DE 0A                    2456 	.db 0x0a
      0001DF 0D                    2457 	.db 0x0d
      0001E0 00                    2458 	.db 0x00
                                   2459 	.area CSEG    (CODE)
                                   2460 	.area CONST   (CODE)
      0001E1                       2461 ___str_11:
      0001E1 20 6D 6F 64 65        2462 	.ascii " mode"
      0001E6 0A                    2463 	.db 0x0a
      0001E7 0D                    2464 	.db 0x0d
      0001E8 00                    2465 	.db 0x00
                                   2466 	.area CSEG    (CODE)
                                   2467 	.area CONST   (CODE)
      0001E9                       2468 ___str_12:
      0001E9 0A                    2469 	.db 0x0a
      0001EA 0D                    2470 	.db 0x0d
      0001EB 00                    2471 	.db 0x00
                                   2472 	.area CSEG    (CODE)
                                   2473 	.area CONST   (CODE)
      0001EC                       2474 ___str_13:
      0001EC 20 6D 6F 64 65 20 2D  2475 	.ascii " mode - restarting program "
             20 72 65 73 74 61 72
             74 69 6E 67 20 70 72
             6F 67 72 61 6D 20
      000207 0A                    2476 	.db 0x0a
      000208 0D                    2477 	.db 0x0d
      000209 00                    2478 	.db 0x00
                                   2479 	.area CSEG    (CODE)
                                   2480 	.area CONST   (CODE)
      00020A                       2481 ___str_14:
      00020A 43 68 61 72 61 63 74  2482 	.ascii "Characters added to buffer 0 - exiting mode "
             65 72 73 20 61 64 64
             65 64 20 74 6F 20 62
             75 66 66 65 72 20 30
             20 2D 20 65 78 69 74
             69 6E 67 20 6D 6F 64
             65 20
      000236 0A                    2483 	.db 0x0a
      000237 0D                    2484 	.db 0x0d
      000238 00                    2485 	.db 0x00
                                   2486 	.area CSEG    (CODE)
                                   2487 	.area CONST   (CODE)
      000239                       2488 ___str_15:
      000239 0A                    2489 	.db 0x0a
      00023A 0D                    2490 	.db 0x0d
      00023B 4E 6F 74 20 65 6E 6F  2491 	.ascii "Not enough memory to load, echoing to serial output %c"
             75 67 68 20 6D 65 6D
             6F 72 79 20 74 6F 20
             6C 6F 61 64 2C 20 65
             63 68 6F 69 6E 67 20
             74 6F 20 73 65 72 69
             61 6C 20 6F 75 74 70
             75 74 20 25 63
      000271 0A                    2492 	.db 0x0a
      000272 0D                    2493 	.db 0x0d
      000273 00                    2494 	.db 0x00
                                   2495 	.area CSEG    (CODE)
                                   2496 	.area CONST   (CODE)
      000274                       2497 ___str_16:
      000274 46 61 69 6C 65 64 20  2498 	.ascii "Failed to allocate memory  - exiting mode "
             74 6F 20 61 6C 6C 6F
             63 61 74 65 20 6D 65
             6D 6F 72 79 20 20 2D
             20 65 78 69 74 69 6E
             67 20 6D 6F 64 65 20
      00029E 0A                    2499 	.db 0x0a
      00029F 0D                    2500 	.db 0x0d
      0002A0 00                    2501 	.db 0x00
                                   2502 	.area CSEG    (CODE)
                                   2503 	.area CONST   (CODE)
      0002A1                       2504 ___str_17:
      0002A1 41 6C 6C 6F 63 61 74  2505 	.ascii "Allocated memory as buffer #%d  - exiting mode "
             65 64 20 6D 65 6D 6F
             72 79 20 61 73 20 62
             75 66 66 65 72 20 23
             25 64 20 20 2D 20 65
             78 69 74 69 6E 67 20
             6D 6F 64 65 20
      0002D0 0A                    2506 	.db 0x0a
      0002D1 0D                    2507 	.db 0x0d
      0002D2 00                    2508 	.db 0x00
                                   2509 	.area CSEG    (CODE)
                                   2510 	.area CONST   (CODE)
      0002D3                       2511 ___str_18:
      0002D3 43 61 6E 6E 6F 74 20  2512 	.ascii "Cannot remove buffer 0 - exiting mode "
             72 65 6D 6F 76 65 20
             62 75 66 66 65 72 20
             30 20 2D 20 65 78 69
             74 69 6E 67 20 6D 6F
             64 65 20
      0002F9 0A                    2513 	.db 0x0a
      0002FA 0D                    2514 	.db 0x0d
      0002FB 00                    2515 	.db 0x00
                                   2516 	.area CSEG    (CODE)
                                   2517 	.area CONST   (CODE)
      0002FC                       2518 ___str_19:
      0002FC 46 72 65 65 64 20 62  2519 	.ascii "Freed buffer #%d - exiting mode "
             75 66 66 65 72 20 23
             25 64 20 2D 20 65 78
             69 74 69 6E 67 20 6D
             6F 64 65 20
      00031C 0A                    2520 	.db 0x0a
      00031D 0D                    2521 	.db 0x0d
      00031E 00                    2522 	.db 0x00
                                   2523 	.area CSEG    (CODE)
                                   2524 	.area CONST   (CODE)
      00031F                       2525 ___str_20:
      00031F 4E 6F 20 73 75 63 68  2526 	.ascii "No such buffer exists - exiting mode "
             20 62 75 66 66 65 72
             20 65 78 69 73 74 73
             20 2D 20 65 78 69 74
             69 6E 67 20 6D 6F 64
             65 20
      000344 0A                    2527 	.db 0x0a
      000345 0D                    2528 	.db 0x0d
      000346 00                    2529 	.db 0x00
                                   2530 	.area CSEG    (CODE)
                                   2531 	.area CONST   (CODE)
      000347                       2532 ___str_21:
      000347 54 6F 74 61 6C 20 63  2533 	.ascii "Total characters count: %d "
             68 61 72 61 63 74 65
             72 73 20 63 6F 75 6E
             74 3A 20 25 64 20
      000362 0A                    2534 	.db 0x0a
      000363 0D                    2535 	.db 0x0d
      000364 00                    2536 	.db 0x00
                                   2537 	.area CSEG    (CODE)
                                   2538 	.area CONST   (CODE)
      000365                       2539 ___str_22:
      000365 53 69 6E 63 65 20 6C  2540 	.ascii "Since last '?': %d "
             61 73 74 20 27 3F 27
             3A 20 25 64 20
      000378 0A                    2541 	.db 0x0a
      000379 0D                    2542 	.db 0x0d
      00037A 00                    2543 	.db 0x00
                                   2544 	.area CSEG    (CODE)
                                   2545 	.area CONST   (CODE)
      00037B                       2546 ___str_23:
      00037B 42 75 66 66 65 72 20  2547 	.ascii "Buffer %d --> Start address: %p, End address: %p, Allocated "
             25 64 20 2D 2D 3E 20
             53 74 61 72 74 20 61
             64 64 72 65 73 73 3A
             20 25 70 2C 20 45 6E
             64 20 61 64 64 72 65
             73 73 3A 20 25 70 2C
             20 41 6C 6C 6F 63 61
             74 65 64 20
      0003B7 73 69 7A 65 3A 20 25  2548 	.ascii "size: %u, Storage character counts: %u, Free space available"
             75 2C 20 53 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 20
             63 6F 75 6E 74 73 3A
             20 25 75 2C 20 46 72
             65 65 20 73 70 61 63
             65 20 61 76 61 69 6C
             61 62 6C 65
      0003F3 3A 20 25 75           2549 	.ascii ": %u"
      0003F7 0A                    2550 	.db 0x0a
      0003F8 0D                    2551 	.db 0x0d
      0003F9 00                    2552 	.db 0x00
                                   2553 	.area CSEG    (CODE)
                                   2554 	.area CONST   (CODE)
      0003FA                       2555 ___str_24:
      0003FA 42 75 66 66 65 72 20  2556 	.ascii "Buffer %d content: "
             25 64 20 63 6F 6E 74
             65 6E 74 3A 20
      00040D 0A                    2557 	.db 0x0a
      00040E 0D                    2558 	.db 0x0d
      00040F 00                    2559 	.db 0x00
                                   2560 	.area CSEG    (CODE)
                                   2561 	.area CONST   (CODE)
      000410                       2562 ___str_25:
      000410 25 63                 2563 	.ascii "%c"
      000412 00                    2564 	.db 0x00
                                   2565 	.area CSEG    (CODE)
                                   2566 	.area CONST   (CODE)
      000413                       2567 ___str_26:
      000413 0A                    2568 	.db 0x0a
      000414 0D                    2569 	.db 0x0d
      000415 25 70 20 3A           2570 	.ascii "%p :"
      000419 00                    2571 	.db 0x00
                                   2572 	.area CSEG    (CODE)
                                   2573 	.area CONST   (CODE)
      00041A                       2574 ___str_27:
      00041A 20 25 78              2575 	.ascii " %x"
      00041D 00                    2576 	.db 0x00
                                   2577 	.area CSEG    (CODE)
                                   2578 	.area XINIT   (CODE)
                                   2579 	.area CABS    (ABS,CODE)
